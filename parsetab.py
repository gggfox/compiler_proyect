
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR COLON COMMA CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING DIFFERENT DIV DIV_EQ ELSE EQUAL EQUIVALENT EXP FLOAT FOR FUNCTION GREATER GREATER_EQ ID IF INT LESS LESS_EQ L_BRACE L_BRACKET L_PAR MAIN MAX MEAN MEDIAN MIN MINUS MINUS_EQ MODE MULT MULT_EQ OR PLOT_XY PLUS PLUS_EQ PROGRAM READ REGRESSION REMAINDER RETURN R_BRACE R_BRACKET R_PAR SEMICOLON STRING SUM TO VARIANCE VARS VOID WHILE WRITE\n    program : PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end\n    \n    programB : vars  programC \n        | programC\n    \n    programC : function programC\n             | main\n    \n    vars : VARS L_BRACE varsB R_BRACE \n    \n    varsB : type np_set_curr_datatype COLON varsC SEMICOLON\n          | type np_set_curr_datatype COLON varsC SEMICOLON varsB\n    \n    varsC : varsD \n          | varsD COMMA varsC\n    \n    varsD : ID np_add_var\n          | ID L_BRACKET  CTE_INT R_BRACKET np_add_arr \n    \n    function : FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc \n    \n    main : MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock \n    \n    type : INT np_add_datatype\n          | FLOAT np_add_datatype\n          | BOOL np_add_datatype\n          | CHAR np_add_datatype\n          | STRING np_add_datatype\n    \n    var : ID L_BRACKET np_arr_start exp np_end np_arr_end R_BRACKET\n        | ID np_push_operand\n    \n    vector : ID L_BRACKET R_BRACKET\n    \n    func_type : VOID np_add_datatype \n              | type\n    \n    block : L_BRACE blockB R_BRACE \n\n    blockB : statement blockB\n           | empty\n    \n    vblock : L_BRACE vars vblockB R_BRACE \n           | block\n\n    vblockB : statement vblockB\n            | empty\n    \n    params : type COLON ID np_add_param\n           | type COLON ID np_add_param COMMA params\n           | empty\n    \n    statement : assign \n           | condicional \n           | read \n           | write \n           | loop_cond \n           | loop_range \n           | return \n           | void_func\n    \n    void_func : func_call SEMICOLON\n    \n    assign : var oper_assign np_push_operator expression np_end SEMICOLON\n    \n    predef_func : MIN L_PAR vector R_PAR\n            | MAX L_PAR vector R_PAR\n            | MEAN L_PAR vector R_PAR\n            | MEDIAN L_PAR vector R_PAR\n            | MODE L_PAR vector R_PAR\n            | PLOT_XY L_PAR vector COMMA vector R_PAR\n            | REGRESSION L_PAR vector COMMA vector R_PAR\n            | VARIANCE L_PAR vector R_PAR\n            | SUM L_PAR vector R_PAR\n    \n    condicional : IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END\n\n    cond2 : np_GOTO_ELSE ELSE block \n          | empty \n    \n    read : READ L_PAR read2 R_PAR SEMICOLON\n\n    read2 : var np_read\n          | var np_read COMMA read2\n    \n    write : WRITE L_PAR writeB R_PAR SEMICOLON\n    \n    writeB : expression np_end np_write writeC\n           | CTE_STRING np_push_cte_str np_write writeC\n    \n    writeC : COMMA writeB\n           | empty\n    \n    loop_cond : WHILE L_PAR np_CHECKPOINT expression R_PAR  np_end np_GOTOF block np_GOTO_WHILE\n    \n    loop_range : FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR\n    \n    return : RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON\n    \n    func_call : ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB\n    \n    func_call_arguments : np_stop exp np_end np_param\n                        | np_stop exp np_end np_param COMMA func_call_arguments\n                        | empty\n    \n    expression : logic expressionB \n        \n    expressionB : OR np_push_operator expression \n          | AND np_push_operator expression\n          | empty\n    \n    oper_assign : EQUAL \n        | MULT_EQ \n        | DIV_EQ \n        | PLUS_EQ \n        | MINUS_EQ \n    \n    logic : exp logic2 \n\n    logic2 : LESS np_push_operator exp\n         | GREATER np_push_operator exp\n         | LESS_EQ np_push_operator exp\n         | GREATER_EQ np_push_operator exp\n         | EQUIVALENT np_push_operator exp\n         | DIFFERENT np_push_operator exp\n         | empty\n    \n    exp : term exp2 \n\n    exp2 : PLUS np_push_operator exp \n         | MINUS np_push_operator exp\n         | empty\n    \n    term : factor term2\n\n    term2 : MULT np_push_operator term \n          | DIV np_push_operator term\n          | REMAINDER np_push_operator term \n          | empty\n    \n    factor : exponent factorB \n    \n    factorB : EXP factor\n            | empty\n    \n    exponent : L_PAR np_push_operator expression R_PAR np_rpar\n        | exponentB \n     \n    exponentB : MINUS var_cte \n        | var_cte \n    \n    var_cte : var \n         | predef_func\n         | func_call\n         | CTE_INT np_push_cte_int\n         | CTE_FLOAT np_push_cte_float\n         | CTE_CHAR np_push_cte_char\n         | CTE_STRING np_push_cte_str\n         | CTE_BOOL np_push_cte_bool\n    \n    empty :\n    np_set_curr_proc : np_push_operator : np_push_operand : np_push_cte_int : np_push_cte_float : np_push_cte_char : np_push_cte_str : np_push_cte_bool : np_set_curr_datatype : np_add_datatype : np_add_var : np_add_arr : np_rpar : np_set_return : np_end : np_read : np_write : np_set_VC : np_comp_VC_VF : np_GOTO : np_GOTOF : np_GOTO_ELSE : np_GOTO_END : np_GOTO_WHILE : np_GOTO_FOR : np_CHECKPOINT : np_add_param : np_set_quad_start : np_GOSUB : np_ERA : np_param : np_ENDFunc : np_arr_start : np_arr_end : np_stop : np_prog_end : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,9,12,15,16,18,51,53,89,111,],[0,-149,-3,-5,-1,-2,-4,-14,-29,-25,-28,]),'ID':([2,3,19,20,21,22,23,24,25,26,31,32,33,34,35,36,38,42,52,55,59,60,62,64,65,66,67,68,69,70,71,77,87,89,91,92,93,94,95,96,97,98,99,100,103,104,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,187,188,189,190,191,192,193,194,195,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,236,237,238,247,269,270,275,285,286,292,296,298,301,303,304,305,307,310,312,313,],[-114,4,30,-123,-24,-123,-123,-123,-123,-123,-23,-15,-16,-17,-18,-19,-6,47,80,47,85,80,80,-35,-36,-37,-38,-39,-40,-41,-42,102,80,-25,-115,-76,-77,-78,-79,-80,80,102,80,-139,-148,-43,-146,80,-115,80,80,-115,80,80,-148,80,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,80,227,227,227,227,227,227,227,227,227,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-57,102,-60,-44,227,227,80,-113,80,80,-136,-56,-137,-67,-148,-54,-65,-55,-138,-66,]),'SEMICOLON':([4,5,45,46,47,56,79,80,82,106,108,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,151,154,157,160,161,168,169,172,173,177,178,180,181,182,183,184,185,186,196,198,209,225,245,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,271,272,282,284,293,294,299,300,],[-133,6,54,-9,-124,-11,104,-116,-10,-21,-125,-113,-113,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-12,-128,-72,-75,-81,-88,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,236,238,247,-99,-142,-126,-73,-74,-82,-83,-84,-85,-86,-87,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,303,-20,-50,-51,]),'VARS':([6,52,],[10,10,]),'FUNCTION':([6,8,11,38,53,89,109,111,152,],[13,13,13,-6,-29,-25,-145,-28,-13,]),'MAIN':([6,8,11,38,53,89,109,111,152,],[14,14,14,-6,-29,-25,-145,-28,-13,]),'L_BRACE':([10,44,58,80,84,106,118,119,120,121,123,124,125,126,127,128,129,130,131,169,172,173,177,178,180,181,182,183,184,185,186,225,241,245,248,249,258,259,260,261,262,263,265,266,267,268,271,272,278,282,284,291,294,299,300,302,306,308,311,],[17,52,-141,-116,52,-21,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-99,-128,-142,-126,286,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-134,-68,-101,286,-20,-50,-51,-128,286,-132,286,]),'VOID':([13,],[20,]),'INT':([13,17,43,54,153,],[22,22,22,22,22,]),'FLOAT':([13,17,43,54,153,],[23,23,23,23,23,]),'BOOL':([13,17,43,54,153,],[24,24,24,24,24,]),'CHAR':([13,17,43,54,153,],[25,25,25,25,25,]),'STRING':([13,17,43,54,153,],[26,26,26,26,26,]),'L_PAR':([14,27,30,37,40,73,74,75,76,78,80,91,92,93,94,95,96,97,99,100,103,105,107,113,114,132,133,134,135,136,137,138,139,140,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-114,-136,-114,41,43,97,98,99,100,103,-143,-115,-76,-77,-78,-79,-80,114,114,-139,-148,-146,150,114,-115,187,188,189,190,191,192,193,194,195,114,-115,114,114,-148,114,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-148,]),'COLON':([22,23,24,25,26,29,32,33,34,35,36,39,49,],[-123,-123,-123,-123,-123,-122,-15,-16,-17,-18,-19,42,59,]),'R_BRACE':([28,38,52,54,60,61,62,63,64,65,66,67,68,69,70,71,81,86,87,88,89,90,104,112,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[38,-6,-113,-7,-113,89,-113,-27,-35,-36,-37,-38,-39,-40,-41,-42,-8,111,-113,-31,-25,-26,-43,-30,-57,-60,-44,-113,-113,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'IF':([38,52,60,62,64,65,66,67,68,69,70,71,87,89,104,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[-6,73,73,73,-35,-36,-37,-38,-39,-40,-41,-42,73,-25,-43,-57,-60,-44,-113,73,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'READ':([38,52,60,62,64,65,66,67,68,69,70,71,87,89,104,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[-6,74,74,74,-35,-36,-37,-38,-39,-40,-41,-42,74,-25,-43,-57,-60,-44,-113,74,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'WRITE':([38,52,60,62,64,65,66,67,68,69,70,71,87,89,104,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[-6,75,75,75,-35,-36,-37,-38,-39,-40,-41,-42,75,-25,-43,-57,-60,-44,-113,75,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'WHILE':([38,52,60,62,64,65,66,67,68,69,70,71,87,89,104,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[-6,76,76,76,-35,-36,-37,-38,-39,-40,-41,-42,76,-25,-43,-57,-60,-44,-113,76,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'FOR':([38,52,60,62,64,65,66,67,68,69,70,71,87,89,104,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[-6,77,77,77,-35,-36,-37,-38,-39,-40,-41,-42,77,-25,-43,-57,-60,-44,-113,77,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'RETURN':([38,52,60,62,64,65,66,67,68,69,70,71,87,89,104,236,238,247,285,286,296,298,301,303,305,307,310,312,313,],[-6,78,78,78,-35,-36,-37,-38,-39,-40,-41,-42,78,-25,-43,-57,-60,-44,-113,78,-136,-56,-137,-67,-54,-65,-55,-138,-66,]),'R_PAR':([41,43,48,50,80,85,102,106,110,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,141,142,143,144,145,150,153,156,157,160,161,168,169,172,173,177,178,180,181,182,183,184,185,186,197,199,200,201,203,205,207,208,210,211,225,226,228,229,230,231,234,235,239,240,243,245,246,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,271,272,273,274,276,277,280,282,283,284,287,288,289,290,294,295,299,300,304,309,],[44,-113,58,-34,-116,-140,-116,-21,-32,-128,-113,-113,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,196,-129,198,-128,-120,-113,-113,-134,-72,-75,-81,-88,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-58,-130,-111,241,-128,245,-71,-33,248,249,-99,263,265,266,267,268,271,272,-113,-113,-127,-142,-128,-126,-73,-74,-82,-83,-84,-85,-86,-87,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-59,-61,-64,-62,293,-68,-144,-101,-22,299,300,-63,-20,-69,-50,-51,-113,-70,]),'COMMA':([46,47,56,80,85,102,106,108,110,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,142,144,145,151,157,160,161,168,169,172,173,177,178,180,181,182,183,184,185,186,197,199,200,225,232,233,239,240,245,246,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,271,272,282,283,284,287,294,295,299,300,],[55,-124,-11,-116,-140,-116,-21,-125,153,-113,-113,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-129,-128,-120,-12,-72,-75,-81,-88,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,237,-130,-111,-99,269,270,275,275,-142,-128,-126,-73,-74,-82,-83,-84,-85,-86,-87,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-144,-101,-22,-20,304,-50,-51,]),'L_BRACKET':([47,80,102,227,],[57,105,105,264,]),'CTE_INT':([57,91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[83,-115,-76,-77,-78,-79,-80,127,127,-139,-148,-146,127,-115,127,127,-115,127,127,-148,127,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-148,]),'EQUAL':([72,80,101,102,106,294,],[92,-116,147,-116,-21,-20,]),'MULT_EQ':([72,80,106,294,],[93,-116,-21,-20,]),'DIV_EQ':([72,80,106,294,],[94,-116,-21,-20,]),'PLUS_EQ':([72,80,106,294,],[95,-116,-21,-20,]),'MINUS_EQ':([72,80,106,294,],[96,-116,-21,-20,]),'EXP':([80,106,120,121,123,124,125,126,127,128,129,130,131,145,181,182,183,184,185,186,200,245,248,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,179,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-103,-108,-109,-110,-111,-112,-111,-142,-126,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'MULT':([80,106,119,120,121,123,124,125,126,127,128,129,130,131,145,178,180,181,182,183,184,185,186,200,225,245,248,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,174,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'DIV':([80,106,119,120,121,123,124,125,126,127,128,129,130,131,145,178,180,181,182,183,184,185,186,200,225,245,248,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,175,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'REMAINDER':([80,106,119,120,121,123,124,125,126,127,128,129,130,131,145,178,180,181,182,183,184,185,186,200,225,245,248,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,176,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'PLUS':([80,106,118,119,120,121,123,124,125,126,127,128,129,130,131,145,173,177,178,180,181,182,183,184,185,186,200,225,245,248,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,170,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'MINUS':([80,91,92,93,94,95,96,97,99,100,103,105,106,113,114,118,119,120,121,123,124,125,126,127,128,129,130,131,145,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,173,174,175,176,177,178,179,180,181,182,183,184,185,186,200,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,225,245,248,260,261,262,263,265,266,267,268,271,272,275,282,284,292,294,299,300,304,],[-116,-115,-76,-77,-78,-79,-80,122,122,-139,-148,-146,-21,122,-115,171,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,122,-115,122,122,-148,122,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-93,-115,-115,-115,-97,-98,122,-100,-103,-108,-109,-110,-111,-112,-111,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-99,-142,-126,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,122,-68,-101,122,-20,-50,-51,-148,]),'LESS':([80,106,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,162,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'GREATER':([80,106,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,163,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'LESS_EQ':([80,106,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,164,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'GREATER_EQ':([80,106,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,165,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'EQUIVALENT':([80,106,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,166,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'DIFFERENT':([80,106,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,167,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'OR':([80,106,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,161,168,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,158,-113,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-81,-88,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-82,-83,-84,-85,-86,-87,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'AND':([80,106,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,145,161,168,169,172,173,177,178,180,181,182,183,184,185,186,200,225,245,248,252,253,254,255,256,257,258,259,260,261,262,263,265,266,267,268,271,272,282,284,294,299,300,],[-116,-21,159,-113,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-120,-81,-88,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-111,-99,-142,-126,-82,-83,-84,-85,-86,-87,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,-68,-101,-20,-50,-51,]),'R_BRACKET':([80,83,106,118,119,120,121,123,124,125,126,127,128,129,130,131,169,172,173,177,178,180,181,182,183,184,185,186,204,225,244,245,248,258,259,260,261,262,263,264,265,266,267,268,271,272,281,282,284,294,299,300,],[-116,108,-21,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-128,-99,-147,-142,-126,-90,-91,-94,-95,-96,-45,287,-46,-47,-48,-49,-52,-53,294,-68,-101,-20,-50,-51,]),'TO':([80,106,118,119,120,121,123,124,125,126,127,128,129,130,131,169,172,173,177,178,180,181,182,183,184,185,186,225,242,245,248,258,259,260,261,262,263,265,266,267,268,271,272,279,282,284,294,299,300,],[-116,-21,-113,-113,-113,-102,-104,-105,-106,-107,-117,-118,-119,-120,-121,-89,-92,-93,-97,-98,-100,-103,-108,-109,-110,-111,-112,-99,-131,-142,-126,-90,-91,-94,-95,-96,-45,-46,-47,-48,-49,-52,-53,292,-68,-101,-20,-50,-51,]),'ELSE':([89,285,297,],[-25,-135,306,]),'CTE_FLOAT':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,128,128,-139,-148,-146,128,-115,128,128,-115,128,128,-148,128,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,-148,]),'CTE_CHAR':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,129,129,-139,-148,-146,129,-115,129,129,-115,129,129,-148,129,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,-148,]),'CTE_STRING':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,130,145,-139,-148,-146,130,-115,130,130,-115,130,130,-148,130,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,145,130,-148,]),'CTE_BOOL':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,131,131,-139,-148,-146,131,-115,131,131,-115,131,131,-148,131,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,-148,]),'MIN':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,132,132,-139,-148,-146,132,-115,132,132,-115,132,132,-148,132,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,-148,]),'MAX':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,133,133,-139,-148,-146,133,-115,133,133,-115,133,133,-148,133,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,-148,]),'MEAN':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,134,134,-139,-148,-146,134,-115,134,134,-115,134,134,-148,134,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-148,]),'MEDIAN':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,135,135,-139,-148,-146,135,-115,135,135,-115,135,135,-148,135,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,-148,]),'MODE':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,136,136,-139,-148,-146,136,-115,136,136,-115,136,136,-148,136,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,-148,]),'PLOT_XY':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,137,137,-139,-148,-146,137,-115,137,137,-115,137,137,-148,137,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-148,]),'REGRESSION':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,138,138,-139,-148,-146,138,-115,138,138,-115,138,138,-148,138,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-148,]),'VARIANCE':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,139,139,-139,-148,-146,139,-115,139,139,-115,139,139,-148,139,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-148,]),'SUM':([91,92,93,94,95,96,97,99,100,103,105,113,114,122,146,147,148,149,150,155,158,159,162,163,164,165,166,167,170,171,174,175,176,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,304,],[-115,-76,-77,-78,-79,-80,140,140,-139,-148,-146,140,-115,140,140,-115,140,140,-148,140,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,-148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'np_set_curr_proc':([2,14,30,],[3,27,40,]),'np_GOTO':([4,],[5,]),'programB':([6,],[7,]),'vars':([6,52,],[8,60,]),'programC':([6,8,11,],[9,16,18,]),'function':([6,8,11,],[11,11,11,]),'main':([6,8,11,],[12,12,12,]),'np_prog_end':([7,],[15,]),'func_type':([13,],[19,]),'type':([13,17,43,54,153,],[21,29,49,29,49,]),'varsB':([17,54,],[28,81,]),'np_add_datatype':([20,22,23,24,25,26,],[31,32,33,34,35,36,]),'np_GOTO_END':([27,296,],[37,305,]),'np_set_curr_datatype':([29,],[39,]),'varsC':([42,55,],[45,82,]),'varsD':([42,55,],[46,46,]),'params':([43,153,],[48,208,]),'empty':([43,52,60,62,87,116,117,118,119,120,150,153,239,240,285,286,304,],[50,63,88,63,88,160,168,172,177,180,207,50,276,276,298,63,207,]),'vblock':([44,84,],[51,109,]),'block':([44,84,249,291,306,311,],[53,53,285,301,310,312,]),'np_add_var':([47,],[56,]),'blockB':([52,62,286,],[61,90,61,]),'statement':([52,60,62,87,286,],[62,87,62,87,62,]),'assign':([52,60,62,87,286,],[64,64,64,64,64,]),'condicional':([52,60,62,87,286,],[65,65,65,65,65,]),'read':([52,60,62,87,286,],[66,66,66,66,66,]),'write':([52,60,62,87,286,],[67,67,67,67,67,]),'loop_cond':([52,60,62,87,286,],[68,68,68,68,68,]),'loop_range':([52,60,62,87,286,],[69,69,69,69,69,]),'return':([52,60,62,87,286,],[70,70,70,70,70,]),'void_func':([52,60,62,87,286,],[71,71,71,71,71,]),'var':([52,60,62,77,87,97,98,99,113,122,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,237,275,286,292,],[72,72,72,101,72,124,142,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,142,124,72,124,]),'func_call':([52,60,62,87,97,99,113,122,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,286,292,],[79,79,79,79,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,79,126,]),'np_set_quad_start':([58,],[84,]),'vblockB':([60,87,],[86,112,]),'oper_assign':([72,],[91,]),'np_push_operand':([80,102,],[106,106,]),'np_ERA':([80,],[107,]),'np_add_param':([85,],[110,]),'np_push_operator':([91,114,147,158,159,162,163,164,165,166,167,170,171,174,175,176,],[113,155,202,212,213,214,215,216,217,218,219,220,221,222,223,224,]),'expression':([97,99,113,146,155,212,213,275,],[115,144,154,201,210,250,251,144,]),'logic':([97,99,113,146,155,212,213,275,],[116,116,116,116,116,116,116,116,]),'exp':([97,99,113,146,148,149,155,202,206,212,213,214,215,216,217,218,219,220,221,275,292,],[117,117,117,117,203,204,117,242,246,117,117,252,253,254,255,256,257,258,259,117,302,]),'term':([97,99,113,146,148,149,155,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,260,261,262,118,118,]),'factor':([97,99,113,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,],[119,119,119,119,119,119,119,225,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'exponent':([97,99,113,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'exponentB':([97,99,113,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'var_cte':([97,99,113,122,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,],[123,123,123,181,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'predef_func':([97,99,113,122,146,148,149,155,179,202,206,212,213,214,215,216,217,218,219,220,221,222,223,224,275,292,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'read2':([98,237,],[141,273,]),'writeB':([99,275,],[143,290,]),'np_CHECKPOINT':([100,],[146,]),'np_stop':([103,150,304,],[148,206,206,]),'np_arr_start':([105,],[149,]),'np_add_arr':([108,],[151,]),'np_ENDFunc':([109,],[152,]),'np_end':([115,144,154,203,204,241,246,302,],[156,199,209,243,244,278,283,308,]),'expressionB':([116,],[157,]),'logic2':([117,],[161,]),'exp2':([118,],[169,]),'term2':([119,],[173,]),'factorB':([120,],[178,]),'np_push_cte_int':([127,],[182,]),'np_push_cte_float':([128,],[183,]),'np_push_cte_char':([129,],[184,]),'np_push_cte_str':([130,145,],[185,200,]),'np_push_cte_bool':([131,],[186,]),'np_read':([142,],[197,]),'func_call_arguments':([150,304,],[205,309,]),'np_GOTOF':([156,278,],[211,291,]),'vector':([187,188,189,190,191,192,193,194,195,269,270,],[226,228,229,230,231,232,233,234,235,288,289,]),'np_write':([199,200,],[239,240,]),'writeC':([239,240,],[274,277,]),'np_set_VC':([242,],[279,]),'np_set_return':([243,],[280,]),'np_arr_end':([244,],[281,]),'np_GOSUB':([245,],[282,]),'np_rpar':([248,],[284,]),'np_param':([283,],[295,]),'cond2':([285,],[296,]),'np_GOTO_ELSE':([285,],[297,]),'np_GOTO_WHILE':([301,],[307,]),'np_comp_VC_VF':([308,],[311,]),'np_GOTO_FOR':([312,],[313,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end','program',7,'p_program','parser.py',24),
  ('programB -> vars programC','programB',2,'p_programB','parser.py',29),
  ('programB -> programC','programB',1,'p_programB','parser.py',30),
  ('programC -> function programC','programC',2,'p_programC','parser.py',35),
  ('programC -> main','programC',1,'p_programC','parser.py',36),
  ('vars -> VARS L_BRACE varsB R_BRACE','vars',4,'p_vars','parser.py',41),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON','varsB',5,'p_varsB','parser.py',46),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB','varsB',6,'p_varsB','parser.py',47),
  ('varsC -> varsD','varsC',1,'p_varsC','parser.py',52),
  ('varsC -> varsD COMMA varsC','varsC',3,'p_varsC','parser.py',53),
  ('varsD -> ID np_add_var','varsD',2,'p_varsD','parser.py',58),
  ('varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr','varsD',5,'p_varsD','parser.py',59),
  ('function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc','function',10,'p_function','parser.py',64),
  ('main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock','main',6,'p_main','parser.py',69),
  ('type -> INT np_add_datatype','type',2,'p_type','parser.py',74),
  ('type -> FLOAT np_add_datatype','type',2,'p_type','parser.py',75),
  ('type -> BOOL np_add_datatype','type',2,'p_type','parser.py',76),
  ('type -> CHAR np_add_datatype','type',2,'p_type','parser.py',77),
  ('type -> STRING np_add_datatype','type',2,'p_type','parser.py',78),
  ('var -> ID L_BRACKET np_arr_start exp np_end np_arr_end R_BRACKET','var',7,'p_var','parser.py',84),
  ('var -> ID np_push_operand','var',2,'p_var','parser.py',85),
  ('vector -> ID L_BRACKET R_BRACKET','vector',3,'p_vector','parser.py',91),
  ('func_type -> VOID np_add_datatype','func_type',2,'p_func_type','parser.py',96),
  ('func_type -> type','func_type',1,'p_func_type','parser.py',97),
  ('block -> L_BRACE blockB R_BRACE','block',3,'p_block','parser.py',103),
  ('blockB -> statement blockB','blockB',2,'p_block','parser.py',105),
  ('blockB -> empty','blockB',1,'p_block','parser.py',106),
  ('vblock -> L_BRACE vars vblockB R_BRACE','vblock',4,'p_vblock','parser.py',111),
  ('vblock -> block','vblock',1,'p_vblock','parser.py',112),
  ('vblockB -> statement vblockB','vblockB',2,'p_vblock','parser.py',114),
  ('vblockB -> empty','vblockB',1,'p_vblock','parser.py',115),
  ('params -> type COLON ID np_add_param','params',4,'p_params','parser.py',120),
  ('params -> type COLON ID np_add_param COMMA params','params',6,'p_params','parser.py',121),
  ('params -> empty','params',1,'p_params','parser.py',122),
  ('statement -> assign','statement',1,'p_statement','parser.py',127),
  ('statement -> condicional','statement',1,'p_statement','parser.py',128),
  ('statement -> read','statement',1,'p_statement','parser.py',129),
  ('statement -> write','statement',1,'p_statement','parser.py',130),
  ('statement -> loop_cond','statement',1,'p_statement','parser.py',131),
  ('statement -> loop_range','statement',1,'p_statement','parser.py',132),
  ('statement -> return','statement',1,'p_statement','parser.py',133),
  ('statement -> void_func','statement',1,'p_statement','parser.py',134),
  ('void_func -> func_call SEMICOLON','void_func',2,'p_void_func','parser.py',139),
  ('assign -> var oper_assign np_push_operator expression np_end SEMICOLON','assign',6,'p_assign','parser.py',144),
  ('predef_func -> MIN L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',149),
  ('predef_func -> MAX L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',150),
  ('predef_func -> MEAN L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',151),
  ('predef_func -> MEDIAN L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',152),
  ('predef_func -> MODE L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',153),
  ('predef_func -> PLOT_XY L_PAR vector COMMA vector R_PAR','predef_func',6,'p_predef_func','parser.py',154),
  ('predef_func -> REGRESSION L_PAR vector COMMA vector R_PAR','predef_func',6,'p_predef_func','parser.py',155),
  ('predef_func -> VARIANCE L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',156),
  ('predef_func -> SUM L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',157),
  ('condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END','condicional',9,'p_condicional','parser.py',162),
  ('cond2 -> np_GOTO_ELSE ELSE block','cond2',3,'p_condicional','parser.py',164),
  ('cond2 -> empty','cond2',1,'p_condicional','parser.py',165),
  ('read -> READ L_PAR read2 R_PAR SEMICOLON','read',5,'p_read','parser.py',170),
  ('read2 -> var np_read','read2',2,'p_read','parser.py',172),
  ('read2 -> var np_read COMMA read2','read2',4,'p_read','parser.py',173),
  ('write -> WRITE L_PAR writeB R_PAR SEMICOLON','write',5,'p_write','parser.py',178),
  ('writeB -> expression np_end np_write writeC','writeB',4,'p_writeB','parser.py',183),
  ('writeB -> CTE_STRING np_push_cte_str np_write writeC','writeB',4,'p_writeB','parser.py',184),
  ('writeC -> COMMA writeB','writeC',2,'p_writeC','parser.py',189),
  ('writeC -> empty','writeC',1,'p_writeC','parser.py',190),
  ('loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE','loop_cond',9,'p_loop_cond','parser.py',195),
  ('loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR','loop_range',12,'p_loop_range','parser.py',200),
  ('return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON','return',8,'p_return','parser.py',205),
  ('func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB','func_call',6,'p_func_call','parser.py',210),
  ('func_call_arguments -> np_stop exp np_end np_param','func_call_arguments',4,'p_func_call_arguments','parser.py',215),
  ('func_call_arguments -> np_stop exp np_end np_param COMMA func_call_arguments','func_call_arguments',6,'p_func_call_arguments','parser.py',216),
  ('func_call_arguments -> empty','func_call_arguments',1,'p_func_call_arguments','parser.py',217),
  ('expression -> logic expressionB','expression',2,'p_expression','parser.py',222),
  ('expressionB -> OR np_push_operator expression','expressionB',3,'p_expressionB','parser.py',227),
  ('expressionB -> AND np_push_operator expression','expressionB',3,'p_expressionB','parser.py',228),
  ('expressionB -> empty','expressionB',1,'p_expressionB','parser.py',229),
  ('oper_assign -> EQUAL','oper_assign',1,'p_oper_assign','parser.py',234),
  ('oper_assign -> MULT_EQ','oper_assign',1,'p_oper_assign','parser.py',235),
  ('oper_assign -> DIV_EQ','oper_assign',1,'p_oper_assign','parser.py',236),
  ('oper_assign -> PLUS_EQ','oper_assign',1,'p_oper_assign','parser.py',237),
  ('oper_assign -> MINUS_EQ','oper_assign',1,'p_oper_assign','parser.py',238),
  ('logic -> exp logic2','logic',2,'p_logic','parser.py',244),
  ('logic2 -> LESS np_push_operator exp','logic2',3,'p_logic','parser.py',246),
  ('logic2 -> GREATER np_push_operator exp','logic2',3,'p_logic','parser.py',247),
  ('logic2 -> LESS_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',248),
  ('logic2 -> GREATER_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',249),
  ('logic2 -> EQUIVALENT np_push_operator exp','logic2',3,'p_logic','parser.py',250),
  ('logic2 -> DIFFERENT np_push_operator exp','logic2',3,'p_logic','parser.py',251),
  ('logic2 -> empty','logic2',1,'p_logic','parser.py',252),
  ('exp -> term exp2','exp',2,'p_exp','parser.py',257),
  ('exp2 -> PLUS np_push_operator exp','exp2',3,'p_exp','parser.py',259),
  ('exp2 -> MINUS np_push_operator exp','exp2',3,'p_exp','parser.py',260),
  ('exp2 -> empty','exp2',1,'p_exp','parser.py',261),
  ('term -> factor term2','term',2,'p_term','parser.py',266),
  ('term2 -> MULT np_push_operator term','term2',3,'p_term','parser.py',268),
  ('term2 -> DIV np_push_operator term','term2',3,'p_term','parser.py',269),
  ('term2 -> REMAINDER np_push_operator term','term2',3,'p_term','parser.py',270),
  ('term2 -> empty','term2',1,'p_term','parser.py',271),
  ('factor -> exponent factorB','factor',2,'p_factor','parser.py',276),
  ('factorB -> EXP factor','factorB',2,'p_factorB','parser.py',281),
  ('factorB -> empty','factorB',1,'p_factorB','parser.py',282),
  ('exponent -> L_PAR np_push_operator expression R_PAR np_rpar','exponent',5,'p_exponent','parser.py',287),
  ('exponent -> exponentB','exponent',1,'p_exponent','parser.py',288),
  ('exponentB -> MINUS var_cte','exponentB',2,'p_exponentB','parser.py',293),
  ('exponentB -> var_cte','exponentB',1,'p_exponentB','parser.py',294),
  ('var_cte -> var','var_cte',1,'p_var_cte','parser.py',300),
  ('var_cte -> predef_func','var_cte',1,'p_var_cte','parser.py',301),
  ('var_cte -> func_call','var_cte',1,'p_var_cte','parser.py',302),
  ('var_cte -> CTE_INT np_push_cte_int','var_cte',2,'p_var_cte','parser.py',303),
  ('var_cte -> CTE_FLOAT np_push_cte_float','var_cte',2,'p_var_cte','parser.py',304),
  ('var_cte -> CTE_CHAR np_push_cte_char','var_cte',2,'p_var_cte','parser.py',305),
  ('var_cte -> CTE_STRING np_push_cte_str','var_cte',2,'p_var_cte','parser.py',306),
  ('var_cte -> CTE_BOOL np_push_cte_bool','var_cte',2,'p_var_cte','parser.py',307),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',325),
  ('np_set_curr_proc -> <empty>','np_set_curr_proc',0,'p_np_set_curr_proc','parser.py',353),
  ('np_push_operator -> <empty>','np_push_operator',0,'p_np_push_operator','parser.py',368),
  ('np_push_operand -> <empty>','np_push_operand',0,'p_np_push_operand','parser.py',381),
  ('np_push_cte_int -> <empty>','np_push_cte_int',0,'p_np_push_cte_int','parser.py',389),
  ('np_push_cte_float -> <empty>','np_push_cte_float',0,'p_np_push_cte_float','parser.py',397),
  ('np_push_cte_char -> <empty>','np_push_cte_char',0,'p_np_push_cte_char','parser.py',405),
  ('np_push_cte_str -> <empty>','np_push_cte_str',0,'p_np_push_cte_str','parser.py',413),
  ('np_push_cte_bool -> <empty>','np_push_cte_bool',0,'p_np_push_cte_bool','parser.py',421),
  ('np_set_curr_datatype -> <empty>','np_set_curr_datatype',0,'p_np_set_curr_datatype','parser.py',431),
  ('np_add_datatype -> <empty>','np_add_datatype',0,'p_np_add_datatype','parser.py',438),
  ('np_add_var -> <empty>','np_add_var',0,'p_np_add_var','parser.py',450),
  ('np_add_arr -> <empty>','np_add_arr',0,'p_np_add_arr','parser.py',457),
  ('np_rpar -> <empty>','np_rpar',0,'p_np_rpar','parser.py',476),
  ('np_set_return -> <empty>','np_set_return',0,'p_np_set_return','parser.py',488),
  ('np_end -> <empty>','np_end',0,'p_np_end','parser.py',500),
  ('np_read -> <empty>','np_read',0,'p_np_read','parser.py',519),
  ('np_write -> <empty>','np_write',0,'p_np_write','parser.py',528),
  ('np_set_VC -> <empty>','np_set_VC',0,'p_np_set_VC','parser.py',537),
  ('np_comp_VC_VF -> <empty>','np_comp_VC_VF',0,'p_np_comp_VC_VF','parser.py',549),
  ('np_GOTO -> <empty>','np_GOTO',0,'p_np_GOTO','parser.py',564),
  ('np_GOTOF -> <empty>','np_GOTOF',0,'p_np_GOTOF','parser.py',573),
  ('np_GOTO_ELSE -> <empty>','np_GOTO_ELSE',0,'p_np_GOTO_ELSE','parser.py',583),
  ('np_GOTO_END -> <empty>','np_GOTO_END',0,'p_np_GOTO_END','parser.py',596),
  ('np_GOTO_WHILE -> <empty>','np_GOTO_WHILE',0,'p_np_GOTO_WHILE','parser.py',605),
  ('np_GOTO_FOR -> <empty>','np_GOTO_FOR',0,'p_np_GOTO_FOR','parser.py',616),
  ('np_CHECKPOINT -> <empty>','np_CHECKPOINT',0,'p_np_CHECKPOINT','parser.py',635),
  ('np_add_param -> <empty>','np_add_param',0,'p_np_add_param','parser.py',647),
  ('np_set_quad_start -> <empty>','np_set_quad_start',0,'p_np_set_quad_start','parser.py',654),
  ('np_GOSUB -> <empty>','np_GOSUB',0,'p_np_GOSUB','parser.py',660),
  ('np_ERA -> <empty>','np_ERA',0,'p_np_ERA','parser.py',685),
  ('np_param -> <empty>','np_param',0,'p_np_param','parser.py',698),
  ('np_ENDFunc -> <empty>','np_ENDFunc',0,'p_np_ENDFunc','parser.py',708),
  ('np_arr_start -> <empty>','np_arr_start',0,'p_np_arr_start','parser.py',714),
  ('np_arr_end -> <empty>','np_arr_end',0,'p_np_arr_end','parser.py',718),
  ('np_stop -> <empty>','np_stop',0,'p_np_stop','parser.py',743),
  ('np_prog_end -> <empty>','np_prog_end',0,'p_np_prog_end','parser.py',749),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR COLON COMMA CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING DIFFERENT DIV DIV_EQ ELSE EQUAL EQUIVALENT EXP FLOAT FOR FUNCTION GREATER GREATER_EQ ID IF INT LEN LESS LESS_EQ L_BRACE L_BRACKET L_PAR MAIN MAX MEAN MEDIAN MIN MINUS MINUS_EQ MODE MULT MULT_EQ OR PLOTXY PLUS PLUS_EQ PROGRAM READ REGRESSION REMAINDER RETURN R_BRACE R_BRACKET R_PAR SEMICOLON STRING TO VARIANCE VARS VOID WHILE WRITE\n    program : PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end\n\n    programB : vars  programC \n             | programC\n\n    programC : function programC\n             | main      \n    \n    vars : VARS L_BRACE varsB R_BRACE \n\n    varsB : type np_set_curr_datatype COLON varsC SEMICOLON\n          | type np_set_curr_datatype COLON varsC SEMICOLON varsB\n\n    varsC : varsD \n          | varsD COMMA varsC\n\n    varsD : ID np_add_var\n          | ID L_BRACKET  CTE_INT R_BRACKET np_add_arr \n    \n    function : FUNCTION func_type ID np_set_curr_proc L_PAR functionB R_PAR np_set_quad_start vblock np_ENDFunc \n\n    functionB : params\n              | empty\n    \n    main : MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock \n    \n    type : INT np_add_datatype\n          | FLOAT np_add_datatype\n          | BOOL np_add_datatype\n          | CHAR np_add_datatype\n          | STRING np_add_datatype\n    \n    var : ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET\n        | ID np_push_operand\n    \n    func_type : VOID np_add_datatype \n              | type\n    \n    params : type COLON ID np_add_param\n           | type COLON ID np_add_param COMMA params\n           | empty\n    \n    block : L_BRACE blockB R_BRACE \n\n    blockB : statement blockB\n           | empty\n    \n    vblock : L_BRACE vars vblockB R_BRACE \n           | block\n\n    vblockB : statement vblockB\n            | empty\n    \n    statement : assign \n           | condicional \n           | read \n           | write \n           | loop_cond \n           | loop_range \n           | return \n           | void_func\n    \n    void_func : func_call SEMICOLON           \n              | PLOTXY L_PAR ID  COMMA ID  R_PAR np_def_func_2param SEMICOLON\n              | REGRESSION L_PAR ID  COMMA ID  R_PAR np_def_func_2param SEMICOLON\n    \n    assign : var oper_assign np_push_operator expression np_end SEMICOLON\n    \n    condicional : IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END\n\n    cond2 : np_GOTO_ELSE ELSE block \n          | empty \n    \n    read : READ L_PAR read2 R_PAR SEMICOLON\n\n    read2 : var np_read\n          | var np_read COMMA read2\n    \n    write : WRITE L_PAR writeB R_PAR SEMICOLON\n\n    writeB : expression np_end np_write writeC\n           | CTE_STRING np_push_cte_str np_write writeC\n\n    writeC : COMMA writeB\n           | empty      \n    \n    loop_cond : WHILE L_PAR np_CHECKPOINT expression R_PAR  np_end np_GOTOF block np_GOTO_WHILE\n    \n    loop_range : FOR var EQUAL np_push_operator exp np_set_CV TO exp np_end np_comp_CV_FV block np_GOTO_FOR\n    \n    return : RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON\n    \n    func_call : ID np_ERA L_PAR func_callB R_PAR np_GOSUB\n\n    func_callB : func_call_arguments\n                | empty\n    \n    func_call_arguments : np_stop exp np_end np_param func_call_argumentsB\n\n    func_call_argumentsB : COMMA func_call_arguments\n                         | empty\n    \n    def_func : def_funcB L_PAR ID  R_PAR np_def_func_1param\n    \n    def_funcB : MIN\n              | MAX\n              | MEAN\n              | MEDIAN\n              | MODE\n              | VARIANCE\n              | LEN\n    \n    oper_assign : EQUAL \n        | MULT_EQ \n        | DIV_EQ \n        | PLUS_EQ \n        | MINUS_EQ \n    \n    expression : logic expressionB \n\n    expressionB : OR np_push_operator expression \n          | AND np_push_operator expression\n          | empty\n    \n    logic : exp logic2 \n\n    logic2 : LESS np_push_operator exp\n         | GREATER np_push_operator exp\n         | LESS_EQ np_push_operator exp\n         | GREATER_EQ np_push_operator exp\n         | EQUIVALENT np_push_operator exp\n         | DIFFERENT np_push_operator exp\n         | empty\n    \n    exp : term exp2 \n\n    exp2 : PLUS np_push_operator exp \n         | MINUS np_push_operator exp\n         | empty\n    \n    term : exponent term2\n\n    term2 : MULT np_push_operator term \n          | DIV np_push_operator term\n          | REMAINDER np_push_operator term \n          | empty\n    \n    exponent : factor exponentB \n\n    exponentB : EXP np_push_operator exponent\n              | empty   \n    \n    factor : L_PAR np_push_operator expression R_PAR np_rpar\n        | var_cte\n        \n    \n    var_cte : var \n         | func_call\n         | def_func\n         | CTE_INT np_push_cte_int\n         | CTE_FLOAT np_push_cte_float\n         | CTE_CHAR np_push_cte_char\n         | CTE_STRING np_push_cte_str\n         | CTE_BOOL np_push_cte_bool\n    \n    empty :\n    np_set_curr_proc : np_push_operator : np_push_operand : np_push_cte_int : np_push_cte_float : np_push_cte_char : np_push_cte_str : np_push_cte_bool : np_set_curr_datatype : np_add_datatype : np_add_var : np_add_arr : np_rpar : np_set_return : np_end : np_read : np_write : np_set_CV : np_comp_CV_FV : np_GOTO : np_GOTOF : np_GOTO_ELSE : np_GOTO_END : np_GOTO_WHILE : np_GOTO_FOR : np_CHECKPOINT : np_add_param : np_set_quad_start : np_GOSUB : np_ERA : np_param : np_ENDFunc : np_arr_end : np_stop : np_prog_end : np_def_func_1param : np_def_func_2param : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,9,12,15,16,18,52,54,92,116,],[0,-150,-3,-5,-1,-2,-4,-16,-33,-29,-32,]),'ID':([2,3,19,20,21,22,23,24,25,26,31,32,33,34,35,36,38,42,53,56,60,61,63,65,66,67,68,69,70,71,72,78,90,92,94,95,96,97,98,99,100,101,102,103,106,107,108,109,112,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,190,197,199,204,205,211,212,213,214,215,216,217,218,219,220,221,222,223,224,226,227,228,239,259,271,272,276,282,284,285,287,288,290,292,293,295,298,300,301,],[-116,4,30,-125,-25,-125,-125,-125,-125,-125,-24,-17,-18,-19,-20,-21,-6,47,82,47,88,82,82,-36,-37,-38,-39,-40,-41,-42,-43,105,82,-29,-117,-76,-77,-78,-79,-80,82,105,82,-141,-149,-44,151,-149,154,82,-117,82,-117,82,82,-149,82,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,225,82,234,82,238,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-51,105,-54,-47,82,-115,82,82,-138,-50,-139,-61,-45,-149,-46,-48,-59,-49,-140,-60,]),'SEMICOLON':([4,5,45,46,47,57,80,82,85,110,113,121,122,123,124,125,126,127,128,129,130,131,132,133,134,155,158,161,164,165,172,173,176,177,181,182,184,185,186,187,188,189,191,193,208,236,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,265,267,269,270,273,277,278,279,281,],[-135,6,55,-9,-126,-11,107,-118,-10,-23,-127,-115,-115,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-12,-130,-81,-84,-85,-92,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,226,228,239,-144,-128,-82,-83,-86,-87,-88,-89,-90,-91,-94,-95,-98,-99,-100,-103,-151,-152,-62,-152,-105,-68,287,288,-22,292,]),'VARS':([6,53,],[10,10,]),'FUNCTION':([6,8,11,38,54,92,114,116,156,],[13,13,13,-6,-33,-29,-147,-32,-13,]),'MAIN':([6,8,11,38,54,92,114,116,156,],[14,14,14,-6,-33,-29,-147,-32,-13,]),'L_BRACE':([10,44,59,82,87,110,123,124,125,126,127,128,129,130,131,132,133,134,173,176,177,181,182,184,185,186,187,188,189,231,236,240,241,250,251,252,253,254,255,256,262,267,270,273,275,279,286,294,296,299,],[17,53,-143,-118,53,-23,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-130,-144,-128,272,-94,-95,-98,-99,-100,-103,-151,-136,-62,-105,-68,272,-22,-130,272,-134,272,]),'VOID':([13,],[20,]),'INT':([13,17,43,55,157,],[22,22,22,22,22,]),'FLOAT':([13,17,43,55,157,],[23,23,23,23,23,]),'BOOL':([13,17,43,55,157,],[24,24,24,24,24,]),'CHAR':([13,17,43,55,157,],[25,25,25,25,25,]),'STRING':([13,17,43,55,157,],[26,26,26,26,26,]),'L_PAR':([14,27,30,37,40,74,75,76,77,79,81,82,83,94,95,96,97,98,99,100,102,103,106,109,111,118,119,135,136,137,138,139,140,141,142,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-116,-138,-116,41,43,100,101,102,103,106,108,-145,112,-117,-76,-77,-78,-79,-80,119,119,-141,-149,-149,153,119,-117,190,-69,-70,-71,-72,-73,-74,-75,119,-117,119,119,-149,119,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-149,]),'COLON':([22,23,24,25,26,29,32,33,34,35,36,39,51,],[-125,-125,-125,-125,-125,-124,-17,-18,-19,-20,-21,42,60,]),'R_BRACE':([28,38,53,55,61,62,63,64,65,66,67,68,69,70,71,72,84,89,90,91,92,93,107,117,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[38,-6,-115,-7,-115,92,-115,-31,-36,-37,-38,-39,-40,-41,-42,-43,-8,116,-115,-35,-29,-30,-44,-34,-51,-54,-47,-115,-115,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'IF':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,74,74,74,-36,-37,-38,-39,-40,-41,-42,-43,74,-29,-44,-51,-54,-47,-115,74,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'READ':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,75,75,75,-36,-37,-38,-39,-40,-41,-42,-43,75,-29,-44,-51,-54,-47,-115,75,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'WRITE':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,76,76,76,-36,-37,-38,-39,-40,-41,-42,-43,76,-29,-44,-51,-54,-47,-115,76,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'WHILE':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,77,77,77,-36,-37,-38,-39,-40,-41,-42,-43,77,-29,-44,-51,-54,-47,-115,77,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'FOR':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,78,78,78,-36,-37,-38,-39,-40,-41,-42,-43,78,-29,-44,-51,-54,-47,-115,78,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'RETURN':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,79,79,79,-36,-37,-38,-39,-40,-41,-42,-43,79,-29,-44,-51,-54,-47,-115,79,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'PLOTXY':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,81,81,81,-36,-37,-38,-39,-40,-41,-42,-43,81,-29,-44,-51,-54,-47,-115,81,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'REGRESSION':([38,53,61,63,65,66,67,68,69,70,71,72,90,92,107,226,228,239,271,272,282,284,285,287,288,292,293,295,298,300,301,],[-6,83,83,83,-36,-37,-38,-39,-40,-41,-42,-43,83,-29,-44,-51,-54,-47,-115,83,-138,-50,-139,-61,-45,-46,-48,-59,-49,-140,-60,]),'R_PAR':([41,43,48,49,50,82,88,105,110,115,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,143,144,145,146,147,153,157,160,161,164,165,172,173,176,177,181,182,184,185,186,187,188,189,192,194,195,196,198,201,202,203,206,207,209,210,225,229,230,233,234,236,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,260,261,264,267,268,270,273,274,279,280,289,291,297,],[44,-115,59,-14,-15,-118,-142,-118,-23,-26,-130,-115,-115,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,191,-131,193,-130,-122,-115,-115,-136,-81,-84,-85,-92,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-52,-132,-113,231,-130,236,-63,-64,-27,-28,240,241,256,-115,-115,-129,265,-144,-130,269,-128,-82,-83,-86,-87,-88,-89,-90,-91,-94,-95,-98,-99,-100,-103,-151,-53,-55,-58,-56,277,-62,-146,-105,-68,-57,-22,-115,-65,-67,-66,]),'COMMA':([46,47,57,82,88,105,110,113,115,121,122,123,124,125,126,127,128,129,130,131,132,133,134,144,146,147,151,154,155,161,164,165,172,173,176,177,181,182,184,185,186,187,188,189,192,194,195,229,230,236,237,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,267,268,270,273,279,280,],[56,-126,-11,-118,-142,-118,-23,-127,157,-115,-115,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-131,-130,-122,199,205,-12,-81,-84,-85,-92,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,227,-132,-113,259,259,-144,-130,-128,-82,-83,-86,-87,-88,-89,-90,-91,-94,-95,-98,-99,-100,-103,-151,-62,-146,-105,-68,-22,290,]),'L_BRACKET':([47,82,105,],[58,109,109,]),'CTE_INT':([58,94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[86,-117,-76,-77,-78,-79,-80,130,130,-141,-149,-149,130,-117,130,-117,130,130,-149,130,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-149,]),'EQUAL':([73,82,104,105,110,279,],[95,-118,149,-118,-23,-22,]),'MULT_EQ':([73,82,110,279,],[96,-118,-23,-22,]),'DIV_EQ':([73,82,110,279,],[97,-118,-23,-22,]),'PLUS_EQ':([73,82,110,279,],[98,-118,-23,-22,]),'MINUS_EQ':([73,82,110,279,],[99,-118,-23,-22,]),'EXP':([82,110,125,126,127,128,129,130,131,132,133,134,147,185,186,187,188,189,195,236,240,256,267,270,273,279,],[-118,-23,183,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-110,-111,-112,-113,-114,-113,-144,-128,-151,-62,-105,-68,-22,]),'MULT':([82,110,124,125,126,127,128,129,130,131,132,133,134,147,182,184,185,186,187,188,189,195,236,240,255,256,267,270,273,279,],[-118,-23,178,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-103,-151,-62,-105,-68,-22,]),'DIV':([82,110,124,125,126,127,128,129,130,131,132,133,134,147,182,184,185,186,187,188,189,195,236,240,255,256,267,270,273,279,],[-118,-23,179,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-103,-151,-62,-105,-68,-22,]),'REMAINDER':([82,110,124,125,126,127,128,129,130,131,132,133,134,147,182,184,185,186,187,188,189,195,236,240,255,256,267,270,273,279,],[-118,-23,180,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-103,-151,-62,-105,-68,-22,]),'PLUS':([82,110,123,124,125,126,127,128,129,130,131,132,133,134,147,177,181,182,184,185,186,187,188,189,195,236,240,252,253,254,255,256,267,270,273,279,],[-118,-23,174,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'MINUS':([82,110,123,124,125,126,127,128,129,130,131,132,133,134,147,177,181,182,184,185,186,187,188,189,195,236,240,252,253,254,255,256,267,270,273,279,],[-118,-23,175,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'LESS':([82,110,122,123,124,125,126,127,128,129,130,131,132,133,134,147,173,176,177,181,182,184,185,186,187,188,189,195,236,240,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,166,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'GREATER':([82,110,122,123,124,125,126,127,128,129,130,131,132,133,134,147,173,176,177,181,182,184,185,186,187,188,189,195,236,240,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,167,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'LESS_EQ':([82,110,122,123,124,125,126,127,128,129,130,131,132,133,134,147,173,176,177,181,182,184,185,186,187,188,189,195,236,240,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,168,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'GREATER_EQ':([82,110,122,123,124,125,126,127,128,129,130,131,132,133,134,147,173,176,177,181,182,184,185,186,187,188,189,195,236,240,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,169,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'EQUIVALENT':([82,110,122,123,124,125,126,127,128,129,130,131,132,133,134,147,173,176,177,181,182,184,185,186,187,188,189,195,236,240,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,170,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'DIFFERENT':([82,110,122,123,124,125,126,127,128,129,130,131,132,133,134,147,173,176,177,181,182,184,185,186,187,188,189,195,236,240,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,171,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'OR':([82,110,121,122,123,124,125,126,127,128,129,130,131,132,133,134,147,165,172,173,176,177,181,182,184,185,186,187,188,189,195,236,240,244,245,246,247,248,249,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,162,-115,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-85,-92,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-86,-87,-88,-89,-90,-91,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'AND':([82,110,121,122,123,124,125,126,127,128,129,130,131,132,133,134,147,165,172,173,176,177,181,182,184,185,186,187,188,189,195,236,240,244,245,246,247,248,249,250,251,252,253,254,255,256,267,270,273,279,],[-118,-23,163,-115,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-122,-85,-92,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-113,-144,-128,-86,-87,-88,-89,-90,-91,-94,-95,-98,-99,-100,-103,-151,-62,-105,-68,-22,]),'R_BRACKET':([82,86,110,123,124,125,126,127,128,129,130,131,132,133,134,173,176,177,181,182,184,185,186,187,188,189,200,235,236,240,250,251,252,253,254,255,256,266,267,270,273,279,],[-118,113,-23,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-130,-148,-144,-128,-94,-95,-98,-99,-100,-103,-151,279,-62,-105,-68,-22,]),'TO':([82,110,123,124,125,126,127,128,129,130,131,132,133,134,173,176,177,181,182,184,185,186,187,188,189,232,236,240,250,251,252,253,254,255,256,263,267,270,273,279,],[-118,-23,-115,-115,-115,-106,-107,-108,-109,-119,-120,-121,-122,-123,-93,-96,-97,-101,-102,-104,-110,-111,-112,-113,-114,-133,-144,-128,-94,-95,-98,-99,-100,-103,-151,276,-62,-105,-68,-22,]),'ELSE':([92,271,283,],[-29,-137,294,]),'CTE_FLOAT':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,131,131,-141,-149,-149,131,-117,131,-117,131,131,-149,131,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,-149,]),'CTE_CHAR':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,132,132,-141,-149,-149,132,-117,132,-117,132,132,-149,132,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,-149,]),'CTE_STRING':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,133,147,-141,-149,-149,133,-117,133,-117,133,133,-149,133,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,147,133,-149,]),'CTE_BOOL':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,134,134,-141,-149,-149,134,-117,134,-117,134,134,-149,134,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-149,]),'MIN':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,136,136,-141,-149,-149,136,-117,136,-117,136,136,-149,136,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,-149,]),'MAX':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,137,137,-141,-149,-149,137,-117,137,-117,137,137,-149,137,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-149,]),'MEAN':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,138,138,-141,-149,-149,138,-117,138,-117,138,138,-149,138,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-149,]),'MEDIAN':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,139,139,-141,-149,-149,139,-117,139,-117,139,139,-149,139,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-149,]),'MODE':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,140,140,-141,-149,-149,140,-117,140,-117,140,140,-149,140,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,-149,]),'VARIANCE':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,141,141,-141,-149,-149,141,-117,141,-117,141,141,-149,141,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,-149,]),'LEN':([94,95,96,97,98,99,100,102,103,106,109,118,119,148,149,150,152,153,159,162,163,166,167,168,169,170,171,174,175,178,179,180,183,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,290,],[-117,-76,-77,-78,-79,-80,142,142,-141,-149,-149,142,-117,142,-117,142,142,-149,142,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,-117,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,-149,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'np_set_curr_proc':([2,14,30,],[3,27,40,]),'np_GOTO':([4,],[5,]),'programB':([6,],[7,]),'vars':([6,53,],[8,61,]),'programC':([6,8,11,],[9,16,18,]),'function':([6,8,11,],[11,11,11,]),'main':([6,8,11,],[12,12,12,]),'np_prog_end':([7,],[15,]),'func_type':([13,],[19,]),'type':([13,17,43,55,157,],[21,29,51,29,51,]),'varsB':([17,55,],[28,84,]),'np_add_datatype':([20,22,23,24,25,26,],[31,32,33,34,35,36,]),'np_GOTO_END':([27,282,],[37,293,]),'np_set_curr_datatype':([29,],[39,]),'varsC':([42,56,],[45,85,]),'varsD':([42,56,],[46,46,]),'functionB':([43,],[48,]),'params':([43,157,],[49,206,]),'empty':([43,53,61,63,90,121,122,123,124,125,153,157,229,230,271,272,280,],[50,64,91,64,91,164,172,176,181,184,203,207,260,260,284,64,291,]),'vblock':([44,87,],[52,114,]),'block':([44,87,241,275,294,299,],[54,54,271,285,298,300,]),'np_add_var':([47,],[57,]),'blockB':([53,63,272,],[62,93,62,]),'statement':([53,61,63,90,272,],[63,90,63,90,63,]),'assign':([53,61,63,90,272,],[65,65,65,65,65,]),'condicional':([53,61,63,90,272,],[66,66,66,66,66,]),'read':([53,61,63,90,272,],[67,67,67,67,67,]),'write':([53,61,63,90,272,],[68,68,68,68,68,]),'loop_cond':([53,61,63,90,272,],[69,69,69,69,69,]),'loop_range':([53,61,63,90,272,],[70,70,70,70,70,]),'return':([53,61,63,90,272,],[71,71,71,71,71,]),'void_func':([53,61,63,90,272,],[72,72,72,72,72,]),'var':([53,61,63,78,90,100,101,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,227,259,272,276,],[73,73,73,104,73,127,144,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,144,127,73,127,]),'func_call':([53,61,63,90,100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,272,276,],[80,80,80,80,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,80,128,]),'np_set_quad_start':([59,],[87,]),'vblockB':([61,90,],[89,117,]),'oper_assign':([73,],[94,]),'np_push_operand':([82,105,],[110,110,]),'np_ERA':([82,],[111,]),'np_add_param':([88,],[115,]),'np_push_operator':([94,119,149,162,163,166,167,168,169,170,171,174,175,178,179,180,183,],[118,159,197,211,212,213,214,215,216,217,218,219,220,221,222,223,224,]),'expression':([100,102,118,148,159,211,212,259,],[120,146,158,196,209,242,243,146,]),'logic':([100,102,118,148,159,211,212,259,],[121,121,121,121,121,121,121,121,]),'exp':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,259,276,],[122,122,122,122,198,200,122,232,237,122,122,244,245,246,247,248,249,250,251,122,286,]),'term':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,259,276,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,252,253,254,123,123,]),'exponent':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,255,124,124,]),'factor':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'var_cte':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'def_func':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'def_funcB':([100,102,118,148,150,152,159,197,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,259,276,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'read2':([101,227,],[143,257,]),'writeB':([102,259,],[145,274,]),'np_CHECKPOINT':([103,],[148,]),'np_stop':([106,109,153,290,],[150,152,204,204,]),'np_add_arr':([113,],[155,]),'np_ENDFunc':([114,],[156,]),'np_end':([120,146,158,198,200,231,237,286,],[160,194,208,233,235,262,268,296,]),'expressionB':([121,],[161,]),'logic2':([122,],[165,]),'exp2':([123,],[173,]),'term2':([124,],[177,]),'exponentB':([125,],[182,]),'np_push_cte_int':([130,],[185,]),'np_push_cte_float':([131,],[186,]),'np_push_cte_char':([132,],[187,]),'np_push_cte_str':([133,147,],[188,195,]),'np_push_cte_bool':([134,],[189,]),'np_read':([144,],[192,]),'func_callB':([153,],[201,]),'func_call_arguments':([153,290,],[202,297,]),'np_GOTOF':([160,262,],[210,275,]),'np_write':([194,195,],[229,230,]),'writeC':([229,230,],[258,261,]),'np_set_CV':([232,],[263,]),'np_set_return':([233,],[264,]),'np_arr_end':([235,],[266,]),'np_GOSUB':([236,],[267,]),'np_rpar':([240,],[270,]),'np_def_func_1param':([256,],[273,]),'np_def_func_2param':([265,269,],[278,281,]),'np_param':([268,],[280,]),'cond2':([271,],[282,]),'np_GOTO_ELSE':([271,],[283,]),'func_call_argumentsB':([280,],[289,]),'np_GOTO_WHILE':([285,],[295,]),'np_comp_CV_FV':([296,],[299,]),'np_GOTO_FOR':([300,],[301,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end','program',7,'p_program','parser.py',26),
  ('programB -> vars programC','programB',2,'p_program','parser.py',28),
  ('programB -> programC','programB',1,'p_program','parser.py',29),
  ('programC -> function programC','programC',2,'p_program','parser.py',31),
  ('programC -> main','programC',1,'p_program','parser.py',32),
  ('vars -> VARS L_BRACE varsB R_BRACE','vars',4,'p_vars','parser.py',37),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON','varsB',5,'p_vars','parser.py',39),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB','varsB',6,'p_vars','parser.py',40),
  ('varsC -> varsD','varsC',1,'p_vars','parser.py',42),
  ('varsC -> varsD COMMA varsC','varsC',3,'p_vars','parser.py',43),
  ('varsD -> ID np_add_var','varsD',2,'p_vars','parser.py',45),
  ('varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr','varsD',5,'p_vars','parser.py',46),
  ('function -> FUNCTION func_type ID np_set_curr_proc L_PAR functionB R_PAR np_set_quad_start vblock np_ENDFunc','function',10,'p_function','parser.py',52),
  ('functionB -> params','functionB',1,'p_function','parser.py',54),
  ('functionB -> empty','functionB',1,'p_function','parser.py',55),
  ('main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock','main',6,'p_main','parser.py',61),
  ('type -> INT np_add_datatype','type',2,'p_type','parser.py',67),
  ('type -> FLOAT np_add_datatype','type',2,'p_type','parser.py',68),
  ('type -> BOOL np_add_datatype','type',2,'p_type','parser.py',69),
  ('type -> CHAR np_add_datatype','type',2,'p_type','parser.py',70),
  ('type -> STRING np_add_datatype','type',2,'p_type','parser.py',71),
  ('var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET','var',7,'p_var','parser.py',78),
  ('var -> ID np_push_operand','var',2,'p_var','parser.py',79),
  ('func_type -> VOID np_add_datatype','func_type',2,'p_func_type','parser.py',86),
  ('func_type -> type','func_type',1,'p_func_type','parser.py',87),
  ('params -> type COLON ID np_add_param','params',4,'p_params','parser.py',93),
  ('params -> type COLON ID np_add_param COMMA params','params',6,'p_params','parser.py',94),
  ('params -> empty','params',1,'p_params','parser.py',95),
  ('block -> L_BRACE blockB R_BRACE','block',3,'p_block','parser.py',100),
  ('blockB -> statement blockB','blockB',2,'p_block','parser.py',102),
  ('blockB -> empty','blockB',1,'p_block','parser.py',103),
  ('vblock -> L_BRACE vars vblockB R_BRACE','vblock',4,'p_vblock','parser.py',109),
  ('vblock -> block','vblock',1,'p_vblock','parser.py',110),
  ('vblockB -> statement vblockB','vblockB',2,'p_vblock','parser.py',112),
  ('vblockB -> empty','vblockB',1,'p_vblock','parser.py',113),
  ('statement -> assign','statement',1,'p_statement','parser.py',118),
  ('statement -> condicional','statement',1,'p_statement','parser.py',119),
  ('statement -> read','statement',1,'p_statement','parser.py',120),
  ('statement -> write','statement',1,'p_statement','parser.py',121),
  ('statement -> loop_cond','statement',1,'p_statement','parser.py',122),
  ('statement -> loop_range','statement',1,'p_statement','parser.py',123),
  ('statement -> return','statement',1,'p_statement','parser.py',124),
  ('statement -> void_func','statement',1,'p_statement','parser.py',125),
  ('void_func -> func_call SEMICOLON','void_func',2,'p_void_func','parser.py',131),
  ('void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON','void_func',8,'p_void_func','parser.py',132),
  ('void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON','void_func',8,'p_void_func','parser.py',133),
  ('assign -> var oper_assign np_push_operator expression np_end SEMICOLON','assign',6,'p_assign','parser.py',139),
  ('condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END','condicional',9,'p_condicional','parser.py',145),
  ('cond2 -> np_GOTO_ELSE ELSE block','cond2',3,'p_condicional','parser.py',147),
  ('cond2 -> empty','cond2',1,'p_condicional','parser.py',148),
  ('read -> READ L_PAR read2 R_PAR SEMICOLON','read',5,'p_read','parser.py',154),
  ('read2 -> var np_read','read2',2,'p_read','parser.py',156),
  ('read2 -> var np_read COMMA read2','read2',4,'p_read','parser.py',157),
  ('write -> WRITE L_PAR writeB R_PAR SEMICOLON','write',5,'p_write','parser.py',163),
  ('writeB -> expression np_end np_write writeC','writeB',4,'p_write','parser.py',165),
  ('writeB -> CTE_STRING np_push_cte_str np_write writeC','writeB',4,'p_write','parser.py',166),
  ('writeC -> COMMA writeB','writeC',2,'p_write','parser.py',168),
  ('writeC -> empty','writeC',1,'p_write','parser.py',169),
  ('loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE','loop_cond',9,'p_loop_cond','parser.py',174),
  ('loop_range -> FOR var EQUAL np_push_operator exp np_set_CV TO exp np_end np_comp_CV_FV block np_GOTO_FOR','loop_range',12,'p_loop_range','parser.py',180),
  ('return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON','return',8,'p_return','parser.py',186),
  ('func_call -> ID np_ERA L_PAR func_callB R_PAR np_GOSUB','func_call',6,'p_func_call','parser.py',192),
  ('func_callB -> func_call_arguments','func_callB',1,'p_func_call','parser.py',194),
  ('func_callB -> empty','func_callB',1,'p_func_call','parser.py',195),
  ('func_call_arguments -> np_stop exp np_end np_param func_call_argumentsB','func_call_arguments',5,'p_func_call_arguments','parser.py',200),
  ('func_call_argumentsB -> COMMA func_call_arguments','func_call_argumentsB',2,'p_func_call_arguments','parser.py',202),
  ('func_call_argumentsB -> empty','func_call_argumentsB',1,'p_func_call_arguments','parser.py',203),
  ('def_func -> def_funcB L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',208),
  ('def_funcB -> MIN','def_funcB',1,'p_def_func','parser.py',210),
  ('def_funcB -> MAX','def_funcB',1,'p_def_func','parser.py',211),
  ('def_funcB -> MEAN','def_funcB',1,'p_def_func','parser.py',212),
  ('def_funcB -> MEDIAN','def_funcB',1,'p_def_func','parser.py',213),
  ('def_funcB -> MODE','def_funcB',1,'p_def_func','parser.py',214),
  ('def_funcB -> VARIANCE','def_funcB',1,'p_def_func','parser.py',215),
  ('def_funcB -> LEN','def_funcB',1,'p_def_func','parser.py',216),
  ('oper_assign -> EQUAL','oper_assign',1,'p_oper_assign','parser.py',222),
  ('oper_assign -> MULT_EQ','oper_assign',1,'p_oper_assign','parser.py',223),
  ('oper_assign -> DIV_EQ','oper_assign',1,'p_oper_assign','parser.py',224),
  ('oper_assign -> PLUS_EQ','oper_assign',1,'p_oper_assign','parser.py',225),
  ('oper_assign -> MINUS_EQ','oper_assign',1,'p_oper_assign','parser.py',226),
  ('expression -> logic expressionB','expression',2,'p_expression','parser.py',232),
  ('expressionB -> OR np_push_operator expression','expressionB',3,'p_expression','parser.py',234),
  ('expressionB -> AND np_push_operator expression','expressionB',3,'p_expression','parser.py',235),
  ('expressionB -> empty','expressionB',1,'p_expression','parser.py',236),
  ('logic -> exp logic2','logic',2,'p_logic','parser.py',241),
  ('logic2 -> LESS np_push_operator exp','logic2',3,'p_logic','parser.py',243),
  ('logic2 -> GREATER np_push_operator exp','logic2',3,'p_logic','parser.py',244),
  ('logic2 -> LESS_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',245),
  ('logic2 -> GREATER_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',246),
  ('logic2 -> EQUIVALENT np_push_operator exp','logic2',3,'p_logic','parser.py',247),
  ('logic2 -> DIFFERENT np_push_operator exp','logic2',3,'p_logic','parser.py',248),
  ('logic2 -> empty','logic2',1,'p_logic','parser.py',249),
  ('exp -> term exp2','exp',2,'p_exp','parser.py',255),
  ('exp2 -> PLUS np_push_operator exp','exp2',3,'p_exp','parser.py',257),
  ('exp2 -> MINUS np_push_operator exp','exp2',3,'p_exp','parser.py',258),
  ('exp2 -> empty','exp2',1,'p_exp','parser.py',259),
  ('term -> exponent term2','term',2,'p_term','parser.py',264),
  ('term2 -> MULT np_push_operator term','term2',3,'p_term','parser.py',266),
  ('term2 -> DIV np_push_operator term','term2',3,'p_term','parser.py',267),
  ('term2 -> REMAINDER np_push_operator term','term2',3,'p_term','parser.py',268),
  ('term2 -> empty','term2',1,'p_term','parser.py',269),
  ('exponent -> factor exponentB','exponent',2,'p_exponent','parser.py',274),
  ('exponentB -> EXP np_push_operator exponent','exponentB',3,'p_exponent','parser.py',276),
  ('exponentB -> empty','exponentB',1,'p_exponent','parser.py',277),
  ('factor -> L_PAR np_push_operator expression R_PAR np_rpar','factor',5,'p_factor','parser.py',282),
  ('factor -> var_cte','factor',1,'p_factor','parser.py',283),
  ('var_cte -> var','var_cte',1,'p_var_cte','parser.py',289),
  ('var_cte -> func_call','var_cte',1,'p_var_cte','parser.py',290),
  ('var_cte -> def_func','var_cte',1,'p_var_cte','parser.py',291),
  ('var_cte -> CTE_INT np_push_cte_int','var_cte',2,'p_var_cte','parser.py',292),
  ('var_cte -> CTE_FLOAT np_push_cte_float','var_cte',2,'p_var_cte','parser.py',293),
  ('var_cte -> CTE_CHAR np_push_cte_char','var_cte',2,'p_var_cte','parser.py',294),
  ('var_cte -> CTE_STRING np_push_cte_str','var_cte',2,'p_var_cte','parser.py',295),
  ('var_cte -> CTE_BOOL np_push_cte_bool','var_cte',2,'p_var_cte','parser.py',296),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',318),
  ('np_set_curr_proc -> <empty>','np_set_curr_proc',0,'p_np_set_curr_proc','parser.py',357),
  ('np_push_operator -> <empty>','np_push_operator',0,'p_np_push_operator','parser.py',374),
  ('np_push_operand -> <empty>','np_push_operand',0,'p_np_push_operand','parser.py',388),
  ('np_push_cte_int -> <empty>','np_push_cte_int',0,'p_np_push_cte_int','parser.py',397),
  ('np_push_cte_float -> <empty>','np_push_cte_float',0,'p_np_push_cte_float','parser.py',406),
  ('np_push_cte_char -> <empty>','np_push_cte_char',0,'p_np_push_cte_char','parser.py',415),
  ('np_push_cte_str -> <empty>','np_push_cte_str',0,'p_np_push_cte_str','parser.py',424),
  ('np_push_cte_bool -> <empty>','np_push_cte_bool',0,'p_np_push_cte_bool','parser.py',433),
  ('np_set_curr_datatype -> <empty>','np_set_curr_datatype',0,'p_np_set_curr_datatype','parser.py',442),
  ('np_add_datatype -> <empty>','np_add_datatype',0,'p_np_add_datatype','parser.py',450),
  ('np_add_var -> <empty>','np_add_var',0,'p_np_add_var','parser.py',461),
  ('np_add_arr -> <empty>','np_add_arr',0,'p_np_add_arr','parser.py',469),
  ('np_rpar -> <empty>','np_rpar',0,'p_np_rpar','parser.py',477),
  ('np_set_return -> <empty>','np_set_return',0,'p_np_set_return','parser.py',487),
  ('np_end -> <empty>','np_end',0,'p_np_end','parser.py',504),
  ('np_read -> <empty>','np_read',0,'p_np_read','parser.py',523),
  ('np_write -> <empty>','np_write',0,'p_np_write','parser.py',533),
  ('np_set_CV -> <empty>','np_set_CV',0,'p_np_set_CV','parser.py',543),
  ('np_comp_CV_FV -> <empty>','np_comp_CV_FV',0,'p_np_comp_CV_FV','parser.py',555),
  ('np_GOTO -> <empty>','np_GOTO',0,'p_np_GOTO','parser.py',568),
  ('np_GOTOF -> <empty>','np_GOTOF',0,'p_np_GOTOF','parser.py',578),
  ('np_GOTO_ELSE -> <empty>','np_GOTO_ELSE',0,'p_np_GOTO_ELSE','parser.py',588),
  ('np_GOTO_END -> <empty>','np_GOTO_END',0,'p_np_GOTO_END','parser.py',600),
  ('np_GOTO_WHILE -> <empty>','np_GOTO_WHILE',0,'p_np_GOTO_WHILE','parser.py',609),
  ('np_GOTO_FOR -> <empty>','np_GOTO_FOR',0,'p_np_GOTO_FOR','parser.py',621),
  ('np_CHECKPOINT -> <empty>','np_CHECKPOINT',0,'p_np_CHECKPOINT','parser.py',641),
  ('np_add_param -> <empty>','np_add_param',0,'p_np_add_param','parser.py',649),
  ('np_set_quad_start -> <empty>','np_set_quad_start',0,'p_np_set_quad_start','parser.py',657),
  ('np_GOSUB -> <empty>','np_GOSUB',0,'p_np_GOSUB','parser.py',664),
  ('np_ERA -> <empty>','np_ERA',0,'p_np_ERA','parser.py',692),
  ('np_param -> <empty>','np_param',0,'p_np_param','parser.py',710),
  ('np_ENDFunc -> <empty>','np_ENDFunc',0,'p_np_ENDFunc','parser.py',721),
  ('np_arr_end -> <empty>','np_arr_end',0,'p_np_arr_end','parser.py',729),
  ('np_stop -> <empty>','np_stop',0,'p_np_stop','parser.py',751),
  ('np_prog_end -> <empty>','np_prog_end',0,'p_np_prog_end','parser.py',759),
  ('np_def_func_1param -> <empty>','np_def_func_1param',0,'p_np_def_func_1param','parser.py',766),
  ('np_def_func_2param -> <empty>','np_def_func_2param',0,'p_np_def_func_2param','parser.py',781),
]

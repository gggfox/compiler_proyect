
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS AND BOOL CHAR COLON COMMA CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING DIFFERENT DIV DIV_EQ DOT ELSE EQUAL EQUIVALENT EXP FLOAT FLOOR FOR FUNCTION GREATER GREATER_EQ ID IF INT LENGTH LESS LESS_EQ L_BRACE L_BRACKET L_PAR MAIN MAX MEAN MEDIAN MIN MINUS MINUS_EQ MODE MULT MULT_EQ NOT OR PLOT_XY PLUS PLUS_EQ PROGRAM READ REGRESSION REMAINDER RETURN ROOF R_BRACE R_BRACKET R_PAR SEMICOLON STRING SUM TO VARIANCE VARS VOID WHILE WRITE\n    program : PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end\n    \n    programB : vars  programC \n        | programC\n    \n    programC : function programC\n             | main\n    \n    vars : VARS L_BRACE varsB R_BRACE \n    \n    varsB : type np_set_curr_datatype COLON varsC SEMICOLON\n          | type np_set_curr_datatype COLON varsC SEMICOLON varsB\n    \n    varsC : var np_add_var\n          | var np_add_var COMMA varsC\n    \n    function : FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc \n    \n    main : MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock \n    \n    type : INT \n          | FLOAT \n          | BOOL \n          | CHAR \n          | STRING \n    \n    var : ID L_BRACKET np_arr_start exp np_end np_arr_end R_BRACKET\n        | ID\n    \n    vector : ID L_BRACKET R_BRACKET\n    \n    func_type : VOID \n              | type\n    \n    block : L_BRACE blockB R_BRACE \n\n    blockB : statement blockB\n           | empty\n    \n    vblock : L_BRACE vars vblockB R_BRACE \n           | block\n    \n    vblockB : statement vblockB\n            | empty\n    \n    params : type COLON ID np_add_param\n           | type COLON ID np_add_param COMMA params\n           | empty\n    \n    statement : assign \n           | condicional \n           | read \n           | write \n           | loop_cond \n           | loop_range \n           | return \n           | void_func\n    \n    void_func : func_call SEMICOLON\n    \n    assign : var np_push_operand oper_assign np_push_operator expression np_end SEMICOLON\n    \n    predef_func : LENGTH L_PAR vector R_PAR\n            | MIN L_PAR vector R_PAR\n            | MAX L_PAR vector R_PAR\n            | MEAN L_PAR vector R_PAR\n            | MEDIAN L_PAR vector R_PAR\n            | MODE L_PAR vector R_PAR\n            | PLOT_XY L_PAR vector COMMA vector R_PAR\n            | REGRESSION L_PAR vector COMMA vector R_PAR\n            | VARIANCE L_PAR vector R_PAR\n            | DOT L_PAR vector COMMA vector R_PAR\n            | SUM L_PAR vector R_PAR\n            | ABS L_PAR CTE_INT R_PAR\n            | ROOF L_PAR CTE_FLOAT R_PAR\n            | FLOOR L_PAR CTE_FLOAT R_PAR\n    \n    condicional : IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END\n    \n    cond2 : np_GOTO_ELSE ELSE block \n          | empty \n    \n    read : READ L_PAR read2 R_PAR SEMICOLON\n    \n    read2 : var np_read\n          | var np_read COMMA read2\n    \n    write : WRITE L_PAR writeB R_PAR SEMICOLON\n    \n    writeB : expression np_end np_write writeC\n           | CTE_STRING np_push_cte_str np_write writeC\n    \n    writeC : COMMA writeB\n           | empty\n    \n    loop_cond : WHILE L_PAR np_CHECKPOINT expression R_PAR  np_end np_GOTOF block np_GOTO_WHILE\n    \n    loop_range : FOR var np_push_operand EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR\n    \n    return : RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON\n    \n    func_call : ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB\n    \n    func_call_arguments : np_stop exp np_end np_param\n                        | np_stop exp np_end np_param COMMA func_call_arguments\n                        | empty\n    \n    expression : not logic expressionB \n        \n    expressionB : OR np_push_operator expression \n          | AND np_push_operator expression\n          | empty\n    \n    oper_assign : EQUAL \n        | MULT_EQ \n        | DIV_EQ \n        | PLUS_EQ \n        | MINUS_EQ \n    \n    not : NOT np_push_operator\n         | empty\n    \n    logic : exp logic2 \n    \n    logic2 : LESS np_push_operator exp\n         | GREATER np_push_operator exp\n         | LESS_EQ np_push_operator exp\n         | GREATER_EQ np_push_operator exp\n         | EQUIVALENT np_push_operator exp\n         | DIFFERENT np_push_operator exp\n         | empty\n    \n    exp : term exp2 \n    \n    exp2 : PLUS np_push_operator exp \n         | MINUS np_push_operator exp\n         | empty\n    \n    term : factor term2\n    \n    term2 : MULT np_push_operator term \n          | DIV np_push_operator term\n          | REMAINDER np_push_operator term \n          | empty\n    \n    factor : exponent factorB \n    \n    factorB : EXP factor\n            | empty\n    \n    exponent : L_PAR np_push_operator expression R_PAR np_rpar\n        | exponentB \n     \n    exponentB : MINUS var_cte \n        | var_cte \n\n    \n    var_cte : var np_push_operand\n         | predef_func\n         | func_call\n         | CTE_INT np_push_cte_int\n         | CTE_FLOAT np_push_cte_float\n         | CTE_CHAR np_push_cte_char\n         | CTE_STRING np_push_cte_str\n         | CTE_BOOL np_push_cte_bool\n    \n    empty :\n    np_set_curr_proc : np_push_operator : np_push_operand : np_push_cte_int : np_push_cte_float : np_push_cte_char : np_push_cte_str : np_push_cte_bool : np_set_curr_datatype : np_add_datatype : np_add_var : np_set_curr_scope : np_rpar : np_set_return : np_end : np_read : np_write : np_set_VC : np_comp_VC_VF : np_GOTO : np_GOTOF : np_GOTO_ELSE : np_GOTO_END : np_GOTO_WHILE : np_GOTO_FOR : np_CHECKPOINT : np_add_param : np_set_quad_start : np_GOSUB : np_ERA : np_param : np_ENDFunc : np_arr_start : np_arr_end : np_stop : np_prog_end : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,9,12,15,16,18,45,47,82,126,],[0,-154,-3,-5,-1,-2,-4,-12,-27,-23,-26,]),'ID':([2,3,19,20,21,22,23,24,25,26,32,36,46,50,52,53,55,57,58,59,60,61,62,63,64,70,75,76,80,82,85,86,87,88,90,91,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,168,169,170,171,172,173,174,175,176,177,178,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,238,239,240,244,262,263,265,272,273,274,275,276,277,278,279,282,295,296,297,314,316,317,318,319,320,321,323,326,329,330,],[-119,4,30,-21,-22,-13,-14,-15,-16,-17,-6,41,73,-151,78,73,73,-33,-34,-35,-36,-37,-38,-39,-40,41,41,73,73,-23,-118,41,-118,-144,-153,-41,-120,73,-120,-79,-80,-81,-82,-83,73,-120,-85,-118,73,-153,-120,-120,-120,-120,-120,73,-118,209,209,209,209,209,209,209,209,209,209,209,-118,-84,-120,73,73,73,73,73,73,-120,-120,-120,-120,-120,-120,-120,-120,-60,41,-63,73,209,209,209,-118,-118,73,73,73,73,73,73,-118,-42,-118,73,-141,-59,-142,73,-70,-153,-57,-68,-58,-143,-69,]),'SEMICOLON':([4,5,39,40,41,49,72,73,93,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,186,187,189,191,206,224,226,229,230,237,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,270,288,290,298,299,300,301,302,303,304,305,309,311,312,313,],[-138,6,48,-129,-19,-9,91,-19,-10,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,-118,-118,238,240,-104,-133,-75,-78,-86,-93,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,295,-71,-106,-76,-77,-87,-88,-89,-90,-91,-92,319,-49,-50,-52,]),'VARS':([6,46,],[10,10,]),'FUNCTION':([6,8,11,32,47,82,124,126,182,],[13,13,13,-6,-27,-23,-150,-26,-11,]),'MAIN':([6,8,11,32,47,82,124,126,182,],[14,14,14,-6,-27,-23,-150,-26,-11,]),'L_BRACE':([10,38,51,73,77,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,206,243,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,271,285,288,290,307,311,312,313,322,324,327,328,],[17,46,-146,-19,46,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,-104,-133,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,297,-139,-71,-106,297,-49,-50,-52,297,-133,-137,297,]),'VOID':([13,],[20,]),'INT':([13,17,37,48,183,],[22,22,22,22,22,]),'FLOAT':([13,17,37,48,183,],[23,23,23,23,23,]),'BOOL':([13,17,37,48,183,],[24,24,24,24,24,]),'CHAR':([13,17,37,48,183,],[25,25,25,25,25,]),'STRING':([13,17,37,48,183,],[26,26,26,26,26,]),'L_PAR':([14,27,30,31,34,50,66,67,68,69,71,73,76,85,87,88,90,92,98,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-119,-141,-119,35,37,-151,85,86,87,88,90,-148,98,-118,-118,-144,-153,146,-120,168,169,170,171,172,173,174,175,176,177,178,179,180,181,-120,-79,-80,-81,-82,-83,98,-120,-85,-118,98,-153,-120,-120,-120,-120,-120,98,-118,-118,-84,-120,98,98,98,98,98,98,-120,-120,-120,-120,-120,-120,-120,-120,98,-118,-118,98,98,98,98,98,98,-118,98,-153,]),'COLON':([22,23,24,25,26,29,33,43,],[-13,-14,-15,-16,-17,-127,36,52,]),'R_BRACE':([28,32,46,48,53,54,55,56,57,58,59,60,61,62,63,64,74,79,80,81,82,83,91,127,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[32,-6,-118,-7,-118,82,-118,-25,-33,-34,-35,-36,-37,-38,-39,-40,-8,126,-118,-29,-23,-24,-41,-28,-60,-63,-42,-118,-118,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'IF':([32,46,53,55,57,58,59,60,61,62,63,64,80,82,91,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[-6,66,66,66,-33,-34,-35,-36,-37,-38,-39,-40,66,-23,-41,-60,-63,-42,-118,66,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'READ':([32,46,53,55,57,58,59,60,61,62,63,64,80,82,91,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[-6,67,67,67,-33,-34,-35,-36,-37,-38,-39,-40,67,-23,-41,-60,-63,-42,-118,67,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'WRITE':([32,46,53,55,57,58,59,60,61,62,63,64,80,82,91,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[-6,68,68,68,-33,-34,-35,-36,-37,-38,-39,-40,68,-23,-41,-60,-63,-42,-118,68,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'WHILE':([32,46,53,55,57,58,59,60,61,62,63,64,80,82,91,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[-6,69,69,69,-33,-34,-35,-36,-37,-38,-39,-40,69,-23,-41,-60,-63,-42,-118,69,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'FOR':([32,46,53,55,57,58,59,60,61,62,63,64,80,82,91,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[-6,70,70,70,-33,-34,-35,-36,-37,-38,-39,-40,70,-23,-41,-60,-63,-42,-118,70,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'RETURN':([32,46,53,55,57,58,59,60,61,62,63,64,80,82,91,238,240,295,296,297,314,316,317,319,321,323,326,329,330,],[-6,71,71,71,-33,-34,-35,-36,-37,-38,-39,-40,71,-23,-41,-60,-63,-42,-118,71,-141,-59,-142,-70,-57,-68,-58,-143,-69,]),'R_PAR':([35,37,41,42,44,73,78,95,96,97,99,101,102,103,104,105,106,107,108,109,125,134,138,139,140,141,142,146,148,151,152,156,157,159,161,162,163,164,165,166,167,183,185,186,187,190,192,193,194,196,197,199,206,207,208,210,211,212,213,214,217,219,220,221,222,223,225,226,229,230,237,241,242,245,246,247,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,280,281,283,284,287,288,289,290,291,292,293,294,298,299,300,301,302,303,304,305,306,310,311,312,313,320,325,],[38,-118,-19,51,-32,-19,-145,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-30,-133,189,-134,191,-133,-125,-118,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,-118,-139,-118,-118,-61,-135,-135,243,-133,246,-74,-104,254,255,257,258,259,260,261,264,266,267,268,269,-31,271,-75,-78,-86,-93,-118,-118,-132,-147,-133,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-62,-64,-67,-65,309,-71,-149,-106,-20,311,312,313,-76,-77,-87,-88,-89,-90,-91,-92,-66,-72,-49,-50,-52,-118,-73,]),'COMMA':([40,41,49,73,78,95,96,97,99,101,102,103,104,105,106,107,108,109,125,139,141,142,148,151,152,156,157,159,161,162,163,164,165,166,167,186,187,190,192,193,206,215,216,218,226,229,230,237,241,242,246,247,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,289,290,291,298,299,300,301,302,303,304,305,310,311,312,313,],[-129,-19,75,-19,-145,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,183,-134,-133,-125,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,-118,-118,239,-135,-135,-104,262,263,265,-75,-78,-86,-93,282,282,-147,-133,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-149,-106,-20,-76,-77,-87,-88,-89,-90,-91,-92,320,-49,-50,-52,]),'L_BRACKET':([41,73,209,],[50,50,256,]),'EQUAL':([41,65,73,84,89,144,248,],[-19,-121,-19,129,-121,195,-18,]),'MINUS':([50,73,76,85,87,88,90,95,96,97,98,99,101,102,103,104,105,106,107,108,109,128,129,130,131,132,133,135,136,137,143,145,146,149,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,184,188,195,198,201,202,203,204,205,206,227,228,231,232,233,234,235,236,244,246,248,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,272,273,274,275,276,277,278,279,282,288,290,311,312,313,318,320,],[-151,-19,100,-118,-118,-144,-153,150,-118,-118,-120,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-120,-79,-80,-81,-82,-83,100,-120,-85,-118,100,-153,-120,-120,-98,-120,-120,-120,-102,-103,100,-105,-118,-108,-110,-113,-114,-115,-116,-117,-118,-84,-120,100,100,100,100,100,100,-104,-120,-120,-120,-120,-120,-120,-120,-120,100,-147,-18,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-118,-118,100,100,100,100,100,100,-118,-71,-106,-49,-50,-52,100,-153,]),'CTE_INT':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,179,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,105,-118,-118,-144,-153,-120,105,-120,-79,-80,-81,-82,-83,105,-120,-85,-118,105,-153,-120,-120,-120,-120,-120,105,-118,220,-118,-84,-120,105,105,105,105,105,105,-120,-120,-120,-120,-120,-120,-120,-120,105,-118,-118,105,105,105,105,105,105,-118,105,-153,]),'CTE_FLOAT':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,180,181,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,106,-118,-118,-144,-153,-120,106,-120,-79,-80,-81,-82,-83,106,-120,-85,-118,106,-153,-120,-120,-120,-120,-120,106,-118,221,222,-118,-84,-120,106,106,106,106,106,106,-120,-120,-120,-120,-120,-120,-120,-120,106,-118,-118,106,106,106,106,106,106,-118,106,-153,]),'CTE_CHAR':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,107,-118,-118,-144,-153,-120,107,-120,-79,-80,-81,-82,-83,107,-120,-85,-118,107,-153,-120,-120,-120,-120,-120,107,-118,-118,-84,-120,107,107,107,107,107,107,-120,-120,-120,-120,-120,-120,-120,-120,107,-118,-118,107,107,107,107,107,107,-118,107,-153,]),'CTE_STRING':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,108,-118,142,-144,-153,-120,108,-120,-79,-80,-81,-82,-83,108,-120,-85,-118,108,-153,-120,-120,-120,-120,-120,108,-118,-118,-84,-120,108,108,108,108,108,108,-120,-120,-120,-120,-120,-120,-120,-120,108,-118,-118,108,108,108,108,108,108,142,108,-153,]),'CTE_BOOL':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,109,-118,-118,-144,-153,-120,109,-120,-79,-80,-81,-82,-83,109,-120,-85,-118,109,-153,-120,-120,-120,-120,-120,109,-118,-118,-84,-120,109,109,109,109,109,109,-120,-120,-120,-120,-120,-120,-120,-120,109,-118,-118,109,109,109,109,109,109,-118,109,-153,]),'LENGTH':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,110,-118,-118,-144,-153,-120,110,-120,-79,-80,-81,-82,-83,110,-120,-85,-118,110,-153,-120,-120,-120,-120,-120,110,-118,-118,-84,-120,110,110,110,110,110,110,-120,-120,-120,-120,-120,-120,-120,-120,110,-118,-118,110,110,110,110,110,110,-118,110,-153,]),'MIN':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,111,-118,-118,-144,-153,-120,111,-120,-79,-80,-81,-82,-83,111,-120,-85,-118,111,-153,-120,-120,-120,-120,-120,111,-118,-118,-84,-120,111,111,111,111,111,111,-120,-120,-120,-120,-120,-120,-120,-120,111,-118,-118,111,111,111,111,111,111,-118,111,-153,]),'MAX':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,112,-118,-118,-144,-153,-120,112,-120,-79,-80,-81,-82,-83,112,-120,-85,-118,112,-153,-120,-120,-120,-120,-120,112,-118,-118,-84,-120,112,112,112,112,112,112,-120,-120,-120,-120,-120,-120,-120,-120,112,-118,-118,112,112,112,112,112,112,-118,112,-153,]),'MEAN':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,113,-118,-118,-144,-153,-120,113,-120,-79,-80,-81,-82,-83,113,-120,-85,-118,113,-153,-120,-120,-120,-120,-120,113,-118,-118,-84,-120,113,113,113,113,113,113,-120,-120,-120,-120,-120,-120,-120,-120,113,-118,-118,113,113,113,113,113,113,-118,113,-153,]),'MEDIAN':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,114,-118,-118,-144,-153,-120,114,-120,-79,-80,-81,-82,-83,114,-120,-85,-118,114,-153,-120,-120,-120,-120,-120,114,-118,-118,-84,-120,114,114,114,114,114,114,-120,-120,-120,-120,-120,-120,-120,-120,114,-118,-118,114,114,114,114,114,114,-118,114,-153,]),'MODE':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,115,-118,-118,-144,-153,-120,115,-120,-79,-80,-81,-82,-83,115,-120,-85,-118,115,-153,-120,-120,-120,-120,-120,115,-118,-118,-84,-120,115,115,115,115,115,115,-120,-120,-120,-120,-120,-120,-120,-120,115,-118,-118,115,115,115,115,115,115,-118,115,-153,]),'PLOT_XY':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,116,-118,-118,-144,-153,-120,116,-120,-79,-80,-81,-82,-83,116,-120,-85,-118,116,-153,-120,-120,-120,-120,-120,116,-118,-118,-84,-120,116,116,116,116,116,116,-120,-120,-120,-120,-120,-120,-120,-120,116,-118,-118,116,116,116,116,116,116,-118,116,-153,]),'REGRESSION':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,117,-118,-118,-144,-153,-120,117,-120,-79,-80,-81,-82,-83,117,-120,-85,-118,117,-153,-120,-120,-120,-120,-120,117,-118,-118,-84,-120,117,117,117,117,117,117,-120,-120,-120,-120,-120,-120,-120,-120,117,-118,-118,117,117,117,117,117,117,-118,117,-153,]),'VARIANCE':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,118,-118,-118,-144,-153,-120,118,-120,-79,-80,-81,-82,-83,118,-120,-85,-118,118,-153,-120,-120,-120,-120,-120,118,-118,-118,-84,-120,118,118,118,118,118,118,-120,-120,-120,-120,-120,-120,-120,-120,118,-118,-118,118,118,118,118,118,118,-118,118,-153,]),'DOT':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,119,-118,-118,-144,-153,-120,119,-120,-79,-80,-81,-82,-83,119,-120,-85,-118,119,-153,-120,-120,-120,-120,-120,119,-118,-118,-84,-120,119,119,119,119,119,119,-120,-120,-120,-120,-120,-120,-120,-120,119,-118,-118,119,119,119,119,119,119,-118,119,-153,]),'SUM':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,120,-118,-118,-144,-153,-120,120,-120,-79,-80,-81,-82,-83,120,-120,-85,-118,120,-153,-120,-120,-120,-120,-120,120,-118,-118,-84,-120,120,120,120,120,120,120,-120,-120,-120,-120,-120,-120,-120,-120,120,-118,-118,120,120,120,120,120,120,-118,120,-153,]),'ABS':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,121,-118,-118,-144,-153,-120,121,-120,-79,-80,-81,-82,-83,121,-120,-85,-118,121,-153,-120,-120,-120,-120,-120,121,-118,-118,-84,-120,121,121,121,121,121,121,-120,-120,-120,-120,-120,-120,-120,-120,121,-118,-118,121,121,121,121,121,121,-118,121,-153,]),'ROOF':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,122,-118,-118,-144,-153,-120,122,-120,-79,-80,-81,-82,-83,122,-120,-85,-118,122,-153,-120,-120,-120,-120,-120,122,-118,-118,-84,-120,122,122,122,122,122,122,-120,-120,-120,-120,-120,-120,-120,-120,122,-118,-118,122,122,122,122,122,122,-118,122,-153,]),'FLOOR':([50,76,85,87,88,90,98,100,128,129,130,131,132,133,135,136,137,143,145,146,149,150,153,154,155,158,160,184,188,195,198,201,202,203,204,205,227,228,231,232,233,234,235,236,244,272,273,274,275,276,277,278,279,282,318,320,],[-151,123,-118,-118,-144,-153,-120,123,-120,-79,-80,-81,-82,-83,123,-120,-85,-118,123,-153,-120,-120,-120,-120,-120,123,-118,-118,-84,-120,123,123,123,123,123,123,-120,-120,-120,-120,-120,-120,-120,-120,123,-118,-118,123,123,123,123,123,123,-118,123,-153,]),'MULT_EQ':([65,73,84,248,],[-121,-19,130,-18,]),'DIV_EQ':([65,73,84,248,],[-121,-19,131,-18,]),'PLUS_EQ':([65,73,84,248,],[-121,-19,132,-18,]),'MINUS_EQ':([65,73,84,248,],[-121,-19,133,-18,]),'EXP':([73,97,99,101,102,103,104,105,106,107,108,109,161,162,163,164,165,166,167,246,248,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,158,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-108,-110,-113,-114,-115,-116,-117,-147,-18,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'MULT':([73,96,97,99,101,102,103,104,105,106,107,108,109,157,159,161,162,163,164,165,166,167,206,246,248,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,153,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-103,-105,-108,-110,-113,-114,-115,-116,-117,-104,-147,-18,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'DIV':([73,96,97,99,101,102,103,104,105,106,107,108,109,157,159,161,162,163,164,165,166,167,206,246,248,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,154,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-103,-105,-108,-110,-113,-114,-115,-116,-117,-104,-147,-18,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'REMAINDER':([73,96,97,99,101,102,103,104,105,106,107,108,109,157,159,161,162,163,164,165,166,167,206,246,248,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,155,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-103,-105,-108,-110,-113,-114,-115,-116,-117,-104,-147,-18,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'PLUS':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,152,156,157,159,161,162,163,164,165,166,167,206,246,248,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,149,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,-104,-147,-18,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'R_BRACKET':([73,94,95,96,97,99,101,102,103,104,105,106,107,108,109,147,148,151,152,156,157,159,161,162,163,164,165,166,167,200,206,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-133,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-152,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,248,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,291,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'LESS':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,187,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,231,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'GREATER':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,187,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,232,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'LESS_EQ':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,187,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,233,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'GREATER_EQ':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,187,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,234,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'EQUIVALENT':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,187,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,235,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'DIFFERENT':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,187,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,236,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-49,-50,-52,]),'OR':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,186,187,206,230,237,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,300,301,302,303,304,305,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,227,-118,-104,-86,-93,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-87,-88,-89,-90,-91,-92,-49,-50,-52,]),'AND':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,186,187,206,230,237,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,288,290,300,301,302,303,304,305,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,228,-118,-104,-86,-93,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-71,-106,-87,-88,-89,-90,-91,-92,-49,-50,-52,]),'TO':([73,95,96,97,99,101,102,103,104,105,106,107,108,109,148,151,152,156,157,159,161,162,163,164,165,166,167,206,246,248,249,250,251,252,253,254,255,257,258,259,260,261,264,266,267,268,269,286,288,290,308,311,312,313,],[-19,-118,-118,-118,-107,-109,-121,-111,-112,-122,-123,-124,-125,-126,-94,-97,-98,-102,-103,-105,-108,-110,-113,-114,-115,-116,-117,-104,-147,-18,-95,-96,-99,-100,-101,-131,-43,-44,-45,-46,-47,-48,-51,-53,-54,-55,-56,-136,-71,-106,318,-49,-50,-52,]),'ELSE':([82,296,315,],[-23,-140,322,]),'NOT':([85,87,88,98,128,129,130,131,132,133,143,160,184,227,228,272,273,282,],[136,136,-144,-120,-120,-79,-80,-81,-82,-83,136,136,136,-120,-120,136,136,136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'np_set_curr_proc':([2,14,30,],[3,27,34,]),'np_GOTO':([4,],[5,]),'programB':([6,],[7,]),'vars':([6,46,],[8,53,]),'programC':([6,8,11,],[9,16,18,]),'function':([6,8,11,],[11,11,11,]),'main':([6,8,11,],[12,12,12,]),'np_prog_end':([7,],[15,]),'func_type':([13,],[19,]),'type':([13,17,37,48,183,],[21,29,43,29,43,]),'varsB':([17,48,],[28,74,]),'np_GOTO_END':([27,314,],[31,321,]),'np_set_curr_datatype':([29,],[33,]),'varsC':([36,75,],[39,93,]),'var':([36,46,53,55,70,75,76,80,86,100,135,145,158,198,201,202,203,204,205,239,244,274,275,276,277,278,279,297,318,],[40,65,65,65,89,40,102,65,139,102,102,102,102,102,102,102,102,102,102,139,102,102,102,102,102,102,102,65,102,]),'params':([37,183,],[42,223,]),'empty':([37,46,53,55,80,85,87,95,96,97,143,146,160,183,184,186,187,241,242,272,273,282,296,297,320,],[44,56,81,56,81,137,137,151,156,159,137,199,137,44,137,229,237,283,283,137,137,137,316,56,199,]),'vblock':([38,77,],[45,124,]),'block':([38,77,271,307,322,328,],[47,47,296,317,326,329,]),'np_add_var':([40,],[49,]),'blockB':([46,55,297,],[54,83,54,]),'statement':([46,53,55,80,297,],[55,80,55,80,55,]),'assign':([46,53,55,80,297,],[57,57,57,57,57,]),'condicional':([46,53,55,80,297,],[58,58,58,58,58,]),'read':([46,53,55,80,297,],[59,59,59,59,59,]),'write':([46,53,55,80,297,],[60,60,60,60,60,]),'loop_cond':([46,53,55,80,297,],[61,61,61,61,61,]),'loop_range':([46,53,55,80,297,],[62,62,62,62,62,]),'return':([46,53,55,80,297,],[63,63,63,63,63,]),'void_func':([46,53,55,80,297,],[64,64,64,64,64,]),'func_call':([46,53,55,76,80,100,135,145,158,198,201,202,203,204,205,244,274,275,276,277,278,279,297,318,],[72,72,72,104,72,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,72,104,]),'np_arr_start':([50,],[76,]),'np_set_quad_start':([51,],[77,]),'vblockB':([53,80,],[79,127,]),'np_push_operand':([65,89,102,],[84,144,162,]),'np_ERA':([73,],[92,]),'exp':([76,135,145,198,201,202,244,274,275,276,277,278,279,318,],[94,187,196,247,249,250,286,300,301,302,303,304,305,324,]),'term':([76,135,145,198,201,202,203,204,205,244,274,275,276,277,278,279,318,],[95,95,95,95,95,95,251,252,253,95,95,95,95,95,95,95,95,]),'factor':([76,135,145,158,198,201,202,203,204,205,244,274,275,276,277,278,279,318,],[96,96,96,206,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'exponent':([76,135,145,158,198,201,202,203,204,205,244,274,275,276,277,278,279,318,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'exponentB':([76,135,145,158,198,201,202,203,204,205,244,274,275,276,277,278,279,318,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'var_cte':([76,100,135,145,158,198,201,202,203,204,205,244,274,275,276,277,278,279,318,],[101,161,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'predef_func':([76,100,135,145,158,198,201,202,203,204,205,244,274,275,276,277,278,279,318,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'np_add_param':([78,],[125,]),'oper_assign':([84,],[128,]),'expression':([85,87,143,160,184,272,273,282,],[134,141,194,207,224,298,299,141,]),'not':([85,87,143,160,184,272,273,282,],[135,135,135,135,135,135,135,135,]),'read2':([86,239,],[138,280,]),'writeB':([87,282,],[140,306,]),'np_CHECKPOINT':([88,],[143,]),'np_stop':([90,146,320,],[145,198,198,]),'np_end':([94,134,141,196,224,243,247,324,],[147,185,192,245,270,285,289,327,]),'exp2':([95,],[148,]),'term2':([96,],[152,]),'factorB':([97,],[157,]),'np_push_operator':([98,128,136,149,150,153,154,155,195,227,228,231,232,233,234,235,236,],[160,184,188,201,202,203,204,205,244,272,273,274,275,276,277,278,279,]),'np_push_cte_int':([105,],[163,]),'np_push_cte_float':([106,],[164,]),'np_push_cte_char':([107,],[165,]),'np_push_cte_str':([108,142,],[166,193,]),'np_push_cte_bool':([109,],[167,]),'np_ENDFunc':([124,],[182,]),'logic':([135,],[186,]),'np_read':([139,],[190,]),'func_call_arguments':([146,320,],[197,325,]),'np_arr_end':([147,],[200,]),'vector':([168,169,170,171,172,173,174,175,176,177,178,262,263,265,],[208,210,211,212,213,214,215,216,217,218,219,292,293,294,]),'np_GOTOF':([185,285,],[225,307,]),'expressionB':([186,],[226,]),'logic2':([187,],[230,]),'np_write':([192,193,],[241,242,]),'writeC':([241,242,],[281,284,]),'np_set_return':([245,],[287,]),'np_GOSUB':([246,],[288,]),'np_rpar':([254,],[290,]),'np_set_VC':([286,],[308,]),'np_param':([289,],[310,]),'cond2':([296,],[314,]),'np_GOTO_ELSE':([296,],[315,]),'np_GOTO_WHILE':([317,],[323,]),'np_comp_VC_VF':([327,],[328,]),'np_GOTO_FOR':([329,],[330,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end','program',7,'p_program','parser.py',23),
  ('programB -> vars programC','programB',2,'p_programB','parser.py',29),
  ('programB -> programC','programB',1,'p_programB','parser.py',30),
  ('programC -> function programC','programC',2,'p_programC','parser.py',36),
  ('programC -> main','programC',1,'p_programC','parser.py',37),
  ('vars -> VARS L_BRACE varsB R_BRACE','vars',4,'p_vars','parser.py',43),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON','varsB',5,'p_varsB','parser.py',49),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB','varsB',6,'p_varsB','parser.py',50),
  ('varsC -> var np_add_var','varsC',2,'p_varsC','parser.py',56),
  ('varsC -> var np_add_var COMMA varsC','varsC',4,'p_varsC','parser.py',57),
  ('function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc','function',10,'p_function','parser.py',63),
  ('main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock','main',6,'p_main','parser.py',69),
  ('type -> INT','type',1,'p_type','parser.py',74),
  ('type -> FLOAT','type',1,'p_type','parser.py',75),
  ('type -> BOOL','type',1,'p_type','parser.py',76),
  ('type -> CHAR','type',1,'p_type','parser.py',77),
  ('type -> STRING','type',1,'p_type','parser.py',78),
  ('var -> ID L_BRACKET np_arr_start exp np_end np_arr_end R_BRACKET','var',7,'p_var','parser.py',84),
  ('var -> ID','var',1,'p_var','parser.py',85),
  ('vector -> ID L_BRACKET R_BRACKET','vector',3,'p_vector','parser.py',91),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',96),
  ('func_type -> type','func_type',1,'p_func_type','parser.py',97),
  ('block -> L_BRACE blockB R_BRACE','block',3,'p_block','parser.py',103),
  ('blockB -> statement blockB','blockB',2,'p_block','parser.py',105),
  ('blockB -> empty','blockB',1,'p_block','parser.py',106),
  ('vblock -> L_BRACE vars vblockB R_BRACE','vblock',4,'p_vblock','parser.py',110),
  ('vblock -> block','vblock',1,'p_vblock','parser.py',111),
  ('vblockB -> statement vblockB','vblockB',2,'p_vblock','parser.py',113),
  ('vblockB -> empty','vblockB',1,'p_vblock','parser.py',114),
  ('params -> type COLON ID np_add_param','params',4,'p_params','parser.py',119),
  ('params -> type COLON ID np_add_param COMMA params','params',6,'p_params','parser.py',120),
  ('params -> empty','params',1,'p_params','parser.py',121),
  ('statement -> assign','statement',1,'p_statement','parser.py',127),
  ('statement -> condicional','statement',1,'p_statement','parser.py',128),
  ('statement -> read','statement',1,'p_statement','parser.py',129),
  ('statement -> write','statement',1,'p_statement','parser.py',130),
  ('statement -> loop_cond','statement',1,'p_statement','parser.py',131),
  ('statement -> loop_range','statement',1,'p_statement','parser.py',132),
  ('statement -> return','statement',1,'p_statement','parser.py',133),
  ('statement -> void_func','statement',1,'p_statement','parser.py',134),
  ('void_func -> func_call SEMICOLON','void_func',2,'p_void_func','parser.py',138),
  ('assign -> var np_push_operand oper_assign np_push_operator expression np_end SEMICOLON','assign',7,'p_assign','parser.py',142),
  ('predef_func -> LENGTH L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',147),
  ('predef_func -> MIN L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',148),
  ('predef_func -> MAX L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',149),
  ('predef_func -> MEAN L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',150),
  ('predef_func -> MEDIAN L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',151),
  ('predef_func -> MODE L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',152),
  ('predef_func -> PLOT_XY L_PAR vector COMMA vector R_PAR','predef_func',6,'p_predef_func','parser.py',153),
  ('predef_func -> REGRESSION L_PAR vector COMMA vector R_PAR','predef_func',6,'p_predef_func','parser.py',154),
  ('predef_func -> VARIANCE L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',155),
  ('predef_func -> DOT L_PAR vector COMMA vector R_PAR','predef_func',6,'p_predef_func','parser.py',156),
  ('predef_func -> SUM L_PAR vector R_PAR','predef_func',4,'p_predef_func','parser.py',157),
  ('predef_func -> ABS L_PAR CTE_INT R_PAR','predef_func',4,'p_predef_func','parser.py',158),
  ('predef_func -> ROOF L_PAR CTE_FLOAT R_PAR','predef_func',4,'p_predef_func','parser.py',159),
  ('predef_func -> FLOOR L_PAR CTE_FLOAT R_PAR','predef_func',4,'p_predef_func','parser.py',160),
  ('condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END','condicional',9,'p_condicional','parser.py',165),
  ('cond2 -> np_GOTO_ELSE ELSE block','cond2',3,'p_condicional','parser.py',167),
  ('cond2 -> empty','cond2',1,'p_condicional','parser.py',168),
  ('read -> READ L_PAR read2 R_PAR SEMICOLON','read',5,'p_read','parser.py',173),
  ('read2 -> var np_read','read2',2,'p_read','parser.py',175),
  ('read2 -> var np_read COMMA read2','read2',4,'p_read','parser.py',176),
  ('write -> WRITE L_PAR writeB R_PAR SEMICOLON','write',5,'p_write','parser.py',181),
  ('writeB -> expression np_end np_write writeC','writeB',4,'p_writeB','parser.py',186),
  ('writeB -> CTE_STRING np_push_cte_str np_write writeC','writeB',4,'p_writeB','parser.py',187),
  ('writeC -> COMMA writeB','writeC',2,'p_writeC','parser.py',192),
  ('writeC -> empty','writeC',1,'p_writeC','parser.py',193),
  ('loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE','loop_cond',9,'p_loop_cond','parser.py',198),
  ('loop_range -> FOR var np_push_operand EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR','loop_range',13,'p_loop_range','parser.py',203),
  ('return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON','return',8,'p_return','parser.py',208),
  ('func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB','func_call',6,'p_func_call','parser.py',213),
  ('func_call_arguments -> np_stop exp np_end np_param','func_call_arguments',4,'p_func_call_arguments','parser.py',219),
  ('func_call_arguments -> np_stop exp np_end np_param COMMA func_call_arguments','func_call_arguments',6,'p_func_call_arguments','parser.py',220),
  ('func_call_arguments -> empty','func_call_arguments',1,'p_func_call_arguments','parser.py',221),
  ('expression -> not logic expressionB','expression',3,'p_expression','parser.py',226),
  ('expressionB -> OR np_push_operator expression','expressionB',3,'p_expressionB','parser.py',231),
  ('expressionB -> AND np_push_operator expression','expressionB',3,'p_expressionB','parser.py',232),
  ('expressionB -> empty','expressionB',1,'p_expressionB','parser.py',233),
  ('oper_assign -> EQUAL','oper_assign',1,'p_oper_assign','parser.py',239),
  ('oper_assign -> MULT_EQ','oper_assign',1,'p_oper_assign','parser.py',240),
  ('oper_assign -> DIV_EQ','oper_assign',1,'p_oper_assign','parser.py',241),
  ('oper_assign -> PLUS_EQ','oper_assign',1,'p_oper_assign','parser.py',242),
  ('oper_assign -> MINUS_EQ','oper_assign',1,'p_oper_assign','parser.py',243),
  ('not -> NOT np_push_operator','not',2,'p_not','parser.py',249),
  ('not -> empty','not',1,'p_not','parser.py',250),
  ('logic -> exp logic2','logic',2,'p_logic','parser.py',255),
  ('logic2 -> LESS np_push_operator exp','logic2',3,'p_logic','parser.py',257),
  ('logic2 -> GREATER np_push_operator exp','logic2',3,'p_logic','parser.py',258),
  ('logic2 -> LESS_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',259),
  ('logic2 -> GREATER_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',260),
  ('logic2 -> EQUIVALENT np_push_operator exp','logic2',3,'p_logic','parser.py',261),
  ('logic2 -> DIFFERENT np_push_operator exp','logic2',3,'p_logic','parser.py',262),
  ('logic2 -> empty','logic2',1,'p_logic','parser.py',263),
  ('exp -> term exp2','exp',2,'p_exp','parser.py',268),
  ('exp2 -> PLUS np_push_operator exp','exp2',3,'p_exp','parser.py',270),
  ('exp2 -> MINUS np_push_operator exp','exp2',3,'p_exp','parser.py',271),
  ('exp2 -> empty','exp2',1,'p_exp','parser.py',272),
  ('term -> factor term2','term',2,'p_term','parser.py',277),
  ('term2 -> MULT np_push_operator term','term2',3,'p_term','parser.py',279),
  ('term2 -> DIV np_push_operator term','term2',3,'p_term','parser.py',280),
  ('term2 -> REMAINDER np_push_operator term','term2',3,'p_term','parser.py',281),
  ('term2 -> empty','term2',1,'p_term','parser.py',282),
  ('factor -> exponent factorB','factor',2,'p_factor','parser.py',287),
  ('factorB -> EXP factor','factorB',2,'p_factorB','parser.py',292),
  ('factorB -> empty','factorB',1,'p_factorB','parser.py',293),
  ('exponent -> L_PAR np_push_operator expression R_PAR np_rpar','exponent',5,'p_exponent','parser.py',298),
  ('exponent -> exponentB','exponent',1,'p_exponent','parser.py',299),
  ('exponentB -> MINUS var_cte','exponentB',2,'p_exponentB','parser.py',304),
  ('exponentB -> var_cte','exponentB',1,'p_exponentB','parser.py',305),
  ('var_cte -> var np_push_operand','var_cte',2,'p_var_cte','parser.py',312),
  ('var_cte -> predef_func','var_cte',1,'p_var_cte','parser.py',313),
  ('var_cte -> func_call','var_cte',1,'p_var_cte','parser.py',314),
  ('var_cte -> CTE_INT np_push_cte_int','var_cte',2,'p_var_cte','parser.py',315),
  ('var_cte -> CTE_FLOAT np_push_cte_float','var_cte',2,'p_var_cte','parser.py',316),
  ('var_cte -> CTE_CHAR np_push_cte_char','var_cte',2,'p_var_cte','parser.py',317),
  ('var_cte -> CTE_STRING np_push_cte_str','var_cte',2,'p_var_cte','parser.py',318),
  ('var_cte -> CTE_BOOL np_push_cte_bool','var_cte',2,'p_var_cte','parser.py',319),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',335),
  ('np_set_curr_proc -> <empty>','np_set_curr_proc',0,'p_np_set_curr_proc','parser.py',362),
  ('np_push_operator -> <empty>','np_push_operator',0,'p_np_push_operator','parser.py',379),
  ('np_push_operand -> <empty>','np_push_operand',0,'p_np_push_operand','parser.py',393),
  ('np_push_cte_int -> <empty>','np_push_cte_int',0,'p_np_push_cte_int','parser.py',399),
  ('np_push_cte_float -> <empty>','np_push_cte_float',0,'p_np_push_cte_float','parser.py',404),
  ('np_push_cte_char -> <empty>','np_push_cte_char',0,'p_np_push_cte_char','parser.py',409),
  ('np_push_cte_str -> <empty>','np_push_cte_str',0,'p_np_push_cte_str','parser.py',414),
  ('np_push_cte_bool -> <empty>','np_push_cte_bool',0,'p_np_push_cte_bool','parser.py',419),
  ('np_set_curr_datatype -> <empty>','np_set_curr_datatype',0,'p_np_set_curr_datatype','parser.py',428),
  ('np_add_datatype -> <empty>','np_add_datatype',0,'p_np_add_datatype','parser.py',434),
  ('np_add_var -> <empty>','np_add_var',0,'p_np_add_var','parser.py',446),
  ('np_set_curr_scope -> <empty>','np_set_curr_scope',0,'p_np_set_curr_scope','parser.py',455),
  ('np_rpar -> <empty>','np_rpar',0,'p_np_rpar','parser.py',462),
  ('np_set_return -> <empty>','np_set_return',0,'p_np_set_return','parser.py',470),
  ('np_end -> <empty>','np_end',0,'p_np_end','parser.py',480),
  ('np_read -> <empty>','np_read',0,'p_np_read','parser.py',499),
  ('np_write -> <empty>','np_write',0,'p_np_write','parser.py',507),
  ('np_set_VC -> <empty>','np_set_VC',0,'p_np_set_VC','parser.py',515),
  ('np_comp_VC_VF -> <empty>','np_comp_VC_VF',0,'p_np_comp_VC_VF','parser.py',527),
  ('np_GOTO -> <empty>','np_GOTO',0,'p_np_GOTO','parser.py',542),
  ('np_GOTOF -> <empty>','np_GOTOF',0,'p_np_GOTOF','parser.py',551),
  ('np_GOTO_ELSE -> <empty>','np_GOTO_ELSE',0,'p_np_GOTO_ELSE','parser.py',560),
  ('np_GOTO_END -> <empty>','np_GOTO_END',0,'p_np_GOTO_END','parser.py',573),
  ('np_GOTO_WHILE -> <empty>','np_GOTO_WHILE',0,'p_np_GOTO_WHILE','parser.py',581),
  ('np_GOTO_FOR -> <empty>','np_GOTO_FOR',0,'p_np_GOTO_FOR','parser.py',591),
  ('np_CHECKPOINT -> <empty>','np_CHECKPOINT',0,'p_np_CHECKPOINT','parser.py',609),
  ('np_add_param -> <empty>','np_add_param',0,'p_np_add_param','parser.py',620),
  ('np_set_quad_start -> <empty>','np_set_quad_start',0,'p_np_set_quad_start','parser.py',627),
  ('np_GOSUB -> <empty>','np_GOSUB',0,'p_np_GOSUB','parser.py',633),
  ('np_ERA -> <empty>','np_ERA',0,'p_np_ERA','parser.py',657),
  ('np_param -> <empty>','np_param',0,'p_np_param','parser.py',673),
  ('np_ENDFunc -> <empty>','np_ENDFunc',0,'p_np_ENDFunc','parser.py',682),
  ('np_arr_start -> <empty>','np_arr_start',0,'p_np_arr_start','parser.py',692),
  ('np_arr_end -> <empty>','np_arr_end',0,'p_np_arr_end','parser.py',696),
  ('np_stop -> <empty>','np_stop',0,'p_np_stop','parser.py',701),
  ('np_prog_end -> <empty>','np_prog_end',0,'p_np_prog_end','parser.py',707),
]

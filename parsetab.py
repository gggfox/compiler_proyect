
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR COLON COMMA CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING DIFFERENT DIV DIV_EQ ELSE EQUAL EQUIVALENT EXP FLOAT FOR FUNCTION GREATER GREATER_EQ ID IF INT LEN LESS LESS_EQ L_BRACE L_BRACKET L_PAR MAIN MAX MEAN MEDIAN MIN MINUS MINUS_EQ MODE MULT MULT_EQ OR PLOTXY PLUS PLUS_EQ PROGRAM READ REGRESSION REMAINDER RETURN R_BRACE R_BRACKET R_PAR SEMICOLON STRING TO VARIANCE VARS VOID WHILE WRITE\n    program : PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end\n\n    programB : vars  programC \n             | programC\n\n    programC : function programC\n             | main      \n    \n    vars : VARS L_BRACE varsB R_BRACE \n\n    varsB : type np_set_curr_datatype COLON varsC SEMICOLON\n          | type np_set_curr_datatype COLON varsC SEMICOLON varsB\n\n    varsC : varsD \n          | varsD COMMA varsC\n\n    varsD : ID np_add_var\n          | ID L_BRACKET  CTE_INT R_BRACKET np_add_arr \n    \n    function : FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc \n    \n    main : MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock \n    \n    type : INT np_add_datatype\n          | FLOAT np_add_datatype\n          | BOOL np_add_datatype\n          | CHAR np_add_datatype\n          | STRING np_add_datatype\n    \n    var : ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET\n        | ID np_push_operand\n    \n    func_type : VOID np_add_datatype \n              | type\n    \n    params : type COLON ID np_add_param\n           | type COLON ID np_add_param COMMA params\n           | empty\n    \n    block : L_BRACE blockB R_BRACE \n\n    blockB : statement blockB\n           | empty\n    \n    vblock : L_BRACE vars vblockB R_BRACE \n           | block\n\n    vblockB : statement vblockB\n            | empty\n    \n    statement : assign \n           | condicional \n           | read \n           | write \n           | loop_cond \n           | loop_range \n           | return \n           | void_func\n    \n    void_func : func_call SEMICOLON           \n              | PLOTXY L_PAR ID  COMMA ID  R_PAR np_def_func_2param SEMICOLON\n              | REGRESSION L_PAR ID  COMMA ID  R_PAR np_def_func_2param SEMICOLON\n    \n    assign : var oper_assign np_push_operator expression np_end SEMICOLON\n    \n    condicional : IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END\n\n    cond2 : np_GOTO_ELSE ELSE block \n          | empty \n    \n    read : READ L_PAR read2 R_PAR SEMICOLON\n\n    read2 : var np_read\n          | var np_read COMMA read2\n    \n    write : WRITE L_PAR writeB R_PAR SEMICOLON\n\n    writeB : expression np_end np_write writeC\n           | CTE_STRING np_push_cte_str np_write writeC\n\n    writeC : COMMA writeB\n           | empty      \n    \n    loop_cond : WHILE L_PAR np_CHECKPOINT expression R_PAR  np_end np_GOTOF block np_GOTO_WHILE\n    \n    loop_range : FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR\n    \n    return : RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON\n    \n    func_call : ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB\n    \n    func_call_arguments : np_stop exp np_end np_param\n                        | np_stop exp np_end np_param COMMA func_call_arguments\n                        | empty\n    \n    def_func : MIN L_PAR ID  R_PAR np_def_func_1param\n            | MAX L_PAR ID  R_PAR np_def_func_1param\n            | MEAN L_PAR ID R_PAR np_def_func_1param\n            | MEDIAN L_PAR ID  R_PAR np_def_func_1param\n            | MODE L_PAR ID R_PAR np_def_func_1param\n            | VARIANCE L_PAR ID R_PAR np_def_func_1param\n            | LEN L_PAR ID R_PAR np_def_func_1param\n    \n    oper_assign : EQUAL \n        | MULT_EQ \n        | DIV_EQ \n        | PLUS_EQ \n        | MINUS_EQ \n    \n    expression : logic expressionB \n\n    expressionB : OR np_push_operator expression \n          | AND np_push_operator expression\n          | empty\n    \n    logic : exp logic2 \n\n    logic2 : LESS np_push_operator exp\n         | GREATER np_push_operator exp\n         | LESS_EQ np_push_operator exp\n         | GREATER_EQ np_push_operator exp\n         | EQUIVALENT np_push_operator exp\n         | DIFFERENT np_push_operator exp\n         | empty\n    \n    exp : term exp2 \n\n    exp2 : PLUS np_push_operator exp \n         | MINUS np_push_operator exp\n         | empty\n    \n    term : exponent term2\n\n    term2 : MULT np_push_operator term \n          | DIV np_push_operator term\n          | REMAINDER np_push_operator term \n          | empty\n    \n    exponent : factor exponentB \n\n    exponentB : EXP np_push_operator exponent\n              | empty   \n    \n    factor : L_PAR np_push_operator expression R_PAR np_rpar\n        | MINUS var_cte\n        | var_cte \n    \n    var_cte : var \n         | func_call\n         | def_func\n         | CTE_INT np_push_cte_int\n         | CTE_FLOAT np_push_cte_float\n         | CTE_CHAR np_push_cte_char\n         | CTE_STRING np_push_cte_str\n         | CTE_BOOL np_push_cte_bool\n    \n    empty :\n    np_set_curr_proc : np_push_operator : np_push_operand : np_push_cte_int : np_push_cte_float : np_push_cte_char : np_push_cte_str : np_push_cte_bool : np_set_curr_datatype : np_add_datatype : np_add_var : np_add_arr : np_rpar : np_set_return : np_end : np_read : np_write : np_set_VC : np_comp_VC_VF : np_GOTO : np_GOTOF : np_GOTO_ELSE : np_GOTO_END : np_GOTO_WHILE : np_GOTO_FOR : np_CHECKPOINT : np_add_param : np_set_quad_start : np_GOSUB : np_ERA : np_param : np_ENDFunc : np_arr_end : np_stop : np_prog_end : np_def_func_1param : np_def_func_2param : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,9,12,15,16,18,51,53,91,115,],[0,-146,-3,-5,-1,-2,-4,-14,-31,-27,-30,]),'ID':([2,3,19,20,21,22,23,24,25,26,31,32,33,34,35,36,38,42,52,55,59,60,62,64,65,66,67,68,69,70,71,77,89,91,93,94,95,96,97,98,99,100,101,102,105,106,107,108,111,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,190,191,192,193,194,195,196,203,205,208,210,215,216,217,218,219,220,221,222,223,224,225,226,227,228,236,237,238,249,275,287,288,298,304,306,307,309,310,311,312,313,315,318,320,321,],[-112,4,30,-121,-23,-121,-121,-121,-121,-121,-22,-15,-16,-17,-18,-19,-6,47,81,47,87,81,81,-34,-35,-36,-37,-38,-39,-40,-41,104,81,-27,-113,-71,-72,-73,-74,-75,81,104,81,-137,-145,-42,150,-145,153,81,-113,81,81,-113,81,81,-145,81,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,229,230,231,232,233,234,235,81,244,81,248,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-49,104,-52,-45,81,-111,81,81,-134,-48,-135,-59,-43,-145,-44,-46,-57,-47,-136,-58,]),'SEMICOLON':([4,5,45,46,47,56,79,81,84,109,112,120,121,122,123,124,126,127,128,129,130,131,132,133,134,154,157,160,163,164,171,172,175,176,180,181,183,184,185,186,187,188,189,197,199,212,246,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,281,283,285,286,289,290,291,292,293,294,295,299,300,301,303,],[-131,6,54,-9,-122,-11,106,-114,-10,-21,-123,-111,-111,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-12,-126,-76,-79,-80,-87,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,236,238,249,-140,-124,-77,-78,-81,-82,-83,-84,-85,-86,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-148,-60,-148,-100,-64,-65,-66,-67,-68,-69,-70,309,310,-20,312,]),'VARS':([6,52,],[10,10,]),'FUNCTION':([6,8,11,38,53,91,113,115,155,],[13,13,13,-6,-31,-27,-143,-30,-13,]),'MAIN':([6,8,11,38,53,91,113,115,155,],[14,14,14,-6,-31,-27,-143,-30,-13,]),'L_BRACE':([10,44,58,81,86,109,122,123,124,126,127,128,129,130,131,132,133,134,172,175,176,180,181,183,184,185,186,187,188,189,241,246,250,251,260,261,262,263,264,265,266,267,268,269,270,271,272,278,283,286,289,290,291,292,293,294,295,297,301,308,314,316,319,],[17,52,-139,-114,52,-21,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-126,-140,-124,288,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-132,-60,-100,-64,-65,-66,-67,-68,-69,-70,288,-20,-126,288,-130,288,]),'VOID':([13,],[20,]),'INT':([13,17,43,54,156,],[22,22,22,22,22,]),'FLOAT':([13,17,43,54,156,],[23,23,23,23,23,]),'BOOL':([13,17,43,54,156,],[24,24,24,24,24,]),'CHAR':([13,17,43,54,156,],[25,25,25,25,25,]),'STRING':([13,17,43,54,156,],[26,26,26,26,26,]),'L_PAR':([14,27,30,37,40,73,74,75,76,78,80,81,82,93,94,95,96,97,98,99,101,102,105,108,110,117,118,135,136,137,138,139,140,141,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-112,-134,-112,41,43,99,100,101,102,105,107,-141,111,-113,-71,-72,-73,-74,-75,118,118,-137,-145,-145,152,118,-113,190,191,192,193,194,195,196,118,-113,118,118,-145,118,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-145,]),'COLON':([22,23,24,25,26,29,32,33,34,35,36,39,49,],[-121,-121,-121,-121,-121,-120,-15,-16,-17,-18,-19,42,59,]),'R_BRACE':([28,38,52,54,60,61,62,63,64,65,66,67,68,69,70,71,83,88,89,90,91,92,106,116,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[38,-6,-111,-7,-111,91,-111,-29,-34,-35,-36,-37,-38,-39,-40,-41,-8,115,-111,-33,-27,-28,-42,-32,-49,-52,-45,-111,-111,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'IF':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,73,73,73,-34,-35,-36,-37,-38,-39,-40,-41,73,-27,-42,-49,-52,-45,-111,73,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'READ':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,74,74,74,-34,-35,-36,-37,-38,-39,-40,-41,74,-27,-42,-49,-52,-45,-111,74,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'WRITE':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,75,75,75,-34,-35,-36,-37,-38,-39,-40,-41,75,-27,-42,-49,-52,-45,-111,75,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'WHILE':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,76,76,76,-34,-35,-36,-37,-38,-39,-40,-41,76,-27,-42,-49,-52,-45,-111,76,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'FOR':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,77,77,77,-34,-35,-36,-37,-38,-39,-40,-41,77,-27,-42,-49,-52,-45,-111,77,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'RETURN':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,78,78,78,-34,-35,-36,-37,-38,-39,-40,-41,78,-27,-42,-49,-52,-45,-111,78,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'PLOTXY':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,80,80,80,-34,-35,-36,-37,-38,-39,-40,-41,80,-27,-42,-49,-52,-45,-111,80,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'REGRESSION':([38,52,60,62,64,65,66,67,68,69,70,71,89,91,106,236,238,249,287,288,304,306,307,309,310,312,313,315,318,320,321,],[-6,82,82,82,-34,-35,-36,-37,-38,-39,-40,-41,82,-27,-42,-49,-52,-45,-111,82,-134,-48,-135,-59,-43,-44,-46,-57,-47,-136,-58,]),'R_PAR':([41,43,48,50,81,87,104,109,114,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,142,143,144,145,146,152,156,159,160,163,164,171,172,175,176,180,181,183,184,185,186,187,188,189,198,200,201,202,204,207,209,211,213,214,229,230,231,232,233,234,235,239,240,243,244,246,247,248,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,276,277,280,283,284,286,289,290,291,292,293,294,295,296,301,302,311,317,],[44,-111,58,-26,-114,-138,-114,-21,-24,-126,-111,-111,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,197,-127,199,-126,-118,-111,-111,-132,-76,-79,-80,-87,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-50,-128,-109,241,-126,246,-63,-25,250,251,266,267,268,269,270,271,272,-111,-111,-125,281,-140,-126,285,-124,-77,-78,-81,-82,-83,-84,-85,-86,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-51,-53,-56,-54,299,-60,-142,-100,-64,-65,-66,-67,-68,-69,-70,-55,-20,-61,-111,-62,]),'COMMA':([46,47,56,81,87,104,109,112,114,120,121,122,123,124,126,127,128,129,130,131,132,133,134,143,145,146,150,153,154,160,163,164,171,172,175,176,180,181,183,184,185,186,187,188,189,198,200,201,239,240,246,247,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,283,284,286,289,290,291,292,293,294,295,301,302,],[55,-122,-11,-114,-138,-114,-21,-123,156,-111,-111,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-127,-126,-118,205,210,-12,-76,-79,-80,-87,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,237,-128,-109,275,275,-140,-126,-124,-77,-78,-81,-82,-83,-84,-85,-86,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-142,-100,-64,-65,-66,-67,-68,-69,-70,-20,311,]),'L_BRACKET':([47,81,104,],[57,108,108,]),'CTE_INT':([57,93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[85,-113,-71,-72,-73,-74,-75,130,130,-137,-145,-145,130,-113,130,130,-113,130,130,-145,130,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-145,]),'EQUAL':([72,81,103,104,109,301,],[94,-114,148,-114,-21,-20,]),'MULT_EQ':([72,81,109,301,],[95,-114,-21,-20,]),'DIV_EQ':([72,81,109,301,],[96,-114,-21,-20,]),'PLUS_EQ':([72,81,109,301,],[97,-114,-21,-20,]),'MINUS_EQ':([72,81,109,301,],[98,-114,-21,-20,]),'EXP':([81,109,124,126,127,128,129,130,131,132,133,134,146,184,185,186,187,188,189,201,246,250,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,182,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-101,-106,-107,-108,-109,-110,-109,-140,-124,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'MULT':([81,109,123,124,126,127,128,129,130,131,132,133,134,146,181,183,184,185,186,187,188,189,201,246,250,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,177,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'DIV':([81,109,123,124,126,127,128,129,130,131,132,133,134,146,181,183,184,185,186,187,188,189,201,246,250,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,178,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'REMAINDER':([81,109,123,124,126,127,128,129,130,131,132,133,134,146,181,183,184,185,186,187,188,189,201,246,250,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,179,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'PLUS':([81,109,122,123,124,126,127,128,129,130,131,132,133,134,146,176,180,181,183,184,185,186,187,188,189,201,246,250,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,173,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'MINUS':([81,93,94,95,96,97,98,99,101,102,105,108,109,117,118,122,123,124,126,127,128,129,130,131,132,133,134,146,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,176,177,178,179,180,181,182,183,184,185,186,187,188,189,201,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,246,250,262,263,264,265,266,267,268,269,270,271,272,275,283,286,289,290,291,292,293,294,295,298,301,311,],[-114,-113,-71,-72,-73,-74,-75,125,125,-137,-145,-145,-21,125,-113,174,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,125,-113,125,125,-145,125,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-92,-113,-113,-113,-96,-97,-113,-99,-101,-106,-107,-108,-109,-110,-109,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-140,-124,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,125,-60,-100,-64,-65,-66,-67,-68,-69,-70,125,-20,-145,]),'LESS':([81,109,121,122,123,124,126,127,128,129,130,131,132,133,134,146,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,165,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'GREATER':([81,109,121,122,123,124,126,127,128,129,130,131,132,133,134,146,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,166,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'LESS_EQ':([81,109,121,122,123,124,126,127,128,129,130,131,132,133,134,146,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,167,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'GREATER_EQ':([81,109,121,122,123,124,126,127,128,129,130,131,132,133,134,146,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,168,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'EQUIVALENT':([81,109,121,122,123,124,126,127,128,129,130,131,132,133,134,146,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,169,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'DIFFERENT':([81,109,121,122,123,124,126,127,128,129,130,131,132,133,134,146,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,170,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'OR':([81,109,120,121,122,123,124,126,127,128,129,130,131,132,133,134,146,164,171,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,161,-111,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-80,-87,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-81,-82,-83,-84,-85,-86,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'AND':([81,109,120,121,122,123,124,126,127,128,129,130,131,132,133,134,146,164,171,172,175,176,180,181,183,184,185,186,187,188,189,201,246,250,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,283,286,289,290,291,292,293,294,295,301,],[-114,-21,162,-111,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-118,-80,-87,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-109,-140,-124,-81,-82,-83,-84,-85,-86,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'R_BRACKET':([81,85,109,122,123,124,126,127,128,129,130,131,132,133,134,172,175,176,180,181,183,184,185,186,187,188,189,206,245,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,282,283,286,289,290,291,292,293,294,295,301,],[-114,112,-21,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-126,-144,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,301,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'TO':([81,109,122,123,124,126,127,128,129,130,131,132,133,134,172,175,176,180,181,183,184,185,186,187,188,189,242,246,250,260,261,262,263,264,265,266,267,268,269,270,271,272,279,283,286,289,290,291,292,293,294,295,301,],[-114,-21,-111,-111,-111,-102,-103,-104,-105,-115,-116,-117,-118,-119,-88,-91,-92,-96,-97,-99,-101,-106,-107,-108,-109,-110,-129,-140,-124,-89,-90,-93,-94,-95,-98,-147,-147,-147,-147,-147,-147,-147,298,-60,-100,-64,-65,-66,-67,-68,-69,-70,-20,]),'ELSE':([91,287,305,],[-27,-133,314,]),'CTE_FLOAT':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,131,131,-137,-145,-145,131,-113,131,131,-113,131,131,-145,131,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,-145,]),'CTE_CHAR':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,132,132,-137,-145,-145,132,-113,132,132,-113,132,132,-145,132,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,-145,]),'CTE_STRING':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,133,146,-137,-145,-145,133,-113,133,133,-113,133,133,-145,133,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,146,133,-145,]),'CTE_BOOL':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,134,134,-137,-145,-145,134,-113,134,134,-113,134,134,-145,134,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-145,]),'MIN':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,135,135,-137,-145,-145,135,-113,135,135,-113,135,135,-145,135,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,-145,]),'MAX':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,136,136,-137,-145,-145,136,-113,136,136,-113,136,136,-145,136,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,-145,]),'MEAN':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,137,137,-137,-145,-145,137,-113,137,137,-113,137,137,-145,137,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-145,]),'MEDIAN':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,138,138,-137,-145,-145,138,-113,138,138,-113,138,138,-145,138,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-145,]),'MODE':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,139,139,-137,-145,-145,139,-113,139,139,-113,139,139,-145,139,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-145,]),'VARIANCE':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,140,140,-137,-145,-145,140,-113,140,140,-113,140,140,-145,140,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,-145,]),'LEN':([93,94,95,96,97,98,99,101,102,105,108,117,118,125,147,148,149,151,152,158,161,162,165,166,167,168,169,170,173,174,177,178,179,182,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,311,],[-113,-71,-72,-73,-74,-75,141,141,-137,-145,-145,141,-113,141,141,-113,141,141,-145,141,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,-113,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,-145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'np_set_curr_proc':([2,14,30,],[3,27,40,]),'np_GOTO':([4,],[5,]),'programB':([6,],[7,]),'vars':([6,52,],[8,60,]),'programC':([6,8,11,],[9,16,18,]),'function':([6,8,11,],[11,11,11,]),'main':([6,8,11,],[12,12,12,]),'np_prog_end':([7,],[15,]),'func_type':([13,],[19,]),'type':([13,17,43,54,156,],[21,29,49,29,49,]),'varsB':([17,54,],[28,83,]),'np_add_datatype':([20,22,23,24,25,26,],[31,32,33,34,35,36,]),'np_GOTO_END':([27,304,],[37,313,]),'np_set_curr_datatype':([29,],[39,]),'varsC':([42,55,],[45,84,]),'varsD':([42,55,],[46,46,]),'params':([43,156,],[48,211,]),'empty':([43,52,60,62,89,120,121,122,123,124,152,156,239,240,287,288,311,],[50,63,90,63,90,163,171,175,180,183,209,50,276,276,306,63,209,]),'vblock':([44,86,],[51,113,]),'block':([44,86,251,297,314,319,],[53,53,287,307,318,320,]),'np_add_var':([47,],[56,]),'blockB':([52,62,288,],[61,92,61,]),'statement':([52,60,62,89,288,],[62,89,62,89,62,]),'assign':([52,60,62,89,288,],[64,64,64,64,64,]),'condicional':([52,60,62,89,288,],[65,65,65,65,65,]),'read':([52,60,62,89,288,],[66,66,66,66,66,]),'write':([52,60,62,89,288,],[67,67,67,67,67,]),'loop_cond':([52,60,62,89,288,],[68,68,68,68,68,]),'loop_range':([52,60,62,89,288,],[69,69,69,69,69,]),'return':([52,60,62,89,288,],[70,70,70,70,70,]),'void_func':([52,60,62,89,288,],[71,71,71,71,71,]),'var':([52,60,62,77,89,99,100,101,117,125,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,237,275,288,298,],[72,72,72,103,72,127,143,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,143,127,72,127,]),'func_call':([52,60,62,89,99,101,117,125,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,288,298,],[79,79,79,79,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,79,128,]),'np_set_quad_start':([58,],[86,]),'vblockB':([60,89,],[88,116,]),'oper_assign':([72,],[93,]),'np_push_operand':([81,104,],[109,109,]),'np_ERA':([81,],[110,]),'np_add_param':([87,],[114,]),'np_push_operator':([93,118,148,161,162,165,166,167,168,169,170,173,174,177,178,179,182,],[117,158,203,215,216,217,218,219,220,221,222,223,224,225,226,227,228,]),'expression':([99,101,117,147,158,215,216,275,],[119,145,157,202,213,252,253,145,]),'logic':([99,101,117,147,158,215,216,275,],[120,120,120,120,120,120,120,120,]),'exp':([99,101,117,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,275,298,],[121,121,121,121,204,206,121,242,247,121,121,254,255,256,257,258,259,260,261,121,308,]),'term':([99,101,117,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,275,298,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,262,263,264,122,122,]),'exponent':([99,101,117,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,265,123,123,]),'factor':([99,101,117,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'var_cte':([99,101,117,125,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,],[126,126,126,184,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'def_func':([99,101,117,125,147,149,151,158,203,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,275,298,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'read2':([100,237,],[142,273,]),'writeB':([101,275,],[144,296,]),'np_CHECKPOINT':([102,],[147,]),'np_stop':([105,108,152,311,],[149,151,208,208,]),'np_add_arr':([112,],[154,]),'np_ENDFunc':([113,],[155,]),'np_end':([119,145,157,204,206,241,247,308,],[159,200,212,243,245,278,284,316,]),'expressionB':([120,],[160,]),'logic2':([121,],[164,]),'exp2':([122,],[172,]),'term2':([123,],[176,]),'exponentB':([124,],[181,]),'np_push_cte_int':([130,],[185,]),'np_push_cte_float':([131,],[186,]),'np_push_cte_char':([132,],[187,]),'np_push_cte_str':([133,146,],[188,201,]),'np_push_cte_bool':([134,],[189,]),'np_read':([143,],[198,]),'func_call_arguments':([152,311,],[207,317,]),'np_GOTOF':([159,278,],[214,297,]),'np_write':([200,201,],[239,240,]),'writeC':([239,240,],[274,277,]),'np_set_VC':([242,],[279,]),'np_set_return':([243,],[280,]),'np_arr_end':([245,],[282,]),'np_GOSUB':([246,],[283,]),'np_rpar':([250,],[286,]),'np_def_func_1param':([266,267,268,269,270,271,272,],[289,290,291,292,293,294,295,]),'np_def_func_2param':([281,285,],[300,303,]),'np_param':([284,],[302,]),'cond2':([287,],[304,]),'np_GOTO_ELSE':([287,],[305,]),'np_GOTO_WHILE':([307,],[315,]),'np_comp_VC_VF':([316,],[319,]),'np_GOTO_FOR':([320,],[321,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end','program',7,'p_program','parser.py',25),
  ('programB -> vars programC','programB',2,'p_program','parser.py',27),
  ('programB -> programC','programB',1,'p_program','parser.py',28),
  ('programC -> function programC','programC',2,'p_program','parser.py',30),
  ('programC -> main','programC',1,'p_program','parser.py',31),
  ('vars -> VARS L_BRACE varsB R_BRACE','vars',4,'p_vars','parser.py',36),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON','varsB',5,'p_vars','parser.py',38),
  ('varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB','varsB',6,'p_vars','parser.py',39),
  ('varsC -> varsD','varsC',1,'p_vars','parser.py',41),
  ('varsC -> varsD COMMA varsC','varsC',3,'p_vars','parser.py',42),
  ('varsD -> ID np_add_var','varsD',2,'p_vars','parser.py',44),
  ('varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr','varsD',5,'p_vars','parser.py',45),
  ('function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc','function',10,'p_function','parser.py',51),
  ('main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock','main',6,'p_main','parser.py',57),
  ('type -> INT np_add_datatype','type',2,'p_type','parser.py',63),
  ('type -> FLOAT np_add_datatype','type',2,'p_type','parser.py',64),
  ('type -> BOOL np_add_datatype','type',2,'p_type','parser.py',65),
  ('type -> CHAR np_add_datatype','type',2,'p_type','parser.py',66),
  ('type -> STRING np_add_datatype','type',2,'p_type','parser.py',67),
  ('var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET','var',7,'p_var','parser.py',74),
  ('var -> ID np_push_operand','var',2,'p_var','parser.py',75),
  ('func_type -> VOID np_add_datatype','func_type',2,'p_func_type','parser.py',82),
  ('func_type -> type','func_type',1,'p_func_type','parser.py',83),
  ('params -> type COLON ID np_add_param','params',4,'p_params','parser.py',89),
  ('params -> type COLON ID np_add_param COMMA params','params',6,'p_params','parser.py',90),
  ('params -> empty','params',1,'p_params','parser.py',91),
  ('block -> L_BRACE blockB R_BRACE','block',3,'p_block','parser.py',96),
  ('blockB -> statement blockB','blockB',2,'p_block','parser.py',98),
  ('blockB -> empty','blockB',1,'p_block','parser.py',99),
  ('vblock -> L_BRACE vars vblockB R_BRACE','vblock',4,'p_vblock','parser.py',105),
  ('vblock -> block','vblock',1,'p_vblock','parser.py',106),
  ('vblockB -> statement vblockB','vblockB',2,'p_vblock','parser.py',108),
  ('vblockB -> empty','vblockB',1,'p_vblock','parser.py',109),
  ('statement -> assign','statement',1,'p_statement','parser.py',114),
  ('statement -> condicional','statement',1,'p_statement','parser.py',115),
  ('statement -> read','statement',1,'p_statement','parser.py',116),
  ('statement -> write','statement',1,'p_statement','parser.py',117),
  ('statement -> loop_cond','statement',1,'p_statement','parser.py',118),
  ('statement -> loop_range','statement',1,'p_statement','parser.py',119),
  ('statement -> return','statement',1,'p_statement','parser.py',120),
  ('statement -> void_func','statement',1,'p_statement','parser.py',121),
  ('void_func -> func_call SEMICOLON','void_func',2,'p_void_func','parser.py',127),
  ('void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON','void_func',8,'p_void_func','parser.py',128),
  ('void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON','void_func',8,'p_void_func','parser.py',129),
  ('assign -> var oper_assign np_push_operator expression np_end SEMICOLON','assign',6,'p_assign','parser.py',135),
  ('condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END','condicional',9,'p_condicional','parser.py',141),
  ('cond2 -> np_GOTO_ELSE ELSE block','cond2',3,'p_condicional','parser.py',143),
  ('cond2 -> empty','cond2',1,'p_condicional','parser.py',144),
  ('read -> READ L_PAR read2 R_PAR SEMICOLON','read',5,'p_read','parser.py',150),
  ('read2 -> var np_read','read2',2,'p_read','parser.py',152),
  ('read2 -> var np_read COMMA read2','read2',4,'p_read','parser.py',153),
  ('write -> WRITE L_PAR writeB R_PAR SEMICOLON','write',5,'p_write','parser.py',159),
  ('writeB -> expression np_end np_write writeC','writeB',4,'p_write','parser.py',161),
  ('writeB -> CTE_STRING np_push_cte_str np_write writeC','writeB',4,'p_write','parser.py',162),
  ('writeC -> COMMA writeB','writeC',2,'p_write','parser.py',164),
  ('writeC -> empty','writeC',1,'p_write','parser.py',165),
  ('loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE','loop_cond',9,'p_loop_cond','parser.py',170),
  ('loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR','loop_range',12,'p_loop_range','parser.py',176),
  ('return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON','return',8,'p_return','parser.py',182),
  ('func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB','func_call',6,'p_func_call','parser.py',188),
  ('func_call_arguments -> np_stop exp np_end np_param','func_call_arguments',4,'p_func_call_arguments','parser.py',193),
  ('func_call_arguments -> np_stop exp np_end np_param COMMA func_call_arguments','func_call_arguments',6,'p_func_call_arguments','parser.py',194),
  ('func_call_arguments -> empty','func_call_arguments',1,'p_func_call_arguments','parser.py',195),
  ('def_func -> MIN L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',200),
  ('def_func -> MAX L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',201),
  ('def_func -> MEAN L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',202),
  ('def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',203),
  ('def_func -> MODE L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',204),
  ('def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',205),
  ('def_func -> LEN L_PAR ID R_PAR np_def_func_1param','def_func',5,'p_def_func','parser.py',206),
  ('oper_assign -> EQUAL','oper_assign',1,'p_oper_assign','parser.py',211),
  ('oper_assign -> MULT_EQ','oper_assign',1,'p_oper_assign','parser.py',212),
  ('oper_assign -> DIV_EQ','oper_assign',1,'p_oper_assign','parser.py',213),
  ('oper_assign -> PLUS_EQ','oper_assign',1,'p_oper_assign','parser.py',214),
  ('oper_assign -> MINUS_EQ','oper_assign',1,'p_oper_assign','parser.py',215),
  ('expression -> logic expressionB','expression',2,'p_expression','parser.py',221),
  ('expressionB -> OR np_push_operator expression','expressionB',3,'p_expression','parser.py',223),
  ('expressionB -> AND np_push_operator expression','expressionB',3,'p_expression','parser.py',224),
  ('expressionB -> empty','expressionB',1,'p_expression','parser.py',225),
  ('logic -> exp logic2','logic',2,'p_logic','parser.py',230),
  ('logic2 -> LESS np_push_operator exp','logic2',3,'p_logic','parser.py',232),
  ('logic2 -> GREATER np_push_operator exp','logic2',3,'p_logic','parser.py',233),
  ('logic2 -> LESS_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',234),
  ('logic2 -> GREATER_EQ np_push_operator exp','logic2',3,'p_logic','parser.py',235),
  ('logic2 -> EQUIVALENT np_push_operator exp','logic2',3,'p_logic','parser.py',236),
  ('logic2 -> DIFFERENT np_push_operator exp','logic2',3,'p_logic','parser.py',237),
  ('logic2 -> empty','logic2',1,'p_logic','parser.py',238),
  ('exp -> term exp2','exp',2,'p_exp','parser.py',244),
  ('exp2 -> PLUS np_push_operator exp','exp2',3,'p_exp','parser.py',246),
  ('exp2 -> MINUS np_push_operator exp','exp2',3,'p_exp','parser.py',247),
  ('exp2 -> empty','exp2',1,'p_exp','parser.py',248),
  ('term -> exponent term2','term',2,'p_term','parser.py',253),
  ('term2 -> MULT np_push_operator term','term2',3,'p_term','parser.py',255),
  ('term2 -> DIV np_push_operator term','term2',3,'p_term','parser.py',256),
  ('term2 -> REMAINDER np_push_operator term','term2',3,'p_term','parser.py',257),
  ('term2 -> empty','term2',1,'p_term','parser.py',258),
  ('exponent -> factor exponentB','exponent',2,'p_exponent','parser.py',263),
  ('exponentB -> EXP np_push_operator exponent','exponentB',3,'p_exponent','parser.py',265),
  ('exponentB -> empty','exponentB',1,'p_exponent','parser.py',266),
  ('factor -> L_PAR np_push_operator expression R_PAR np_rpar','factor',5,'p_factor','parser.py',271),
  ('factor -> MINUS var_cte','factor',2,'p_factor','parser.py',272),
  ('factor -> var_cte','factor',1,'p_factor','parser.py',273),
  ('var_cte -> var','var_cte',1,'p_var_cte','parser.py',278),
  ('var_cte -> func_call','var_cte',1,'p_var_cte','parser.py',279),
  ('var_cte -> def_func','var_cte',1,'p_var_cte','parser.py',280),
  ('var_cte -> CTE_INT np_push_cte_int','var_cte',2,'p_var_cte','parser.py',281),
  ('var_cte -> CTE_FLOAT np_push_cte_float','var_cte',2,'p_var_cte','parser.py',282),
  ('var_cte -> CTE_CHAR np_push_cte_char','var_cte',2,'p_var_cte','parser.py',283),
  ('var_cte -> CTE_STRING np_push_cte_str','var_cte',2,'p_var_cte','parser.py',284),
  ('var_cte -> CTE_BOOL np_push_cte_bool','var_cte',2,'p_var_cte','parser.py',285),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',307),
  ('np_set_curr_proc -> <empty>','np_set_curr_proc',0,'p_np_set_curr_proc','parser.py',352),
  ('np_push_operator -> <empty>','np_push_operator',0,'p_np_push_operator','parser.py',374),
  ('np_push_operand -> <empty>','np_push_operand',0,'p_np_push_operand','parser.py',391),
  ('np_push_cte_int -> <empty>','np_push_cte_int',0,'p_np_push_cte_int','parser.py',402),
  ('np_push_cte_float -> <empty>','np_push_cte_float',0,'p_np_push_cte_float','parser.py',413),
  ('np_push_cte_char -> <empty>','np_push_cte_char',0,'p_np_push_cte_char','parser.py',424),
  ('np_push_cte_str -> <empty>','np_push_cte_str',0,'p_np_push_cte_str','parser.py',435),
  ('np_push_cte_bool -> <empty>','np_push_cte_bool',0,'p_np_push_cte_bool','parser.py',446),
  ('np_set_curr_datatype -> <empty>','np_set_curr_datatype',0,'p_np_set_curr_datatype','parser.py',458),
  ('np_add_datatype -> <empty>','np_add_datatype',0,'p_np_add_datatype','parser.py',468),
  ('np_add_var -> <empty>','np_add_var',0,'p_np_add_var','parser.py',483),
  ('np_add_arr -> <empty>','np_add_arr',0,'p_np_add_arr','parser.py',493),
  ('np_rpar -> <empty>','np_rpar',0,'p_np_rpar','parser.py',512),
  ('np_set_return -> <empty>','np_set_return',0,'p_np_set_return','parser.py',524),
  ('np_end -> <empty>','np_end',0,'p_np_end','parser.py',537),
  ('np_read -> <empty>','np_read',0,'p_np_read','parser.py',559),
  ('np_write -> <empty>','np_write',0,'p_np_write','parser.py',570),
  ('np_set_VC -> <empty>','np_set_VC',0,'p_np_set_VC','parser.py',581),
  ('np_comp_VC_VF -> <empty>','np_comp_VC_VF',0,'p_np_comp_VC_VF','parser.py',596),
  ('np_GOTO -> <empty>','np_GOTO',0,'p_np_GOTO','parser.py',614),
  ('np_GOTOF -> <empty>','np_GOTOF',0,'p_np_GOTOF','parser.py',625),
  ('np_GOTO_ELSE -> <empty>','np_GOTO_ELSE',0,'p_np_GOTO_ELSE','parser.py',637),
  ('np_GOTO_END -> <empty>','np_GOTO_END',0,'p_np_GOTO_END','parser.py',652),
  ('np_GOTO_WHILE -> <empty>','np_GOTO_WHILE',0,'p_np_GOTO_WHILE','parser.py',665),
  ('np_GOTO_FOR -> <empty>','np_GOTO_FOR',0,'p_np_GOTO_FOR','parser.py',678),
  ('np_CHECKPOINT -> <empty>','np_CHECKPOINT',0,'p_np_CHECKPOINT','parser.py',699),
  ('np_add_param -> <empty>','np_add_param',0,'p_np_add_param','parser.py',713),
  ('np_set_quad_start -> <empty>','np_set_quad_start',0,'p_np_set_quad_start','parser.py',722),
  ('np_GOSUB -> <empty>','np_GOSUB',0,'p_np_GOSUB','parser.py',731),
  ('np_ERA -> <empty>','np_ERA',0,'p_np_ERA','parser.py',761),
  ('np_param -> <empty>','np_param',0,'p_np_param','parser.py',779),
  ('np_ENDFunc -> <empty>','np_ENDFunc',0,'p_np_ENDFunc','parser.py',791),
  ('np_arr_end -> <empty>','np_arr_end',0,'p_np_arr_end','parser.py',804),
  ('np_stop -> <empty>','np_stop',0,'p_np_stop','parser.py',830),
  ('np_prog_end -> <empty>','np_prog_end',0,'p_np_prog_end','parser.py',837),
  ('np_def_func_1param -> <empty>','np_def_func_1param',0,'p_np_def_func_1param','parser.py',842),
  ('np_def_func_2param -> <empty>','np_def_func_2param',0,'p_np_def_func_2param','parser.py',856),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end
Rule 2     programB -> vars programC
Rule 3     programB -> programC
Rule 4     programC -> function programC
Rule 5     programC -> main
Rule 6     vars -> VARS L_BRACE varsB R_BRACE
Rule 7     varsB -> type np_set_curr_datatype COLON varsC SEMICOLON
Rule 8     varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB
Rule 9     varsC -> varsD
Rule 10    varsC -> varsD COMMA varsC
Rule 11    varsD -> ID np_add_var
Rule 12    varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr
Rule 13    function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc
Rule 14    main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock
Rule 15    type -> INT np_add_datatype
Rule 16    type -> FLOAT np_add_datatype
Rule 17    type -> BOOL np_add_datatype
Rule 18    type -> CHAR np_add_datatype
Rule 19    type -> STRING np_add_datatype
Rule 20    var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
Rule 21    var -> ID np_push_operand
Rule 22    func_type -> VOID np_add_datatype
Rule 23    func_type -> type
Rule 24    params -> type COLON ID np_add_param
Rule 25    params -> type COLON ID np_add_param COMMA params
Rule 26    params -> empty
Rule 27    block -> L_BRACE blockB R_BRACE
Rule 28    blockB -> statement blockB
Rule 29    blockB -> empty
Rule 30    vblock -> L_BRACE vars vblockB R_BRACE
Rule 31    vblock -> block
Rule 32    vblockB -> statement vblockB
Rule 33    vblockB -> empty
Rule 34    statement -> assign
Rule 35    statement -> condicional
Rule 36    statement -> read
Rule 37    statement -> write
Rule 38    statement -> loop_cond
Rule 39    statement -> loop_range
Rule 40    statement -> return
Rule 41    statement -> void_func
Rule 42    void_func -> func_call SEMICOLON
Rule 43    void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
Rule 44    void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
Rule 45    assign -> var oper_assign np_push_operator expression np_end SEMICOLON
Rule 46    condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
Rule 47    cond2 -> np_GOTO_ELSE ELSE block
Rule 48    cond2 -> empty
Rule 49    read -> READ L_PAR read2 R_PAR SEMICOLON
Rule 50    read2 -> var np_read
Rule 51    read2 -> var np_read COMMA read2
Rule 52    write -> WRITE L_PAR writeB R_PAR SEMICOLON
Rule 53    writeB -> expression np_end np_write writeC
Rule 54    writeB -> CTE_STRING np_push_cte_str np_write writeC
Rule 55    writeC -> COMMA writeB
Rule 56    writeC -> empty
Rule 57    loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
Rule 58    loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
Rule 59    return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON
Rule 60    func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
Rule 61    func_call_arguments -> np_stop exp np_end np_param
Rule 62    func_call_arguments -> np_stop exp np_end np_param COMMA func_call_arguments
Rule 63    func_call_arguments -> empty
Rule 64    def_func -> MIN L_PAR ID R_PAR np_def_func_1param
Rule 65    def_func -> MAX L_PAR ID R_PAR np_def_func_1param
Rule 66    def_func -> MEAN L_PAR ID R_PAR np_def_func_1param
Rule 67    def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param
Rule 68    def_func -> MODE L_PAR ID R_PAR np_def_func_1param
Rule 69    def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param
Rule 70    def_func -> LEN L_PAR ID R_PAR np_def_func_1param
Rule 71    oper_assign -> EQUAL
Rule 72    oper_assign -> MULT_EQ
Rule 73    oper_assign -> DIV_EQ
Rule 74    oper_assign -> PLUS_EQ
Rule 75    oper_assign -> MINUS_EQ
Rule 76    expression -> logic expressionB
Rule 77    expressionB -> OR np_push_operator expression
Rule 78    expressionB -> AND np_push_operator expression
Rule 79    expressionB -> empty
Rule 80    logic -> exp logic2
Rule 81    logic2 -> LESS np_push_operator exp
Rule 82    logic2 -> GREATER np_push_operator exp
Rule 83    logic2 -> LESS_EQ np_push_operator exp
Rule 84    logic2 -> GREATER_EQ np_push_operator exp
Rule 85    logic2 -> EQUIVALENT np_push_operator exp
Rule 86    logic2 -> DIFFERENT np_push_operator exp
Rule 87    logic2 -> empty
Rule 88    exp -> term exp2
Rule 89    exp2 -> PLUS np_push_operator exp
Rule 90    exp2 -> MINUS np_push_operator exp
Rule 91    exp2 -> empty
Rule 92    term -> exponent term2
Rule 93    term2 -> MULT np_push_operator term
Rule 94    term2 -> DIV np_push_operator term
Rule 95    term2 -> REMAINDER np_push_operator term
Rule 96    term2 -> empty
Rule 97    exponent -> factor exponentB
Rule 98    exponentB -> EXP np_push_operator exponent
Rule 99    exponentB -> empty
Rule 100   factor -> L_PAR np_push_operator expression R_PAR np_rpar
Rule 101   factor -> MINUS var_cte
Rule 102   factor -> var_cte
Rule 103   var_cte -> var
Rule 104   var_cte -> func_call
Rule 105   var_cte -> def_func
Rule 106   var_cte -> CTE_INT np_push_cte_int
Rule 107   var_cte -> CTE_FLOAT np_push_cte_float
Rule 108   var_cte -> CTE_CHAR np_push_cte_char
Rule 109   var_cte -> CTE_STRING np_push_cte_str
Rule 110   var_cte -> CTE_BOOL np_push_cte_bool
Rule 111   empty -> <empty>
Rule 112   np_set_curr_proc -> <empty>
Rule 113   np_push_operator -> <empty>
Rule 114   np_push_operand -> <empty>
Rule 115   np_push_cte_int -> <empty>
Rule 116   np_push_cte_float -> <empty>
Rule 117   np_push_cte_char -> <empty>
Rule 118   np_push_cte_str -> <empty>
Rule 119   np_push_cte_bool -> <empty>
Rule 120   np_set_curr_datatype -> <empty>
Rule 121   np_add_datatype -> <empty>
Rule 122   np_add_var -> <empty>
Rule 123   np_add_arr -> <empty>
Rule 124   np_rpar -> <empty>
Rule 125   np_set_return -> <empty>
Rule 126   np_end -> <empty>
Rule 127   np_read -> <empty>
Rule 128   np_write -> <empty>
Rule 129   np_set_VC -> <empty>
Rule 130   np_comp_VC_VF -> <empty>
Rule 131   np_GOTO -> <empty>
Rule 132   np_GOTOF -> <empty>
Rule 133   np_GOTO_ELSE -> <empty>
Rule 134   np_GOTO_END -> <empty>
Rule 135   np_GOTO_WHILE -> <empty>
Rule 136   np_GOTO_FOR -> <empty>
Rule 137   np_CHECKPOINT -> <empty>
Rule 138   np_add_param -> <empty>
Rule 139   np_set_quad_start -> <empty>
Rule 140   np_GOSUB -> <empty>
Rule 141   np_ERA -> <empty>
Rule 142   np_param -> <empty>
Rule 143   np_ENDFunc -> <empty>
Rule 144   np_arr_end -> <empty>
Rule 145   np_stop -> <empty>
Rule 146   np_prog_end -> <empty>
Rule 147   np_def_func_1param -> <empty>
Rule 148   np_def_func_2param -> <empty>

Terminals, with rules where they appear

AND                  : 78
BOOL                 : 17
CHAR                 : 18
COLON                : 7 8 24 25
COMMA                : 10 25 43 44 51 55 62
CTE_BOOL             : 110
CTE_CHAR             : 108
CTE_FLOAT            : 107
CTE_INT              : 12 106
CTE_STRING           : 54 109
DIFFERENT            : 86
DIV                  : 94
DIV_EQ               : 73
ELSE                 : 47
EQUAL                : 58 71
EQUIVALENT           : 85
EXP                  : 98
FLOAT                : 16
FOR                  : 58
FUNCTION             : 13
GREATER              : 82
GREATER_EQ           : 84
ID                   : 1 11 12 13 20 21 24 25 43 43 44 44 60 64 65 66 67 68 69 70
IF                   : 46
INT                  : 15
LEN                  : 70
LESS                 : 81
LESS_EQ              : 83
L_BRACE              : 6 27 30
L_BRACKET            : 12 20
L_PAR                : 13 14 43 44 46 49 52 57 59 60 64 65 66 67 68 69 70 100
MAIN                 : 14
MAX                  : 65
MEAN                 : 66
MEDIAN               : 67
MIN                  : 64
MINUS                : 90 101
MINUS_EQ             : 75
MODE                 : 68
MULT                 : 93
MULT_EQ              : 72
OR                   : 77
PLOTXY               : 43
PLUS                 : 89
PLUS_EQ              : 74
PROGRAM              : 1
READ                 : 49
REGRESSION           : 44
REMAINDER            : 95
RETURN               : 59
R_BRACE              : 6 27 30
R_BRACKET            : 12 20
R_PAR                : 13 14 43 44 46 49 52 57 59 60 64 65 66 67 68 69 70 100
SEMICOLON            : 1 7 8 42 43 44 45 49 52 59
STRING               : 19
TO                   : 58
VARIANCE             : 69
VARS                 : 6
VOID                 : 22
WHILE                : 57
WRITE                : 52
error                : 

Nonterminals, with rules where they appear

assign               : 34
block                : 31 46 47 57 58
blockB               : 27 28
cond2                : 46
condicional          : 35
def_func             : 105
empty                : 26 29 33 48 56 63 79 87 91 96 99
exp                  : 20 58 58 59 61 62 80 81 82 83 84 85 86 89 90
exp2                 : 88
exponent             : 92 98
exponentB            : 97
expression           : 45 46 53 57 77 78 100
expressionB          : 76
factor               : 97
func_call            : 42 104
func_call_arguments  : 60 62
func_type            : 13
function             : 4
logic                : 76
logic2               : 80
loop_cond            : 38
loop_range           : 39
main                 : 5
np_CHECKPOINT        : 57
np_ENDFunc           : 13
np_ERA               : 60
np_GOSUB             : 60
np_GOTO              : 1
np_GOTOF             : 46 57
np_GOTO_ELSE         : 47
np_GOTO_END          : 14 46
np_GOTO_FOR          : 58
np_GOTO_WHILE        : 57
np_add_arr           : 12
np_add_datatype      : 15 16 17 18 19 22
np_add_param         : 24 25
np_add_var           : 11
np_arr_end           : 20
np_comp_VC_VF        : 58
np_def_func_1param   : 64 65 66 67 68 69 70
np_def_func_2param   : 43 44
np_end               : 20 45 46 53 57 58 59 61 62
np_param             : 61 62
np_prog_end          : 1
np_push_cte_bool     : 110
np_push_cte_char     : 108
np_push_cte_float    : 107
np_push_cte_int      : 106
np_push_cte_str      : 54 109
np_push_operand      : 21
np_push_operator     : 45 58 77 78 81 82 83 84 85 86 89 90 93 94 95 98 100
np_read              : 50 51
np_rpar              : 100
np_set_VC            : 58
np_set_curr_datatype : 7 8
np_set_curr_proc     : 1 13 14
np_set_quad_start    : 13
np_set_return        : 59
np_stop              : 20 59 61 62
np_write             : 53 54
oper_assign          : 45
params               : 13 25
program              : 0
programB             : 1
programC             : 2 3 4
read                 : 36
read2                : 49 51
return               : 40
statement            : 28 32
term                 : 88 93 94 95
term2                : 92
type                 : 7 8 23 24 25
var                  : 45 50 51 58 103
var_cte              : 101 102
vars                 : 2 30
varsB                : 6 8
varsC                : 7 8 10
varsD                : 9 10
vblock               : 13 14
vblockB              : 30 32
void_func            : 41
write                : 37
writeB               : 52 55
writeC               : 53 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end
    (112) np_set_curr_proc -> .

    ID              reduce using rule 112 (np_set_curr_proc -> .)

    np_set_curr_proc               shift and go to state 3

state 3

    (1) program -> PROGRAM np_set_curr_proc . ID np_GOTO SEMICOLON programB np_prog_end

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM np_set_curr_proc ID . np_GOTO SEMICOLON programB np_prog_end
    (131) np_GOTO -> .

    SEMICOLON       reduce using rule 131 (np_GOTO -> .)

    np_GOTO                        shift and go to state 5

state 5

    (1) program -> PROGRAM np_set_curr_proc ID np_GOTO . SEMICOLON programB np_prog_end

    SEMICOLON       shift and go to state 6


state 6

    (1) program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON . programB np_prog_end
    (2) programB -> . vars programC
    (3) programB -> . programC
    (6) vars -> . VARS L_BRACE varsB R_BRACE
    (4) programC -> . function programC
    (5) programC -> . main
    (13) function -> . FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc
    (14) main -> . MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock

    VARS            shift and go to state 10
    FUNCTION        shift and go to state 13
    MAIN            shift and go to state 14

    programB                       shift and go to state 7
    vars                           shift and go to state 8
    programC                       shift and go to state 9
    function                       shift and go to state 11
    main                           shift and go to state 12

state 7

    (1) program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB . np_prog_end
    (146) np_prog_end -> .

    $end            reduce using rule 146 (np_prog_end -> .)

    np_prog_end                    shift and go to state 15

state 8

    (2) programB -> vars . programC
    (4) programC -> . function programC
    (5) programC -> . main
    (13) function -> . FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc
    (14) main -> . MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock

    FUNCTION        shift and go to state 13
    MAIN            shift and go to state 14

    programC                       shift and go to state 16
    function                       shift and go to state 11
    main                           shift and go to state 12

state 9

    (3) programB -> programC .

    $end            reduce using rule 3 (programB -> programC .)


state 10

    (6) vars -> VARS . L_BRACE varsB R_BRACE

    L_BRACE         shift and go to state 17


state 11

    (4) programC -> function . programC
    (4) programC -> . function programC
    (5) programC -> . main
    (13) function -> . FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc
    (14) main -> . MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock

    FUNCTION        shift and go to state 13
    MAIN            shift and go to state 14

    function                       shift and go to state 11
    programC                       shift and go to state 18
    main                           shift and go to state 12

state 12

    (5) programC -> main .

    $end            reduce using rule 5 (programC -> main .)


state 13

    (13) function -> FUNCTION . func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc
    (22) func_type -> . VOID np_add_datatype
    (23) func_type -> . type
    (15) type -> . INT np_add_datatype
    (16) type -> . FLOAT np_add_datatype
    (17) type -> . BOOL np_add_datatype
    (18) type -> . CHAR np_add_datatype
    (19) type -> . STRING np_add_datatype

    VOID            shift and go to state 20
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    CHAR            shift and go to state 25
    STRING          shift and go to state 26

    func_type                      shift and go to state 19
    type                           shift and go to state 21

state 14

    (14) main -> MAIN . np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock
    (112) np_set_curr_proc -> .

    L_PAR           reduce using rule 112 (np_set_curr_proc -> .)

    np_set_curr_proc               shift and go to state 27

state 15

    (1) program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end .

    $end            reduce using rule 1 (program -> PROGRAM np_set_curr_proc ID np_GOTO SEMICOLON programB np_prog_end .)


state 16

    (2) programB -> vars programC .

    $end            reduce using rule 2 (programB -> vars programC .)


state 17

    (6) vars -> VARS L_BRACE . varsB R_BRACE
    (7) varsB -> . type np_set_curr_datatype COLON varsC SEMICOLON
    (8) varsB -> . type np_set_curr_datatype COLON varsC SEMICOLON varsB
    (15) type -> . INT np_add_datatype
    (16) type -> . FLOAT np_add_datatype
    (17) type -> . BOOL np_add_datatype
    (18) type -> . CHAR np_add_datatype
    (19) type -> . STRING np_add_datatype

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    CHAR            shift and go to state 25
    STRING          shift and go to state 26

    varsB                          shift and go to state 28
    type                           shift and go to state 29

state 18

    (4) programC -> function programC .

    $end            reduce using rule 4 (programC -> function programC .)


state 19

    (13) function -> FUNCTION func_type . ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc

    ID              shift and go to state 30


state 20

    (22) func_type -> VOID . np_add_datatype
    (121) np_add_datatype -> .

    ID              reduce using rule 121 (np_add_datatype -> .)

    np_add_datatype                shift and go to state 31

state 21

    (23) func_type -> type .

    ID              reduce using rule 23 (func_type -> type .)


state 22

    (15) type -> INT . np_add_datatype
    (121) np_add_datatype -> .

    ID              reduce using rule 121 (np_add_datatype -> .)
    COLON           reduce using rule 121 (np_add_datatype -> .)

    np_add_datatype                shift and go to state 32

state 23

    (16) type -> FLOAT . np_add_datatype
    (121) np_add_datatype -> .

    ID              reduce using rule 121 (np_add_datatype -> .)
    COLON           reduce using rule 121 (np_add_datatype -> .)

    np_add_datatype                shift and go to state 33

state 24

    (17) type -> BOOL . np_add_datatype
    (121) np_add_datatype -> .

    ID              reduce using rule 121 (np_add_datatype -> .)
    COLON           reduce using rule 121 (np_add_datatype -> .)

    np_add_datatype                shift and go to state 34

state 25

    (18) type -> CHAR . np_add_datatype
    (121) np_add_datatype -> .

    ID              reduce using rule 121 (np_add_datatype -> .)
    COLON           reduce using rule 121 (np_add_datatype -> .)

    np_add_datatype                shift and go to state 35

state 26

    (19) type -> STRING . np_add_datatype
    (121) np_add_datatype -> .

    ID              reduce using rule 121 (np_add_datatype -> .)
    COLON           reduce using rule 121 (np_add_datatype -> .)

    np_add_datatype                shift and go to state 36

state 27

    (14) main -> MAIN np_set_curr_proc . np_GOTO_END L_PAR R_PAR vblock
    (134) np_GOTO_END -> .

    L_PAR           reduce using rule 134 (np_GOTO_END -> .)

    np_GOTO_END                    shift and go to state 37

state 28

    (6) vars -> VARS L_BRACE varsB . R_BRACE

    R_BRACE         shift and go to state 38


state 29

    (7) varsB -> type . np_set_curr_datatype COLON varsC SEMICOLON
    (8) varsB -> type . np_set_curr_datatype COLON varsC SEMICOLON varsB
    (120) np_set_curr_datatype -> .

    COLON           reduce using rule 120 (np_set_curr_datatype -> .)

    np_set_curr_datatype           shift and go to state 39

state 30

    (13) function -> FUNCTION func_type ID . np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc
    (112) np_set_curr_proc -> .

    L_PAR           reduce using rule 112 (np_set_curr_proc -> .)

    np_set_curr_proc               shift and go to state 40

state 31

    (22) func_type -> VOID np_add_datatype .

    ID              reduce using rule 22 (func_type -> VOID np_add_datatype .)


state 32

    (15) type -> INT np_add_datatype .

    ID              reduce using rule 15 (type -> INT np_add_datatype .)
    COLON           reduce using rule 15 (type -> INT np_add_datatype .)


state 33

    (16) type -> FLOAT np_add_datatype .

    ID              reduce using rule 16 (type -> FLOAT np_add_datatype .)
    COLON           reduce using rule 16 (type -> FLOAT np_add_datatype .)


state 34

    (17) type -> BOOL np_add_datatype .

    ID              reduce using rule 17 (type -> BOOL np_add_datatype .)
    COLON           reduce using rule 17 (type -> BOOL np_add_datatype .)


state 35

    (18) type -> CHAR np_add_datatype .

    ID              reduce using rule 18 (type -> CHAR np_add_datatype .)
    COLON           reduce using rule 18 (type -> CHAR np_add_datatype .)


state 36

    (19) type -> STRING np_add_datatype .

    ID              reduce using rule 19 (type -> STRING np_add_datatype .)
    COLON           reduce using rule 19 (type -> STRING np_add_datatype .)


state 37

    (14) main -> MAIN np_set_curr_proc np_GOTO_END . L_PAR R_PAR vblock

    L_PAR           shift and go to state 41


state 38

    (6) vars -> VARS L_BRACE varsB R_BRACE .

    FUNCTION        reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    MAIN            reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    IF              reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    READ            reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    WRITE           reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    WHILE           reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    FOR             reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    RETURN          reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    PLOTXY          reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    REGRESSION      reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    ID              reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)
    R_BRACE         reduce using rule 6 (vars -> VARS L_BRACE varsB R_BRACE .)


state 39

    (7) varsB -> type np_set_curr_datatype . COLON varsC SEMICOLON
    (8) varsB -> type np_set_curr_datatype . COLON varsC SEMICOLON varsB

    COLON           shift and go to state 42


state 40

    (13) function -> FUNCTION func_type ID np_set_curr_proc . L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc

    L_PAR           shift and go to state 43


state 41

    (14) main -> MAIN np_set_curr_proc np_GOTO_END L_PAR . R_PAR vblock

    R_PAR           shift and go to state 44


state 42

    (7) varsB -> type np_set_curr_datatype COLON . varsC SEMICOLON
    (8) varsB -> type np_set_curr_datatype COLON . varsC SEMICOLON varsB
    (9) varsC -> . varsD
    (10) varsC -> . varsD COMMA varsC
    (11) varsD -> . ID np_add_var
    (12) varsD -> . ID L_BRACKET CTE_INT R_BRACKET np_add_arr

    ID              shift and go to state 47

    varsC                          shift and go to state 45
    varsD                          shift and go to state 46

state 43

    (13) function -> FUNCTION func_type ID np_set_curr_proc L_PAR . params R_PAR np_set_quad_start vblock np_ENDFunc
    (24) params -> . type COLON ID np_add_param
    (25) params -> . type COLON ID np_add_param COMMA params
    (26) params -> . empty
    (15) type -> . INT np_add_datatype
    (16) type -> . FLOAT np_add_datatype
    (17) type -> . BOOL np_add_datatype
    (18) type -> . CHAR np_add_datatype
    (19) type -> . STRING np_add_datatype
    (111) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    CHAR            shift and go to state 25
    STRING          shift and go to state 26
    R_PAR           reduce using rule 111 (empty -> .)

    params                         shift and go to state 48
    type                           shift and go to state 49
    empty                          shift and go to state 50

state 44

    (14) main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR . vblock
    (30) vblock -> . L_BRACE vars vblockB R_BRACE
    (31) vblock -> . block
    (27) block -> . L_BRACE blockB R_BRACE

    L_BRACE         shift and go to state 52

    vblock                         shift and go to state 51
    block                          shift and go to state 53

state 45

    (7) varsB -> type np_set_curr_datatype COLON varsC . SEMICOLON
    (8) varsB -> type np_set_curr_datatype COLON varsC . SEMICOLON varsB

    SEMICOLON       shift and go to state 54


state 46

    (9) varsC -> varsD .
    (10) varsC -> varsD . COMMA varsC

    SEMICOLON       reduce using rule 9 (varsC -> varsD .)
    COMMA           shift and go to state 55


state 47

    (11) varsD -> ID . np_add_var
    (12) varsD -> ID . L_BRACKET CTE_INT R_BRACKET np_add_arr
    (122) np_add_var -> .

    L_BRACKET       shift and go to state 57
    COMMA           reduce using rule 122 (np_add_var -> .)
    SEMICOLON       reduce using rule 122 (np_add_var -> .)

    np_add_var                     shift and go to state 56

state 48

    (13) function -> FUNCTION func_type ID np_set_curr_proc L_PAR params . R_PAR np_set_quad_start vblock np_ENDFunc

    R_PAR           shift and go to state 58


state 49

    (24) params -> type . COLON ID np_add_param
    (25) params -> type . COLON ID np_add_param COMMA params

    COLON           shift and go to state 59


state 50

    (26) params -> empty .

    R_PAR           reduce using rule 26 (params -> empty .)


state 51

    (14) main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock .

    $end            reduce using rule 14 (main -> MAIN np_set_curr_proc np_GOTO_END L_PAR R_PAR vblock .)


state 52

    (30) vblock -> L_BRACE . vars vblockB R_BRACE
    (27) block -> L_BRACE . blockB R_BRACE
    (6) vars -> . VARS L_BRACE varsB R_BRACE
    (28) blockB -> . statement blockB
    (29) blockB -> . empty
    (34) statement -> . assign
    (35) statement -> . condicional
    (36) statement -> . read
    (37) statement -> . write
    (38) statement -> . loop_cond
    (39) statement -> . loop_range
    (40) statement -> . return
    (41) statement -> . void_func
    (111) empty -> .
    (45) assign -> . var oper_assign np_push_operator expression np_end SEMICOLON
    (46) condicional -> . IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (49) read -> . READ L_PAR read2 R_PAR SEMICOLON
    (52) write -> . WRITE L_PAR writeB R_PAR SEMICOLON
    (57) loop_cond -> . WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (58) loop_range -> . FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (59) return -> . RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON
    (42) void_func -> . func_call SEMICOLON
    (43) void_func -> . PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (44) void_func -> . REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB

    VARS            shift and go to state 10
    R_BRACE         reduce using rule 111 (empty -> .)
    IF              shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75
    WHILE           shift and go to state 76
    FOR             shift and go to state 77
    RETURN          shift and go to state 78
    PLOTXY          shift and go to state 80
    REGRESSION      shift and go to state 82
    ID              shift and go to state 81

    vars                           shift and go to state 60
    blockB                         shift and go to state 61
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condicional                    shift and go to state 65
    read                           shift and go to state 66
    write                          shift and go to state 67
    loop_cond                      shift and go to state 68
    loop_range                     shift and go to state 69
    return                         shift and go to state 70
    void_func                      shift and go to state 71
    var                            shift and go to state 72
    func_call                      shift and go to state 79

state 53

    (31) vblock -> block .

    $end            reduce using rule 31 (vblock -> block .)
    FUNCTION        reduce using rule 31 (vblock -> block .)
    MAIN            reduce using rule 31 (vblock -> block .)


state 54

    (7) varsB -> type np_set_curr_datatype COLON varsC SEMICOLON .
    (8) varsB -> type np_set_curr_datatype COLON varsC SEMICOLON . varsB
    (7) varsB -> . type np_set_curr_datatype COLON varsC SEMICOLON
    (8) varsB -> . type np_set_curr_datatype COLON varsC SEMICOLON varsB
    (15) type -> . INT np_add_datatype
    (16) type -> . FLOAT np_add_datatype
    (17) type -> . BOOL np_add_datatype
    (18) type -> . CHAR np_add_datatype
    (19) type -> . STRING np_add_datatype

    R_BRACE         reduce using rule 7 (varsB -> type np_set_curr_datatype COLON varsC SEMICOLON .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    CHAR            shift and go to state 25
    STRING          shift and go to state 26

    type                           shift and go to state 29
    varsB                          shift and go to state 83

state 55

    (10) varsC -> varsD COMMA . varsC
    (9) varsC -> . varsD
    (10) varsC -> . varsD COMMA varsC
    (11) varsD -> . ID np_add_var
    (12) varsD -> . ID L_BRACKET CTE_INT R_BRACKET np_add_arr

    ID              shift and go to state 47

    varsD                          shift and go to state 46
    varsC                          shift and go to state 84

state 56

    (11) varsD -> ID np_add_var .

    COMMA           reduce using rule 11 (varsD -> ID np_add_var .)
    SEMICOLON       reduce using rule 11 (varsD -> ID np_add_var .)


state 57

    (12) varsD -> ID L_BRACKET . CTE_INT R_BRACKET np_add_arr

    CTE_INT         shift and go to state 85


state 58

    (13) function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR . np_set_quad_start vblock np_ENDFunc
    (139) np_set_quad_start -> .

    L_BRACE         reduce using rule 139 (np_set_quad_start -> .)

    np_set_quad_start              shift and go to state 86

state 59

    (24) params -> type COLON . ID np_add_param
    (25) params -> type COLON . ID np_add_param COMMA params

    ID              shift and go to state 87


state 60

    (30) vblock -> L_BRACE vars . vblockB R_BRACE
    (32) vblockB -> . statement vblockB
    (33) vblockB -> . empty
    (34) statement -> . assign
    (35) statement -> . condicional
    (36) statement -> . read
    (37) statement -> . write
    (38) statement -> . loop_cond
    (39) statement -> . loop_range
    (40) statement -> . return
    (41) statement -> . void_func
    (111) empty -> .
    (45) assign -> . var oper_assign np_push_operator expression np_end SEMICOLON
    (46) condicional -> . IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (49) read -> . READ L_PAR read2 R_PAR SEMICOLON
    (52) write -> . WRITE L_PAR writeB R_PAR SEMICOLON
    (57) loop_cond -> . WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (58) loop_range -> . FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (59) return -> . RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON
    (42) void_func -> . func_call SEMICOLON
    (43) void_func -> . PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (44) void_func -> . REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB

    R_BRACE         reduce using rule 111 (empty -> .)
    IF              shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75
    WHILE           shift and go to state 76
    FOR             shift and go to state 77
    RETURN          shift and go to state 78
    PLOTXY          shift and go to state 80
    REGRESSION      shift and go to state 82
    ID              shift and go to state 81

    vblockB                        shift and go to state 88
    statement                      shift and go to state 89
    empty                          shift and go to state 90
    assign                         shift and go to state 64
    condicional                    shift and go to state 65
    read                           shift and go to state 66
    write                          shift and go to state 67
    loop_cond                      shift and go to state 68
    loop_range                     shift and go to state 69
    return                         shift and go to state 70
    void_func                      shift and go to state 71
    var                            shift and go to state 72
    func_call                      shift and go to state 79

state 61

    (27) block -> L_BRACE blockB . R_BRACE

    R_BRACE         shift and go to state 91


state 62

    (28) blockB -> statement . blockB
    (28) blockB -> . statement blockB
    (29) blockB -> . empty
    (34) statement -> . assign
    (35) statement -> . condicional
    (36) statement -> . read
    (37) statement -> . write
    (38) statement -> . loop_cond
    (39) statement -> . loop_range
    (40) statement -> . return
    (41) statement -> . void_func
    (111) empty -> .
    (45) assign -> . var oper_assign np_push_operator expression np_end SEMICOLON
    (46) condicional -> . IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (49) read -> . READ L_PAR read2 R_PAR SEMICOLON
    (52) write -> . WRITE L_PAR writeB R_PAR SEMICOLON
    (57) loop_cond -> . WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (58) loop_range -> . FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (59) return -> . RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON
    (42) void_func -> . func_call SEMICOLON
    (43) void_func -> . PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (44) void_func -> . REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB

    R_BRACE         reduce using rule 111 (empty -> .)
    IF              shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75
    WHILE           shift and go to state 76
    FOR             shift and go to state 77
    RETURN          shift and go to state 78
    PLOTXY          shift and go to state 80
    REGRESSION      shift and go to state 82
    ID              shift and go to state 81

    statement                      shift and go to state 62
    blockB                         shift and go to state 92
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condicional                    shift and go to state 65
    read                           shift and go to state 66
    write                          shift and go to state 67
    loop_cond                      shift and go to state 68
    loop_range                     shift and go to state 69
    return                         shift and go to state 70
    void_func                      shift and go to state 71
    var                            shift and go to state 72
    func_call                      shift and go to state 79

state 63

    (29) blockB -> empty .

    R_BRACE         reduce using rule 29 (blockB -> empty .)


state 64

    (34) statement -> assign .

    IF              reduce using rule 34 (statement -> assign .)
    READ            reduce using rule 34 (statement -> assign .)
    WRITE           reduce using rule 34 (statement -> assign .)
    WHILE           reduce using rule 34 (statement -> assign .)
    FOR             reduce using rule 34 (statement -> assign .)
    RETURN          reduce using rule 34 (statement -> assign .)
    PLOTXY          reduce using rule 34 (statement -> assign .)
    REGRESSION      reduce using rule 34 (statement -> assign .)
    ID              reduce using rule 34 (statement -> assign .)
    R_BRACE         reduce using rule 34 (statement -> assign .)


state 65

    (35) statement -> condicional .

    IF              reduce using rule 35 (statement -> condicional .)
    READ            reduce using rule 35 (statement -> condicional .)
    WRITE           reduce using rule 35 (statement -> condicional .)
    WHILE           reduce using rule 35 (statement -> condicional .)
    FOR             reduce using rule 35 (statement -> condicional .)
    RETURN          reduce using rule 35 (statement -> condicional .)
    PLOTXY          reduce using rule 35 (statement -> condicional .)
    REGRESSION      reduce using rule 35 (statement -> condicional .)
    ID              reduce using rule 35 (statement -> condicional .)
    R_BRACE         reduce using rule 35 (statement -> condicional .)


state 66

    (36) statement -> read .

    IF              reduce using rule 36 (statement -> read .)
    READ            reduce using rule 36 (statement -> read .)
    WRITE           reduce using rule 36 (statement -> read .)
    WHILE           reduce using rule 36 (statement -> read .)
    FOR             reduce using rule 36 (statement -> read .)
    RETURN          reduce using rule 36 (statement -> read .)
    PLOTXY          reduce using rule 36 (statement -> read .)
    REGRESSION      reduce using rule 36 (statement -> read .)
    ID              reduce using rule 36 (statement -> read .)
    R_BRACE         reduce using rule 36 (statement -> read .)


state 67

    (37) statement -> write .

    IF              reduce using rule 37 (statement -> write .)
    READ            reduce using rule 37 (statement -> write .)
    WRITE           reduce using rule 37 (statement -> write .)
    WHILE           reduce using rule 37 (statement -> write .)
    FOR             reduce using rule 37 (statement -> write .)
    RETURN          reduce using rule 37 (statement -> write .)
    PLOTXY          reduce using rule 37 (statement -> write .)
    REGRESSION      reduce using rule 37 (statement -> write .)
    ID              reduce using rule 37 (statement -> write .)
    R_BRACE         reduce using rule 37 (statement -> write .)


state 68

    (38) statement -> loop_cond .

    IF              reduce using rule 38 (statement -> loop_cond .)
    READ            reduce using rule 38 (statement -> loop_cond .)
    WRITE           reduce using rule 38 (statement -> loop_cond .)
    WHILE           reduce using rule 38 (statement -> loop_cond .)
    FOR             reduce using rule 38 (statement -> loop_cond .)
    RETURN          reduce using rule 38 (statement -> loop_cond .)
    PLOTXY          reduce using rule 38 (statement -> loop_cond .)
    REGRESSION      reduce using rule 38 (statement -> loop_cond .)
    ID              reduce using rule 38 (statement -> loop_cond .)
    R_BRACE         reduce using rule 38 (statement -> loop_cond .)


state 69

    (39) statement -> loop_range .

    IF              reduce using rule 39 (statement -> loop_range .)
    READ            reduce using rule 39 (statement -> loop_range .)
    WRITE           reduce using rule 39 (statement -> loop_range .)
    WHILE           reduce using rule 39 (statement -> loop_range .)
    FOR             reduce using rule 39 (statement -> loop_range .)
    RETURN          reduce using rule 39 (statement -> loop_range .)
    PLOTXY          reduce using rule 39 (statement -> loop_range .)
    REGRESSION      reduce using rule 39 (statement -> loop_range .)
    ID              reduce using rule 39 (statement -> loop_range .)
    R_BRACE         reduce using rule 39 (statement -> loop_range .)


state 70

    (40) statement -> return .

    IF              reduce using rule 40 (statement -> return .)
    READ            reduce using rule 40 (statement -> return .)
    WRITE           reduce using rule 40 (statement -> return .)
    WHILE           reduce using rule 40 (statement -> return .)
    FOR             reduce using rule 40 (statement -> return .)
    RETURN          reduce using rule 40 (statement -> return .)
    PLOTXY          reduce using rule 40 (statement -> return .)
    REGRESSION      reduce using rule 40 (statement -> return .)
    ID              reduce using rule 40 (statement -> return .)
    R_BRACE         reduce using rule 40 (statement -> return .)


state 71

    (41) statement -> void_func .

    IF              reduce using rule 41 (statement -> void_func .)
    READ            reduce using rule 41 (statement -> void_func .)
    WRITE           reduce using rule 41 (statement -> void_func .)
    WHILE           reduce using rule 41 (statement -> void_func .)
    FOR             reduce using rule 41 (statement -> void_func .)
    RETURN          reduce using rule 41 (statement -> void_func .)
    PLOTXY          reduce using rule 41 (statement -> void_func .)
    REGRESSION      reduce using rule 41 (statement -> void_func .)
    ID              reduce using rule 41 (statement -> void_func .)
    R_BRACE         reduce using rule 41 (statement -> void_func .)


state 72

    (45) assign -> var . oper_assign np_push_operator expression np_end SEMICOLON
    (71) oper_assign -> . EQUAL
    (72) oper_assign -> . MULT_EQ
    (73) oper_assign -> . DIV_EQ
    (74) oper_assign -> . PLUS_EQ
    (75) oper_assign -> . MINUS_EQ

    EQUAL           shift and go to state 94
    MULT_EQ         shift and go to state 95
    DIV_EQ          shift and go to state 96
    PLUS_EQ         shift and go to state 97
    MINUS_EQ        shift and go to state 98

    oper_assign                    shift and go to state 93

state 73

    (46) condicional -> IF . L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END

    L_PAR           shift and go to state 99


state 74

    (49) read -> READ . L_PAR read2 R_PAR SEMICOLON

    L_PAR           shift and go to state 100


state 75

    (52) write -> WRITE . L_PAR writeB R_PAR SEMICOLON

    L_PAR           shift and go to state 101


state 76

    (57) loop_cond -> WHILE . L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE

    L_PAR           shift and go to state 102


state 77

    (58) loop_range -> FOR . var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand

    ID              shift and go to state 104

    var                            shift and go to state 103

state 78

    (59) return -> RETURN . L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON

    L_PAR           shift and go to state 105


state 79

    (42) void_func -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 106


state 80

    (43) void_func -> PLOTXY . L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON

    L_PAR           shift and go to state 107


state 81

    (20) var -> ID . L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> ID . np_push_operand
    (60) func_call -> ID . np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (114) np_push_operand -> .
    (141) np_ERA -> .

    L_BRACKET       shift and go to state 108
    EQUAL           reduce using rule 114 (np_push_operand -> .)
    MULT_EQ         reduce using rule 114 (np_push_operand -> .)
    DIV_EQ          reduce using rule 114 (np_push_operand -> .)
    PLUS_EQ         reduce using rule 114 (np_push_operand -> .)
    MINUS_EQ        reduce using rule 114 (np_push_operand -> .)
    EXP             reduce using rule 114 (np_push_operand -> .)
    MULT            reduce using rule 114 (np_push_operand -> .)
    DIV             reduce using rule 114 (np_push_operand -> .)
    REMAINDER       reduce using rule 114 (np_push_operand -> .)
    PLUS            reduce using rule 114 (np_push_operand -> .)
    MINUS           reduce using rule 114 (np_push_operand -> .)
    LESS            reduce using rule 114 (np_push_operand -> .)
    GREATER         reduce using rule 114 (np_push_operand -> .)
    LESS_EQ         reduce using rule 114 (np_push_operand -> .)
    GREATER_EQ      reduce using rule 114 (np_push_operand -> .)
    EQUIVALENT      reduce using rule 114 (np_push_operand -> .)
    DIFFERENT       reduce using rule 114 (np_push_operand -> .)
    OR              reduce using rule 114 (np_push_operand -> .)
    AND             reduce using rule 114 (np_push_operand -> .)
    R_PAR           reduce using rule 114 (np_push_operand -> .)
    COMMA           reduce using rule 114 (np_push_operand -> .)
    SEMICOLON       reduce using rule 114 (np_push_operand -> .)
    R_BRACKET       reduce using rule 114 (np_push_operand -> .)
    TO              reduce using rule 114 (np_push_operand -> .)
    L_BRACE         reduce using rule 114 (np_push_operand -> .)
    L_PAR           reduce using rule 141 (np_ERA -> .)

    np_push_operand                shift and go to state 109
    np_ERA                         shift and go to state 110

state 82

    (44) void_func -> REGRESSION . L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON

    L_PAR           shift and go to state 111


state 83

    (8) varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB .

    R_BRACE         reduce using rule 8 (varsB -> type np_set_curr_datatype COLON varsC SEMICOLON varsB .)


state 84

    (10) varsC -> varsD COMMA varsC .

    SEMICOLON       reduce using rule 10 (varsC -> varsD COMMA varsC .)


state 85

    (12) varsD -> ID L_BRACKET CTE_INT . R_BRACKET np_add_arr

    R_BRACKET       shift and go to state 112


state 86

    (13) function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start . vblock np_ENDFunc
    (30) vblock -> . L_BRACE vars vblockB R_BRACE
    (31) vblock -> . block
    (27) block -> . L_BRACE blockB R_BRACE

    L_BRACE         shift and go to state 52

    vblock                         shift and go to state 113
    block                          shift and go to state 53

state 87

    (24) params -> type COLON ID . np_add_param
    (25) params -> type COLON ID . np_add_param COMMA params
    (138) np_add_param -> .

    COMMA           reduce using rule 138 (np_add_param -> .)
    R_PAR           reduce using rule 138 (np_add_param -> .)

    np_add_param                   shift and go to state 114

state 88

    (30) vblock -> L_BRACE vars vblockB . R_BRACE

    R_BRACE         shift and go to state 115


state 89

    (32) vblockB -> statement . vblockB
    (32) vblockB -> . statement vblockB
    (33) vblockB -> . empty
    (34) statement -> . assign
    (35) statement -> . condicional
    (36) statement -> . read
    (37) statement -> . write
    (38) statement -> . loop_cond
    (39) statement -> . loop_range
    (40) statement -> . return
    (41) statement -> . void_func
    (111) empty -> .
    (45) assign -> . var oper_assign np_push_operator expression np_end SEMICOLON
    (46) condicional -> . IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (49) read -> . READ L_PAR read2 R_PAR SEMICOLON
    (52) write -> . WRITE L_PAR writeB R_PAR SEMICOLON
    (57) loop_cond -> . WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (58) loop_range -> . FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (59) return -> . RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON
    (42) void_func -> . func_call SEMICOLON
    (43) void_func -> . PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (44) void_func -> . REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB

    R_BRACE         reduce using rule 111 (empty -> .)
    IF              shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75
    WHILE           shift and go to state 76
    FOR             shift and go to state 77
    RETURN          shift and go to state 78
    PLOTXY          shift and go to state 80
    REGRESSION      shift and go to state 82
    ID              shift and go to state 81

    statement                      shift and go to state 89
    vblockB                        shift and go to state 116
    empty                          shift and go to state 90
    assign                         shift and go to state 64
    condicional                    shift and go to state 65
    read                           shift and go to state 66
    write                          shift and go to state 67
    loop_cond                      shift and go to state 68
    loop_range                     shift and go to state 69
    return                         shift and go to state 70
    void_func                      shift and go to state 71
    var                            shift and go to state 72
    func_call                      shift and go to state 79

state 90

    (33) vblockB -> empty .

    R_BRACE         reduce using rule 33 (vblockB -> empty .)


state 91

    (27) block -> L_BRACE blockB R_BRACE .

    $end            reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    FUNCTION        reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    MAIN            reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    ELSE            reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    IF              reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    READ            reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    WRITE           reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    WHILE           reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    FOR             reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    RETURN          reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    PLOTXY          reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    REGRESSION      reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    ID              reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)
    R_BRACE         reduce using rule 27 (block -> L_BRACE blockB R_BRACE .)


state 92

    (28) blockB -> statement blockB .

    R_BRACE         reduce using rule 28 (blockB -> statement blockB .)


state 93

    (45) assign -> var oper_assign . np_push_operator expression np_end SEMICOLON
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 117

state 94

    (71) oper_assign -> EQUAL .

    L_PAR           reduce using rule 71 (oper_assign -> EQUAL .)
    MINUS           reduce using rule 71 (oper_assign -> EQUAL .)
    CTE_INT         reduce using rule 71 (oper_assign -> EQUAL .)
    CTE_FLOAT       reduce using rule 71 (oper_assign -> EQUAL .)
    CTE_CHAR        reduce using rule 71 (oper_assign -> EQUAL .)
    CTE_STRING      reduce using rule 71 (oper_assign -> EQUAL .)
    CTE_BOOL        reduce using rule 71 (oper_assign -> EQUAL .)
    ID              reduce using rule 71 (oper_assign -> EQUAL .)
    MIN             reduce using rule 71 (oper_assign -> EQUAL .)
    MAX             reduce using rule 71 (oper_assign -> EQUAL .)
    MEAN            reduce using rule 71 (oper_assign -> EQUAL .)
    MEDIAN          reduce using rule 71 (oper_assign -> EQUAL .)
    MODE            reduce using rule 71 (oper_assign -> EQUAL .)
    VARIANCE        reduce using rule 71 (oper_assign -> EQUAL .)
    LEN             reduce using rule 71 (oper_assign -> EQUAL .)


state 95

    (72) oper_assign -> MULT_EQ .

    L_PAR           reduce using rule 72 (oper_assign -> MULT_EQ .)
    MINUS           reduce using rule 72 (oper_assign -> MULT_EQ .)
    CTE_INT         reduce using rule 72 (oper_assign -> MULT_EQ .)
    CTE_FLOAT       reduce using rule 72 (oper_assign -> MULT_EQ .)
    CTE_CHAR        reduce using rule 72 (oper_assign -> MULT_EQ .)
    CTE_STRING      reduce using rule 72 (oper_assign -> MULT_EQ .)
    CTE_BOOL        reduce using rule 72 (oper_assign -> MULT_EQ .)
    ID              reduce using rule 72 (oper_assign -> MULT_EQ .)
    MIN             reduce using rule 72 (oper_assign -> MULT_EQ .)
    MAX             reduce using rule 72 (oper_assign -> MULT_EQ .)
    MEAN            reduce using rule 72 (oper_assign -> MULT_EQ .)
    MEDIAN          reduce using rule 72 (oper_assign -> MULT_EQ .)
    MODE            reduce using rule 72 (oper_assign -> MULT_EQ .)
    VARIANCE        reduce using rule 72 (oper_assign -> MULT_EQ .)
    LEN             reduce using rule 72 (oper_assign -> MULT_EQ .)


state 96

    (73) oper_assign -> DIV_EQ .

    L_PAR           reduce using rule 73 (oper_assign -> DIV_EQ .)
    MINUS           reduce using rule 73 (oper_assign -> DIV_EQ .)
    CTE_INT         reduce using rule 73 (oper_assign -> DIV_EQ .)
    CTE_FLOAT       reduce using rule 73 (oper_assign -> DIV_EQ .)
    CTE_CHAR        reduce using rule 73 (oper_assign -> DIV_EQ .)
    CTE_STRING      reduce using rule 73 (oper_assign -> DIV_EQ .)
    CTE_BOOL        reduce using rule 73 (oper_assign -> DIV_EQ .)
    ID              reduce using rule 73 (oper_assign -> DIV_EQ .)
    MIN             reduce using rule 73 (oper_assign -> DIV_EQ .)
    MAX             reduce using rule 73 (oper_assign -> DIV_EQ .)
    MEAN            reduce using rule 73 (oper_assign -> DIV_EQ .)
    MEDIAN          reduce using rule 73 (oper_assign -> DIV_EQ .)
    MODE            reduce using rule 73 (oper_assign -> DIV_EQ .)
    VARIANCE        reduce using rule 73 (oper_assign -> DIV_EQ .)
    LEN             reduce using rule 73 (oper_assign -> DIV_EQ .)


state 97

    (74) oper_assign -> PLUS_EQ .

    L_PAR           reduce using rule 74 (oper_assign -> PLUS_EQ .)
    MINUS           reduce using rule 74 (oper_assign -> PLUS_EQ .)
    CTE_INT         reduce using rule 74 (oper_assign -> PLUS_EQ .)
    CTE_FLOAT       reduce using rule 74 (oper_assign -> PLUS_EQ .)
    CTE_CHAR        reduce using rule 74 (oper_assign -> PLUS_EQ .)
    CTE_STRING      reduce using rule 74 (oper_assign -> PLUS_EQ .)
    CTE_BOOL        reduce using rule 74 (oper_assign -> PLUS_EQ .)
    ID              reduce using rule 74 (oper_assign -> PLUS_EQ .)
    MIN             reduce using rule 74 (oper_assign -> PLUS_EQ .)
    MAX             reduce using rule 74 (oper_assign -> PLUS_EQ .)
    MEAN            reduce using rule 74 (oper_assign -> PLUS_EQ .)
    MEDIAN          reduce using rule 74 (oper_assign -> PLUS_EQ .)
    MODE            reduce using rule 74 (oper_assign -> PLUS_EQ .)
    VARIANCE        reduce using rule 74 (oper_assign -> PLUS_EQ .)
    LEN             reduce using rule 74 (oper_assign -> PLUS_EQ .)


state 98

    (75) oper_assign -> MINUS_EQ .

    L_PAR           reduce using rule 75 (oper_assign -> MINUS_EQ .)
    MINUS           reduce using rule 75 (oper_assign -> MINUS_EQ .)
    CTE_INT         reduce using rule 75 (oper_assign -> MINUS_EQ .)
    CTE_FLOAT       reduce using rule 75 (oper_assign -> MINUS_EQ .)
    CTE_CHAR        reduce using rule 75 (oper_assign -> MINUS_EQ .)
    CTE_STRING      reduce using rule 75 (oper_assign -> MINUS_EQ .)
    CTE_BOOL        reduce using rule 75 (oper_assign -> MINUS_EQ .)
    ID              reduce using rule 75 (oper_assign -> MINUS_EQ .)
    MIN             reduce using rule 75 (oper_assign -> MINUS_EQ .)
    MAX             reduce using rule 75 (oper_assign -> MINUS_EQ .)
    MEAN            reduce using rule 75 (oper_assign -> MINUS_EQ .)
    MEDIAN          reduce using rule 75 (oper_assign -> MINUS_EQ .)
    MODE            reduce using rule 75 (oper_assign -> MINUS_EQ .)
    VARIANCE        reduce using rule 75 (oper_assign -> MINUS_EQ .)
    LEN             reduce using rule 75 (oper_assign -> MINUS_EQ .)


state 99

    (46) condicional -> IF L_PAR . expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    expression                     shift and go to state 119
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 100

    (49) read -> READ L_PAR . read2 R_PAR SEMICOLON
    (50) read2 -> . var np_read
    (51) read2 -> . var np_read COMMA read2
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand

    ID              shift and go to state 104

    read2                          shift and go to state 142
    var                            shift and go to state 143

state 101

    (52) write -> WRITE L_PAR . writeB R_PAR SEMICOLON
    (53) writeB -> . expression np_end np_write writeC
    (54) writeB -> . CTE_STRING np_push_cte_str np_write writeC
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    CTE_STRING      shift and go to state 146
    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    writeB                         shift and go to state 144
    expression                     shift and go to state 145
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 102

    (57) loop_cond -> WHILE L_PAR . np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (137) np_CHECKPOINT -> .

    L_PAR           reduce using rule 137 (np_CHECKPOINT -> .)
    MINUS           reduce using rule 137 (np_CHECKPOINT -> .)
    CTE_INT         reduce using rule 137 (np_CHECKPOINT -> .)
    CTE_FLOAT       reduce using rule 137 (np_CHECKPOINT -> .)
    CTE_CHAR        reduce using rule 137 (np_CHECKPOINT -> .)
    CTE_STRING      reduce using rule 137 (np_CHECKPOINT -> .)
    CTE_BOOL        reduce using rule 137 (np_CHECKPOINT -> .)
    ID              reduce using rule 137 (np_CHECKPOINT -> .)
    MIN             reduce using rule 137 (np_CHECKPOINT -> .)
    MAX             reduce using rule 137 (np_CHECKPOINT -> .)
    MEAN            reduce using rule 137 (np_CHECKPOINT -> .)
    MEDIAN          reduce using rule 137 (np_CHECKPOINT -> .)
    MODE            reduce using rule 137 (np_CHECKPOINT -> .)
    VARIANCE        reduce using rule 137 (np_CHECKPOINT -> .)
    LEN             reduce using rule 137 (np_CHECKPOINT -> .)

    np_CHECKPOINT                  shift and go to state 147

state 103

    (58) loop_range -> FOR var . EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR

    EQUAL           shift and go to state 148


state 104

    (20) var -> ID . L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> ID . np_push_operand
    (114) np_push_operand -> .

    L_BRACKET       shift and go to state 108
    EQUAL           reduce using rule 114 (np_push_operand -> .)
    COMMA           reduce using rule 114 (np_push_operand -> .)
    R_PAR           reduce using rule 114 (np_push_operand -> .)

    np_push_operand                shift and go to state 109

state 105

    (59) return -> RETURN L_PAR . np_stop exp np_end np_set_return R_PAR SEMICOLON
    (145) np_stop -> .

    L_PAR           reduce using rule 145 (np_stop -> .)
    MINUS           reduce using rule 145 (np_stop -> .)
    CTE_INT         reduce using rule 145 (np_stop -> .)
    CTE_FLOAT       reduce using rule 145 (np_stop -> .)
    CTE_CHAR        reduce using rule 145 (np_stop -> .)
    CTE_STRING      reduce using rule 145 (np_stop -> .)
    CTE_BOOL        reduce using rule 145 (np_stop -> .)
    ID              reduce using rule 145 (np_stop -> .)
    MIN             reduce using rule 145 (np_stop -> .)
    MAX             reduce using rule 145 (np_stop -> .)
    MEAN            reduce using rule 145 (np_stop -> .)
    MEDIAN          reduce using rule 145 (np_stop -> .)
    MODE            reduce using rule 145 (np_stop -> .)
    VARIANCE        reduce using rule 145 (np_stop -> .)
    LEN             reduce using rule 145 (np_stop -> .)

    np_stop                        shift and go to state 149

state 106

    (42) void_func -> func_call SEMICOLON .

    IF              reduce using rule 42 (void_func -> func_call SEMICOLON .)
    READ            reduce using rule 42 (void_func -> func_call SEMICOLON .)
    WRITE           reduce using rule 42 (void_func -> func_call SEMICOLON .)
    WHILE           reduce using rule 42 (void_func -> func_call SEMICOLON .)
    FOR             reduce using rule 42 (void_func -> func_call SEMICOLON .)
    RETURN          reduce using rule 42 (void_func -> func_call SEMICOLON .)
    PLOTXY          reduce using rule 42 (void_func -> func_call SEMICOLON .)
    REGRESSION      reduce using rule 42 (void_func -> func_call SEMICOLON .)
    ID              reduce using rule 42 (void_func -> func_call SEMICOLON .)
    R_BRACE         reduce using rule 42 (void_func -> func_call SEMICOLON .)


state 107

    (43) void_func -> PLOTXY L_PAR . ID COMMA ID R_PAR np_def_func_2param SEMICOLON

    ID              shift and go to state 150


state 108

    (20) var -> ID L_BRACKET . np_stop exp np_end np_arr_end R_BRACKET
    (145) np_stop -> .

    L_PAR           reduce using rule 145 (np_stop -> .)
    MINUS           reduce using rule 145 (np_stop -> .)
    CTE_INT         reduce using rule 145 (np_stop -> .)
    CTE_FLOAT       reduce using rule 145 (np_stop -> .)
    CTE_CHAR        reduce using rule 145 (np_stop -> .)
    CTE_STRING      reduce using rule 145 (np_stop -> .)
    CTE_BOOL        reduce using rule 145 (np_stop -> .)
    ID              reduce using rule 145 (np_stop -> .)
    MIN             reduce using rule 145 (np_stop -> .)
    MAX             reduce using rule 145 (np_stop -> .)
    MEAN            reduce using rule 145 (np_stop -> .)
    MEDIAN          reduce using rule 145 (np_stop -> .)
    MODE            reduce using rule 145 (np_stop -> .)
    VARIANCE        reduce using rule 145 (np_stop -> .)
    LEN             reduce using rule 145 (np_stop -> .)

    np_stop                        shift and go to state 151

state 109

    (21) var -> ID np_push_operand .

    EQUAL           reduce using rule 21 (var -> ID np_push_operand .)
    MULT_EQ         reduce using rule 21 (var -> ID np_push_operand .)
    DIV_EQ          reduce using rule 21 (var -> ID np_push_operand .)
    PLUS_EQ         reduce using rule 21 (var -> ID np_push_operand .)
    MINUS_EQ        reduce using rule 21 (var -> ID np_push_operand .)
    EXP             reduce using rule 21 (var -> ID np_push_operand .)
    MULT            reduce using rule 21 (var -> ID np_push_operand .)
    DIV             reduce using rule 21 (var -> ID np_push_operand .)
    REMAINDER       reduce using rule 21 (var -> ID np_push_operand .)
    PLUS            reduce using rule 21 (var -> ID np_push_operand .)
    MINUS           reduce using rule 21 (var -> ID np_push_operand .)
    LESS            reduce using rule 21 (var -> ID np_push_operand .)
    GREATER         reduce using rule 21 (var -> ID np_push_operand .)
    LESS_EQ         reduce using rule 21 (var -> ID np_push_operand .)
    GREATER_EQ      reduce using rule 21 (var -> ID np_push_operand .)
    EQUIVALENT      reduce using rule 21 (var -> ID np_push_operand .)
    DIFFERENT       reduce using rule 21 (var -> ID np_push_operand .)
    OR              reduce using rule 21 (var -> ID np_push_operand .)
    AND             reduce using rule 21 (var -> ID np_push_operand .)
    R_PAR           reduce using rule 21 (var -> ID np_push_operand .)
    COMMA           reduce using rule 21 (var -> ID np_push_operand .)
    SEMICOLON       reduce using rule 21 (var -> ID np_push_operand .)
    R_BRACKET       reduce using rule 21 (var -> ID np_push_operand .)
    TO              reduce using rule 21 (var -> ID np_push_operand .)
    L_BRACE         reduce using rule 21 (var -> ID np_push_operand .)


state 110

    (60) func_call -> ID np_ERA . L_PAR func_call_arguments R_PAR np_GOSUB

    L_PAR           shift and go to state 152


state 111

    (44) void_func -> REGRESSION L_PAR . ID COMMA ID R_PAR np_def_func_2param SEMICOLON

    ID              shift and go to state 153


state 112

    (12) varsD -> ID L_BRACKET CTE_INT R_BRACKET . np_add_arr
    (123) np_add_arr -> .

    COMMA           reduce using rule 123 (np_add_arr -> .)
    SEMICOLON       reduce using rule 123 (np_add_arr -> .)

    np_add_arr                     shift and go to state 154

state 113

    (13) function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock . np_ENDFunc
    (143) np_ENDFunc -> .

    FUNCTION        reduce using rule 143 (np_ENDFunc -> .)
    MAIN            reduce using rule 143 (np_ENDFunc -> .)

    np_ENDFunc                     shift and go to state 155

state 114

    (24) params -> type COLON ID np_add_param .
    (25) params -> type COLON ID np_add_param . COMMA params

    R_PAR           reduce using rule 24 (params -> type COLON ID np_add_param .)
    COMMA           shift and go to state 156


state 115

    (30) vblock -> L_BRACE vars vblockB R_BRACE .

    $end            reduce using rule 30 (vblock -> L_BRACE vars vblockB R_BRACE .)
    FUNCTION        reduce using rule 30 (vblock -> L_BRACE vars vblockB R_BRACE .)
    MAIN            reduce using rule 30 (vblock -> L_BRACE vars vblockB R_BRACE .)


state 116

    (32) vblockB -> statement vblockB .

    R_BRACE         reduce using rule 32 (vblockB -> statement vblockB .)


state 117

    (45) assign -> var oper_assign np_push_operator . expression np_end SEMICOLON
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    var                            shift and go to state 127
    expression                     shift and go to state 157
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 118

    (100) factor -> L_PAR . np_push_operator expression R_PAR np_rpar
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 158

state 119

    (46) condicional -> IF L_PAR expression . np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (126) np_end -> .

    R_PAR           reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 159

state 120

    (76) expression -> logic . expressionB
    (77) expressionB -> . OR np_push_operator expression
    (78) expressionB -> . AND np_push_operator expression
    (79) expressionB -> . empty
    (111) empty -> .

    OR              shift and go to state 161
    AND             shift and go to state 162
    R_PAR           reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)
    SEMICOLON       reduce using rule 111 (empty -> .)

    expressionB                    shift and go to state 160
    empty                          shift and go to state 163

state 121

    (80) logic -> exp . logic2
    (81) logic2 -> . LESS np_push_operator exp
    (82) logic2 -> . GREATER np_push_operator exp
    (83) logic2 -> . LESS_EQ np_push_operator exp
    (84) logic2 -> . GREATER_EQ np_push_operator exp
    (85) logic2 -> . EQUIVALENT np_push_operator exp
    (86) logic2 -> . DIFFERENT np_push_operator exp
    (87) logic2 -> . empty
    (111) empty -> .

    LESS            shift and go to state 165
    GREATER         shift and go to state 166
    LESS_EQ         shift and go to state 167
    GREATER_EQ      shift and go to state 168
    EQUIVALENT      shift and go to state 169
    DIFFERENT       shift and go to state 170
    OR              reduce using rule 111 (empty -> .)
    AND             reduce using rule 111 (empty -> .)
    R_PAR           reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)
    SEMICOLON       reduce using rule 111 (empty -> .)

    logic2                         shift and go to state 164
    empty                          shift and go to state 171

state 122

    (88) exp -> term . exp2
    (89) exp2 -> . PLUS np_push_operator exp
    (90) exp2 -> . MINUS np_push_operator exp
    (91) exp2 -> . empty
    (111) empty -> .

    PLUS            shift and go to state 173
    MINUS           shift and go to state 174
    LESS            reduce using rule 111 (empty -> .)
    GREATER         reduce using rule 111 (empty -> .)
    LESS_EQ         reduce using rule 111 (empty -> .)
    GREATER_EQ      reduce using rule 111 (empty -> .)
    EQUIVALENT      reduce using rule 111 (empty -> .)
    DIFFERENT       reduce using rule 111 (empty -> .)
    OR              reduce using rule 111 (empty -> .)
    AND             reduce using rule 111 (empty -> .)
    R_PAR           reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)
    SEMICOLON       reduce using rule 111 (empty -> .)
    R_BRACKET       reduce using rule 111 (empty -> .)
    TO              reduce using rule 111 (empty -> .)
    L_BRACE         reduce using rule 111 (empty -> .)

    exp2                           shift and go to state 172
    empty                          shift and go to state 175

state 123

    (92) term -> exponent . term2
    (93) term2 -> . MULT np_push_operator term
    (94) term2 -> . DIV np_push_operator term
    (95) term2 -> . REMAINDER np_push_operator term
    (96) term2 -> . empty
    (111) empty -> .

    MULT            shift and go to state 177
    DIV             shift and go to state 178
    REMAINDER       shift and go to state 179
    PLUS            reduce using rule 111 (empty -> .)
    MINUS           reduce using rule 111 (empty -> .)
    LESS            reduce using rule 111 (empty -> .)
    GREATER         reduce using rule 111 (empty -> .)
    LESS_EQ         reduce using rule 111 (empty -> .)
    GREATER_EQ      reduce using rule 111 (empty -> .)
    EQUIVALENT      reduce using rule 111 (empty -> .)
    DIFFERENT       reduce using rule 111 (empty -> .)
    OR              reduce using rule 111 (empty -> .)
    AND             reduce using rule 111 (empty -> .)
    R_PAR           reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)
    SEMICOLON       reduce using rule 111 (empty -> .)
    R_BRACKET       reduce using rule 111 (empty -> .)
    TO              reduce using rule 111 (empty -> .)
    L_BRACE         reduce using rule 111 (empty -> .)

    term2                          shift and go to state 176
    empty                          shift and go to state 180

state 124

    (97) exponent -> factor . exponentB
    (98) exponentB -> . EXP np_push_operator exponent
    (99) exponentB -> . empty
    (111) empty -> .

    EXP             shift and go to state 182
    MULT            reduce using rule 111 (empty -> .)
    DIV             reduce using rule 111 (empty -> .)
    REMAINDER       reduce using rule 111 (empty -> .)
    PLUS            reduce using rule 111 (empty -> .)
    MINUS           reduce using rule 111 (empty -> .)
    LESS            reduce using rule 111 (empty -> .)
    GREATER         reduce using rule 111 (empty -> .)
    LESS_EQ         reduce using rule 111 (empty -> .)
    GREATER_EQ      reduce using rule 111 (empty -> .)
    EQUIVALENT      reduce using rule 111 (empty -> .)
    DIFFERENT       reduce using rule 111 (empty -> .)
    OR              reduce using rule 111 (empty -> .)
    AND             reduce using rule 111 (empty -> .)
    R_PAR           reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)
    SEMICOLON       reduce using rule 111 (empty -> .)
    R_BRACKET       reduce using rule 111 (empty -> .)
    TO              reduce using rule 111 (empty -> .)
    L_BRACE         reduce using rule 111 (empty -> .)

    exponentB                      shift and go to state 181
    empty                          shift and go to state 183

state 125

    (101) factor -> MINUS . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    var_cte                        shift and go to state 184
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 126

    (102) factor -> var_cte .

    EXP             reduce using rule 102 (factor -> var_cte .)
    MULT            reduce using rule 102 (factor -> var_cte .)
    DIV             reduce using rule 102 (factor -> var_cte .)
    REMAINDER       reduce using rule 102 (factor -> var_cte .)
    PLUS            reduce using rule 102 (factor -> var_cte .)
    MINUS           reduce using rule 102 (factor -> var_cte .)
    LESS            reduce using rule 102 (factor -> var_cte .)
    GREATER         reduce using rule 102 (factor -> var_cte .)
    LESS_EQ         reduce using rule 102 (factor -> var_cte .)
    GREATER_EQ      reduce using rule 102 (factor -> var_cte .)
    EQUIVALENT      reduce using rule 102 (factor -> var_cte .)
    DIFFERENT       reduce using rule 102 (factor -> var_cte .)
    OR              reduce using rule 102 (factor -> var_cte .)
    AND             reduce using rule 102 (factor -> var_cte .)
    R_PAR           reduce using rule 102 (factor -> var_cte .)
    COMMA           reduce using rule 102 (factor -> var_cte .)
    SEMICOLON       reduce using rule 102 (factor -> var_cte .)
    R_BRACKET       reduce using rule 102 (factor -> var_cte .)
    TO              reduce using rule 102 (factor -> var_cte .)
    L_BRACE         reduce using rule 102 (factor -> var_cte .)


state 127

    (103) var_cte -> var .

    EXP             reduce using rule 103 (var_cte -> var .)
    MULT            reduce using rule 103 (var_cte -> var .)
    DIV             reduce using rule 103 (var_cte -> var .)
    REMAINDER       reduce using rule 103 (var_cte -> var .)
    PLUS            reduce using rule 103 (var_cte -> var .)
    MINUS           reduce using rule 103 (var_cte -> var .)
    LESS            reduce using rule 103 (var_cte -> var .)
    GREATER         reduce using rule 103 (var_cte -> var .)
    LESS_EQ         reduce using rule 103 (var_cte -> var .)
    GREATER_EQ      reduce using rule 103 (var_cte -> var .)
    EQUIVALENT      reduce using rule 103 (var_cte -> var .)
    DIFFERENT       reduce using rule 103 (var_cte -> var .)
    OR              reduce using rule 103 (var_cte -> var .)
    AND             reduce using rule 103 (var_cte -> var .)
    R_PAR           reduce using rule 103 (var_cte -> var .)
    COMMA           reduce using rule 103 (var_cte -> var .)
    SEMICOLON       reduce using rule 103 (var_cte -> var .)
    R_BRACKET       reduce using rule 103 (var_cte -> var .)
    TO              reduce using rule 103 (var_cte -> var .)
    L_BRACE         reduce using rule 103 (var_cte -> var .)


state 128

    (104) var_cte -> func_call .

    EXP             reduce using rule 104 (var_cte -> func_call .)
    MULT            reduce using rule 104 (var_cte -> func_call .)
    DIV             reduce using rule 104 (var_cte -> func_call .)
    REMAINDER       reduce using rule 104 (var_cte -> func_call .)
    PLUS            reduce using rule 104 (var_cte -> func_call .)
    MINUS           reduce using rule 104 (var_cte -> func_call .)
    LESS            reduce using rule 104 (var_cte -> func_call .)
    GREATER         reduce using rule 104 (var_cte -> func_call .)
    LESS_EQ         reduce using rule 104 (var_cte -> func_call .)
    GREATER_EQ      reduce using rule 104 (var_cte -> func_call .)
    EQUIVALENT      reduce using rule 104 (var_cte -> func_call .)
    DIFFERENT       reduce using rule 104 (var_cte -> func_call .)
    OR              reduce using rule 104 (var_cte -> func_call .)
    AND             reduce using rule 104 (var_cte -> func_call .)
    R_PAR           reduce using rule 104 (var_cte -> func_call .)
    COMMA           reduce using rule 104 (var_cte -> func_call .)
    SEMICOLON       reduce using rule 104 (var_cte -> func_call .)
    R_BRACKET       reduce using rule 104 (var_cte -> func_call .)
    TO              reduce using rule 104 (var_cte -> func_call .)
    L_BRACE         reduce using rule 104 (var_cte -> func_call .)


state 129

    (105) var_cte -> def_func .

    EXP             reduce using rule 105 (var_cte -> def_func .)
    MULT            reduce using rule 105 (var_cte -> def_func .)
    DIV             reduce using rule 105 (var_cte -> def_func .)
    REMAINDER       reduce using rule 105 (var_cte -> def_func .)
    PLUS            reduce using rule 105 (var_cte -> def_func .)
    MINUS           reduce using rule 105 (var_cte -> def_func .)
    LESS            reduce using rule 105 (var_cte -> def_func .)
    GREATER         reduce using rule 105 (var_cte -> def_func .)
    LESS_EQ         reduce using rule 105 (var_cte -> def_func .)
    GREATER_EQ      reduce using rule 105 (var_cte -> def_func .)
    EQUIVALENT      reduce using rule 105 (var_cte -> def_func .)
    DIFFERENT       reduce using rule 105 (var_cte -> def_func .)
    OR              reduce using rule 105 (var_cte -> def_func .)
    AND             reduce using rule 105 (var_cte -> def_func .)
    R_PAR           reduce using rule 105 (var_cte -> def_func .)
    COMMA           reduce using rule 105 (var_cte -> def_func .)
    SEMICOLON       reduce using rule 105 (var_cte -> def_func .)
    R_BRACKET       reduce using rule 105 (var_cte -> def_func .)
    TO              reduce using rule 105 (var_cte -> def_func .)
    L_BRACE         reduce using rule 105 (var_cte -> def_func .)


state 130

    (106) var_cte -> CTE_INT . np_push_cte_int
    (115) np_push_cte_int -> .

    EXP             reduce using rule 115 (np_push_cte_int -> .)
    MULT            reduce using rule 115 (np_push_cte_int -> .)
    DIV             reduce using rule 115 (np_push_cte_int -> .)
    REMAINDER       reduce using rule 115 (np_push_cte_int -> .)
    PLUS            reduce using rule 115 (np_push_cte_int -> .)
    MINUS           reduce using rule 115 (np_push_cte_int -> .)
    LESS            reduce using rule 115 (np_push_cte_int -> .)
    GREATER         reduce using rule 115 (np_push_cte_int -> .)
    LESS_EQ         reduce using rule 115 (np_push_cte_int -> .)
    GREATER_EQ      reduce using rule 115 (np_push_cte_int -> .)
    EQUIVALENT      reduce using rule 115 (np_push_cte_int -> .)
    DIFFERENT       reduce using rule 115 (np_push_cte_int -> .)
    OR              reduce using rule 115 (np_push_cte_int -> .)
    AND             reduce using rule 115 (np_push_cte_int -> .)
    R_PAR           reduce using rule 115 (np_push_cte_int -> .)
    COMMA           reduce using rule 115 (np_push_cte_int -> .)
    SEMICOLON       reduce using rule 115 (np_push_cte_int -> .)
    R_BRACKET       reduce using rule 115 (np_push_cte_int -> .)
    TO              reduce using rule 115 (np_push_cte_int -> .)
    L_BRACE         reduce using rule 115 (np_push_cte_int -> .)

    np_push_cte_int                shift and go to state 185

state 131

    (107) var_cte -> CTE_FLOAT . np_push_cte_float
    (116) np_push_cte_float -> .

    EXP             reduce using rule 116 (np_push_cte_float -> .)
    MULT            reduce using rule 116 (np_push_cte_float -> .)
    DIV             reduce using rule 116 (np_push_cte_float -> .)
    REMAINDER       reduce using rule 116 (np_push_cte_float -> .)
    PLUS            reduce using rule 116 (np_push_cte_float -> .)
    MINUS           reduce using rule 116 (np_push_cte_float -> .)
    LESS            reduce using rule 116 (np_push_cte_float -> .)
    GREATER         reduce using rule 116 (np_push_cte_float -> .)
    LESS_EQ         reduce using rule 116 (np_push_cte_float -> .)
    GREATER_EQ      reduce using rule 116 (np_push_cte_float -> .)
    EQUIVALENT      reduce using rule 116 (np_push_cte_float -> .)
    DIFFERENT       reduce using rule 116 (np_push_cte_float -> .)
    OR              reduce using rule 116 (np_push_cte_float -> .)
    AND             reduce using rule 116 (np_push_cte_float -> .)
    R_PAR           reduce using rule 116 (np_push_cte_float -> .)
    COMMA           reduce using rule 116 (np_push_cte_float -> .)
    SEMICOLON       reduce using rule 116 (np_push_cte_float -> .)
    R_BRACKET       reduce using rule 116 (np_push_cte_float -> .)
    TO              reduce using rule 116 (np_push_cte_float -> .)
    L_BRACE         reduce using rule 116 (np_push_cte_float -> .)

    np_push_cte_float              shift and go to state 186

state 132

    (108) var_cte -> CTE_CHAR . np_push_cte_char
    (117) np_push_cte_char -> .

    EXP             reduce using rule 117 (np_push_cte_char -> .)
    MULT            reduce using rule 117 (np_push_cte_char -> .)
    DIV             reduce using rule 117 (np_push_cte_char -> .)
    REMAINDER       reduce using rule 117 (np_push_cte_char -> .)
    PLUS            reduce using rule 117 (np_push_cte_char -> .)
    MINUS           reduce using rule 117 (np_push_cte_char -> .)
    LESS            reduce using rule 117 (np_push_cte_char -> .)
    GREATER         reduce using rule 117 (np_push_cte_char -> .)
    LESS_EQ         reduce using rule 117 (np_push_cte_char -> .)
    GREATER_EQ      reduce using rule 117 (np_push_cte_char -> .)
    EQUIVALENT      reduce using rule 117 (np_push_cte_char -> .)
    DIFFERENT       reduce using rule 117 (np_push_cte_char -> .)
    OR              reduce using rule 117 (np_push_cte_char -> .)
    AND             reduce using rule 117 (np_push_cte_char -> .)
    R_PAR           reduce using rule 117 (np_push_cte_char -> .)
    COMMA           reduce using rule 117 (np_push_cte_char -> .)
    SEMICOLON       reduce using rule 117 (np_push_cte_char -> .)
    R_BRACKET       reduce using rule 117 (np_push_cte_char -> .)
    TO              reduce using rule 117 (np_push_cte_char -> .)
    L_BRACE         reduce using rule 117 (np_push_cte_char -> .)

    np_push_cte_char               shift and go to state 187

state 133

    (109) var_cte -> CTE_STRING . np_push_cte_str
    (118) np_push_cte_str -> .

    EXP             reduce using rule 118 (np_push_cte_str -> .)
    MULT            reduce using rule 118 (np_push_cte_str -> .)
    DIV             reduce using rule 118 (np_push_cte_str -> .)
    REMAINDER       reduce using rule 118 (np_push_cte_str -> .)
    PLUS            reduce using rule 118 (np_push_cte_str -> .)
    MINUS           reduce using rule 118 (np_push_cte_str -> .)
    LESS            reduce using rule 118 (np_push_cte_str -> .)
    GREATER         reduce using rule 118 (np_push_cte_str -> .)
    LESS_EQ         reduce using rule 118 (np_push_cte_str -> .)
    GREATER_EQ      reduce using rule 118 (np_push_cte_str -> .)
    EQUIVALENT      reduce using rule 118 (np_push_cte_str -> .)
    DIFFERENT       reduce using rule 118 (np_push_cte_str -> .)
    OR              reduce using rule 118 (np_push_cte_str -> .)
    AND             reduce using rule 118 (np_push_cte_str -> .)
    R_PAR           reduce using rule 118 (np_push_cte_str -> .)
    SEMICOLON       reduce using rule 118 (np_push_cte_str -> .)
    COMMA           reduce using rule 118 (np_push_cte_str -> .)
    R_BRACKET       reduce using rule 118 (np_push_cte_str -> .)
    TO              reduce using rule 118 (np_push_cte_str -> .)
    L_BRACE         reduce using rule 118 (np_push_cte_str -> .)

    np_push_cte_str                shift and go to state 188

state 134

    (110) var_cte -> CTE_BOOL . np_push_cte_bool
    (119) np_push_cte_bool -> .

    EXP             reduce using rule 119 (np_push_cte_bool -> .)
    MULT            reduce using rule 119 (np_push_cte_bool -> .)
    DIV             reduce using rule 119 (np_push_cte_bool -> .)
    REMAINDER       reduce using rule 119 (np_push_cte_bool -> .)
    PLUS            reduce using rule 119 (np_push_cte_bool -> .)
    MINUS           reduce using rule 119 (np_push_cte_bool -> .)
    LESS            reduce using rule 119 (np_push_cte_bool -> .)
    GREATER         reduce using rule 119 (np_push_cte_bool -> .)
    LESS_EQ         reduce using rule 119 (np_push_cte_bool -> .)
    GREATER_EQ      reduce using rule 119 (np_push_cte_bool -> .)
    EQUIVALENT      reduce using rule 119 (np_push_cte_bool -> .)
    DIFFERENT       reduce using rule 119 (np_push_cte_bool -> .)
    OR              reduce using rule 119 (np_push_cte_bool -> .)
    AND             reduce using rule 119 (np_push_cte_bool -> .)
    R_PAR           reduce using rule 119 (np_push_cte_bool -> .)
    COMMA           reduce using rule 119 (np_push_cte_bool -> .)
    SEMICOLON       reduce using rule 119 (np_push_cte_bool -> .)
    R_BRACKET       reduce using rule 119 (np_push_cte_bool -> .)
    TO              reduce using rule 119 (np_push_cte_bool -> .)
    L_BRACE         reduce using rule 119 (np_push_cte_bool -> .)

    np_push_cte_bool               shift and go to state 189

state 135

    (64) def_func -> MIN . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 190


state 136

    (65) def_func -> MAX . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 191


state 137

    (66) def_func -> MEAN . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 192


state 138

    (67) def_func -> MEDIAN . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 193


state 139

    (68) def_func -> MODE . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 194


state 140

    (69) def_func -> VARIANCE . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 195


state 141

    (70) def_func -> LEN . L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 196


state 142

    (49) read -> READ L_PAR read2 . R_PAR SEMICOLON

    R_PAR           shift and go to state 197


state 143

    (50) read2 -> var . np_read
    (51) read2 -> var . np_read COMMA read2
    (127) np_read -> .

    COMMA           reduce using rule 127 (np_read -> .)
    R_PAR           reduce using rule 127 (np_read -> .)

    np_read                        shift and go to state 198

state 144

    (52) write -> WRITE L_PAR writeB . R_PAR SEMICOLON

    R_PAR           shift and go to state 199


state 145

    (53) writeB -> expression . np_end np_write writeC
    (126) np_end -> .

    COMMA           reduce using rule 126 (np_end -> .)
    R_PAR           reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 200

state 146

    (54) writeB -> CTE_STRING . np_push_cte_str np_write writeC
    (109) var_cte -> CTE_STRING . np_push_cte_str
    (118) np_push_cte_str -> .

    COMMA           reduce using rule 118 (np_push_cte_str -> .)
    R_PAR           reduce using rule 118 (np_push_cte_str -> .)
    EXP             reduce using rule 118 (np_push_cte_str -> .)
    MULT            reduce using rule 118 (np_push_cte_str -> .)
    DIV             reduce using rule 118 (np_push_cte_str -> .)
    REMAINDER       reduce using rule 118 (np_push_cte_str -> .)
    PLUS            reduce using rule 118 (np_push_cte_str -> .)
    MINUS           reduce using rule 118 (np_push_cte_str -> .)
    LESS            reduce using rule 118 (np_push_cte_str -> .)
    GREATER         reduce using rule 118 (np_push_cte_str -> .)
    LESS_EQ         reduce using rule 118 (np_push_cte_str -> .)
    GREATER_EQ      reduce using rule 118 (np_push_cte_str -> .)
    EQUIVALENT      reduce using rule 118 (np_push_cte_str -> .)
    DIFFERENT       reduce using rule 118 (np_push_cte_str -> .)
    OR              reduce using rule 118 (np_push_cte_str -> .)
    AND             reduce using rule 118 (np_push_cte_str -> .)

    np_push_cte_str                shift and go to state 201

state 147

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT . expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    expression                     shift and go to state 202
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 148

    (58) loop_range -> FOR var EQUAL . np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 203

state 149

    (59) return -> RETURN L_PAR np_stop . exp np_end np_set_return R_PAR SEMICOLON
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 204
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 150

    (43) void_func -> PLOTXY L_PAR ID . COMMA ID R_PAR np_def_func_2param SEMICOLON

    COMMA           shift and go to state 205


state 151

    (20) var -> ID L_BRACKET np_stop . exp np_end np_arr_end R_BRACKET
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 206
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 152

    (60) func_call -> ID np_ERA L_PAR . func_call_arguments R_PAR np_GOSUB
    (61) func_call_arguments -> . np_stop exp np_end np_param
    (62) func_call_arguments -> . np_stop exp np_end np_param COMMA func_call_arguments
    (63) func_call_arguments -> . empty
    (145) np_stop -> .
    (111) empty -> .

    L_PAR           reduce using rule 145 (np_stop -> .)
    MINUS           reduce using rule 145 (np_stop -> .)
    CTE_INT         reduce using rule 145 (np_stop -> .)
    CTE_FLOAT       reduce using rule 145 (np_stop -> .)
    CTE_CHAR        reduce using rule 145 (np_stop -> .)
    CTE_STRING      reduce using rule 145 (np_stop -> .)
    CTE_BOOL        reduce using rule 145 (np_stop -> .)
    ID              reduce using rule 145 (np_stop -> .)
    MIN             reduce using rule 145 (np_stop -> .)
    MAX             reduce using rule 145 (np_stop -> .)
    MEAN            reduce using rule 145 (np_stop -> .)
    MEDIAN          reduce using rule 145 (np_stop -> .)
    MODE            reduce using rule 145 (np_stop -> .)
    VARIANCE        reduce using rule 145 (np_stop -> .)
    LEN             reduce using rule 145 (np_stop -> .)
    R_PAR           reduce using rule 111 (empty -> .)

    func_call_arguments            shift and go to state 207
    np_stop                        shift and go to state 208
    empty                          shift and go to state 209

state 153

    (44) void_func -> REGRESSION L_PAR ID . COMMA ID R_PAR np_def_func_2param SEMICOLON

    COMMA           shift and go to state 210


state 154

    (12) varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr .

    COMMA           reduce using rule 12 (varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr .)
    SEMICOLON       reduce using rule 12 (varsD -> ID L_BRACKET CTE_INT R_BRACKET np_add_arr .)


state 155

    (13) function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc .

    FUNCTION        reduce using rule 13 (function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc .)
    MAIN            reduce using rule 13 (function -> FUNCTION func_type ID np_set_curr_proc L_PAR params R_PAR np_set_quad_start vblock np_ENDFunc .)


state 156

    (25) params -> type COLON ID np_add_param COMMA . params
    (24) params -> . type COLON ID np_add_param
    (25) params -> . type COLON ID np_add_param COMMA params
    (26) params -> . empty
    (15) type -> . INT np_add_datatype
    (16) type -> . FLOAT np_add_datatype
    (17) type -> . BOOL np_add_datatype
    (18) type -> . CHAR np_add_datatype
    (19) type -> . STRING np_add_datatype
    (111) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    CHAR            shift and go to state 25
    STRING          shift and go to state 26
    R_PAR           reduce using rule 111 (empty -> .)

    type                           shift and go to state 49
    params                         shift and go to state 211
    empty                          shift and go to state 50

state 157

    (45) assign -> var oper_assign np_push_operator expression . np_end SEMICOLON
    (126) np_end -> .

    SEMICOLON       reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 212

state 158

    (100) factor -> L_PAR np_push_operator . expression R_PAR np_rpar
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    expression                     shift and go to state 213
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 159

    (46) condicional -> IF L_PAR expression np_end . np_GOTOF R_PAR block cond2 np_GOTO_END
    (132) np_GOTOF -> .

    R_PAR           reduce using rule 132 (np_GOTOF -> .)

    np_GOTOF                       shift and go to state 214

state 160

    (76) expression -> logic expressionB .

    R_PAR           reduce using rule 76 (expression -> logic expressionB .)
    COMMA           reduce using rule 76 (expression -> logic expressionB .)
    SEMICOLON       reduce using rule 76 (expression -> logic expressionB .)


state 161

    (77) expressionB -> OR . np_push_operator expression
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 215

state 162

    (78) expressionB -> AND . np_push_operator expression
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 216

state 163

    (79) expressionB -> empty .

    R_PAR           reduce using rule 79 (expressionB -> empty .)
    COMMA           reduce using rule 79 (expressionB -> empty .)
    SEMICOLON       reduce using rule 79 (expressionB -> empty .)


state 164

    (80) logic -> exp logic2 .

    OR              reduce using rule 80 (logic -> exp logic2 .)
    AND             reduce using rule 80 (logic -> exp logic2 .)
    R_PAR           reduce using rule 80 (logic -> exp logic2 .)
    COMMA           reduce using rule 80 (logic -> exp logic2 .)
    SEMICOLON       reduce using rule 80 (logic -> exp logic2 .)


state 165

    (81) logic2 -> LESS . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 217

state 166

    (82) logic2 -> GREATER . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 218

state 167

    (83) logic2 -> LESS_EQ . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 219

state 168

    (84) logic2 -> GREATER_EQ . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 220

state 169

    (85) logic2 -> EQUIVALENT . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 221

state 170

    (86) logic2 -> DIFFERENT . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 222

state 171

    (87) logic2 -> empty .

    OR              reduce using rule 87 (logic2 -> empty .)
    AND             reduce using rule 87 (logic2 -> empty .)
    R_PAR           reduce using rule 87 (logic2 -> empty .)
    COMMA           reduce using rule 87 (logic2 -> empty .)
    SEMICOLON       reduce using rule 87 (logic2 -> empty .)


state 172

    (88) exp -> term exp2 .

    LESS            reduce using rule 88 (exp -> term exp2 .)
    GREATER         reduce using rule 88 (exp -> term exp2 .)
    LESS_EQ         reduce using rule 88 (exp -> term exp2 .)
    GREATER_EQ      reduce using rule 88 (exp -> term exp2 .)
    EQUIVALENT      reduce using rule 88 (exp -> term exp2 .)
    DIFFERENT       reduce using rule 88 (exp -> term exp2 .)
    OR              reduce using rule 88 (exp -> term exp2 .)
    AND             reduce using rule 88 (exp -> term exp2 .)
    R_PAR           reduce using rule 88 (exp -> term exp2 .)
    COMMA           reduce using rule 88 (exp -> term exp2 .)
    SEMICOLON       reduce using rule 88 (exp -> term exp2 .)
    R_BRACKET       reduce using rule 88 (exp -> term exp2 .)
    TO              reduce using rule 88 (exp -> term exp2 .)
    L_BRACE         reduce using rule 88 (exp -> term exp2 .)


state 173

    (89) exp2 -> PLUS . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 223

state 174

    (90) exp2 -> MINUS . np_push_operator exp
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 224

state 175

    (91) exp2 -> empty .

    LESS            reduce using rule 91 (exp2 -> empty .)
    GREATER         reduce using rule 91 (exp2 -> empty .)
    LESS_EQ         reduce using rule 91 (exp2 -> empty .)
    GREATER_EQ      reduce using rule 91 (exp2 -> empty .)
    EQUIVALENT      reduce using rule 91 (exp2 -> empty .)
    DIFFERENT       reduce using rule 91 (exp2 -> empty .)
    OR              reduce using rule 91 (exp2 -> empty .)
    AND             reduce using rule 91 (exp2 -> empty .)
    R_PAR           reduce using rule 91 (exp2 -> empty .)
    COMMA           reduce using rule 91 (exp2 -> empty .)
    SEMICOLON       reduce using rule 91 (exp2 -> empty .)
    R_BRACKET       reduce using rule 91 (exp2 -> empty .)
    TO              reduce using rule 91 (exp2 -> empty .)
    L_BRACE         reduce using rule 91 (exp2 -> empty .)


state 176

    (92) term -> exponent term2 .

    PLUS            reduce using rule 92 (term -> exponent term2 .)
    MINUS           reduce using rule 92 (term -> exponent term2 .)
    LESS            reduce using rule 92 (term -> exponent term2 .)
    GREATER         reduce using rule 92 (term -> exponent term2 .)
    LESS_EQ         reduce using rule 92 (term -> exponent term2 .)
    GREATER_EQ      reduce using rule 92 (term -> exponent term2 .)
    EQUIVALENT      reduce using rule 92 (term -> exponent term2 .)
    DIFFERENT       reduce using rule 92 (term -> exponent term2 .)
    OR              reduce using rule 92 (term -> exponent term2 .)
    AND             reduce using rule 92 (term -> exponent term2 .)
    R_PAR           reduce using rule 92 (term -> exponent term2 .)
    COMMA           reduce using rule 92 (term -> exponent term2 .)
    SEMICOLON       reduce using rule 92 (term -> exponent term2 .)
    R_BRACKET       reduce using rule 92 (term -> exponent term2 .)
    TO              reduce using rule 92 (term -> exponent term2 .)
    L_BRACE         reduce using rule 92 (term -> exponent term2 .)


state 177

    (93) term2 -> MULT . np_push_operator term
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 225

state 178

    (94) term2 -> DIV . np_push_operator term
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 226

state 179

    (95) term2 -> REMAINDER . np_push_operator term
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 227

state 180

    (96) term2 -> empty .

    PLUS            reduce using rule 96 (term2 -> empty .)
    MINUS           reduce using rule 96 (term2 -> empty .)
    LESS            reduce using rule 96 (term2 -> empty .)
    GREATER         reduce using rule 96 (term2 -> empty .)
    LESS_EQ         reduce using rule 96 (term2 -> empty .)
    GREATER_EQ      reduce using rule 96 (term2 -> empty .)
    EQUIVALENT      reduce using rule 96 (term2 -> empty .)
    DIFFERENT       reduce using rule 96 (term2 -> empty .)
    OR              reduce using rule 96 (term2 -> empty .)
    AND             reduce using rule 96 (term2 -> empty .)
    R_PAR           reduce using rule 96 (term2 -> empty .)
    COMMA           reduce using rule 96 (term2 -> empty .)
    SEMICOLON       reduce using rule 96 (term2 -> empty .)
    R_BRACKET       reduce using rule 96 (term2 -> empty .)
    TO              reduce using rule 96 (term2 -> empty .)
    L_BRACE         reduce using rule 96 (term2 -> empty .)


state 181

    (97) exponent -> factor exponentB .

    MULT            reduce using rule 97 (exponent -> factor exponentB .)
    DIV             reduce using rule 97 (exponent -> factor exponentB .)
    REMAINDER       reduce using rule 97 (exponent -> factor exponentB .)
    PLUS            reduce using rule 97 (exponent -> factor exponentB .)
    MINUS           reduce using rule 97 (exponent -> factor exponentB .)
    LESS            reduce using rule 97 (exponent -> factor exponentB .)
    GREATER         reduce using rule 97 (exponent -> factor exponentB .)
    LESS_EQ         reduce using rule 97 (exponent -> factor exponentB .)
    GREATER_EQ      reduce using rule 97 (exponent -> factor exponentB .)
    EQUIVALENT      reduce using rule 97 (exponent -> factor exponentB .)
    DIFFERENT       reduce using rule 97 (exponent -> factor exponentB .)
    OR              reduce using rule 97 (exponent -> factor exponentB .)
    AND             reduce using rule 97 (exponent -> factor exponentB .)
    R_PAR           reduce using rule 97 (exponent -> factor exponentB .)
    COMMA           reduce using rule 97 (exponent -> factor exponentB .)
    SEMICOLON       reduce using rule 97 (exponent -> factor exponentB .)
    R_BRACKET       reduce using rule 97 (exponent -> factor exponentB .)
    TO              reduce using rule 97 (exponent -> factor exponentB .)
    L_BRACE         reduce using rule 97 (exponent -> factor exponentB .)


state 182

    (98) exponentB -> EXP . np_push_operator exponent
    (113) np_push_operator -> .

    L_PAR           reduce using rule 113 (np_push_operator -> .)
    MINUS           reduce using rule 113 (np_push_operator -> .)
    CTE_INT         reduce using rule 113 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 113 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 113 (np_push_operator -> .)
    CTE_STRING      reduce using rule 113 (np_push_operator -> .)
    CTE_BOOL        reduce using rule 113 (np_push_operator -> .)
    ID              reduce using rule 113 (np_push_operator -> .)
    MIN             reduce using rule 113 (np_push_operator -> .)
    MAX             reduce using rule 113 (np_push_operator -> .)
    MEAN            reduce using rule 113 (np_push_operator -> .)
    MEDIAN          reduce using rule 113 (np_push_operator -> .)
    MODE            reduce using rule 113 (np_push_operator -> .)
    VARIANCE        reduce using rule 113 (np_push_operator -> .)
    LEN             reduce using rule 113 (np_push_operator -> .)

    np_push_operator               shift and go to state 228

state 183

    (99) exponentB -> empty .

    MULT            reduce using rule 99 (exponentB -> empty .)
    DIV             reduce using rule 99 (exponentB -> empty .)
    REMAINDER       reduce using rule 99 (exponentB -> empty .)
    PLUS            reduce using rule 99 (exponentB -> empty .)
    MINUS           reduce using rule 99 (exponentB -> empty .)
    LESS            reduce using rule 99 (exponentB -> empty .)
    GREATER         reduce using rule 99 (exponentB -> empty .)
    LESS_EQ         reduce using rule 99 (exponentB -> empty .)
    GREATER_EQ      reduce using rule 99 (exponentB -> empty .)
    EQUIVALENT      reduce using rule 99 (exponentB -> empty .)
    DIFFERENT       reduce using rule 99 (exponentB -> empty .)
    OR              reduce using rule 99 (exponentB -> empty .)
    AND             reduce using rule 99 (exponentB -> empty .)
    R_PAR           reduce using rule 99 (exponentB -> empty .)
    COMMA           reduce using rule 99 (exponentB -> empty .)
    SEMICOLON       reduce using rule 99 (exponentB -> empty .)
    R_BRACKET       reduce using rule 99 (exponentB -> empty .)
    TO              reduce using rule 99 (exponentB -> empty .)
    L_BRACE         reduce using rule 99 (exponentB -> empty .)


state 184

    (101) factor -> MINUS var_cte .

    EXP             reduce using rule 101 (factor -> MINUS var_cte .)
    MULT            reduce using rule 101 (factor -> MINUS var_cte .)
    DIV             reduce using rule 101 (factor -> MINUS var_cte .)
    REMAINDER       reduce using rule 101 (factor -> MINUS var_cte .)
    PLUS            reduce using rule 101 (factor -> MINUS var_cte .)
    MINUS           reduce using rule 101 (factor -> MINUS var_cte .)
    LESS            reduce using rule 101 (factor -> MINUS var_cte .)
    GREATER         reduce using rule 101 (factor -> MINUS var_cte .)
    LESS_EQ         reduce using rule 101 (factor -> MINUS var_cte .)
    GREATER_EQ      reduce using rule 101 (factor -> MINUS var_cte .)
    EQUIVALENT      reduce using rule 101 (factor -> MINUS var_cte .)
    DIFFERENT       reduce using rule 101 (factor -> MINUS var_cte .)
    OR              reduce using rule 101 (factor -> MINUS var_cte .)
    AND             reduce using rule 101 (factor -> MINUS var_cte .)
    R_PAR           reduce using rule 101 (factor -> MINUS var_cte .)
    COMMA           reduce using rule 101 (factor -> MINUS var_cte .)
    SEMICOLON       reduce using rule 101 (factor -> MINUS var_cte .)
    R_BRACKET       reduce using rule 101 (factor -> MINUS var_cte .)
    TO              reduce using rule 101 (factor -> MINUS var_cte .)
    L_BRACE         reduce using rule 101 (factor -> MINUS var_cte .)


state 185

    (106) var_cte -> CTE_INT np_push_cte_int .

    EXP             reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    MULT            reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    DIV             reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    REMAINDER       reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    PLUS            reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    MINUS           reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    LESS            reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    GREATER         reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    LESS_EQ         reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    GREATER_EQ      reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    EQUIVALENT      reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    DIFFERENT       reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    OR              reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    AND             reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    R_PAR           reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    COMMA           reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    SEMICOLON       reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    R_BRACKET       reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    TO              reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)
    L_BRACE         reduce using rule 106 (var_cte -> CTE_INT np_push_cte_int .)


state 186

    (107) var_cte -> CTE_FLOAT np_push_cte_float .

    EXP             reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    MULT            reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    DIV             reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    REMAINDER       reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    PLUS            reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    MINUS           reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    LESS            reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    GREATER         reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    LESS_EQ         reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    GREATER_EQ      reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    EQUIVALENT      reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    DIFFERENT       reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    OR              reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    AND             reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    R_PAR           reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    COMMA           reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    SEMICOLON       reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    R_BRACKET       reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    TO              reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)
    L_BRACE         reduce using rule 107 (var_cte -> CTE_FLOAT np_push_cte_float .)


state 187

    (108) var_cte -> CTE_CHAR np_push_cte_char .

    EXP             reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    MULT            reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    DIV             reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    REMAINDER       reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    PLUS            reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    MINUS           reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    LESS            reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    GREATER         reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    LESS_EQ         reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    GREATER_EQ      reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    EQUIVALENT      reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    DIFFERENT       reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    OR              reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    AND             reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    R_PAR           reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    COMMA           reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    SEMICOLON       reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    R_BRACKET       reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    TO              reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)
    L_BRACE         reduce using rule 108 (var_cte -> CTE_CHAR np_push_cte_char .)


state 188

    (109) var_cte -> CTE_STRING np_push_cte_str .

    EXP             reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    MULT            reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    DIV             reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    REMAINDER       reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    PLUS            reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    MINUS           reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    LESS            reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    GREATER         reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    LESS_EQ         reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    GREATER_EQ      reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    EQUIVALENT      reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    DIFFERENT       reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    OR              reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    AND             reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    R_PAR           reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    SEMICOLON       reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    COMMA           reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    R_BRACKET       reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    TO              reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    L_BRACE         reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)


state 189

    (110) var_cte -> CTE_BOOL np_push_cte_bool .

    EXP             reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    MULT            reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    DIV             reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    REMAINDER       reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    PLUS            reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    MINUS           reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    LESS            reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    GREATER         reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    LESS_EQ         reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    GREATER_EQ      reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    EQUIVALENT      reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    DIFFERENT       reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    OR              reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    AND             reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    R_PAR           reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    COMMA           reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    SEMICOLON       reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    R_BRACKET       reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    TO              reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)
    L_BRACE         reduce using rule 110 (var_cte -> CTE_BOOL np_push_cte_bool .)


state 190

    (64) def_func -> MIN L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 229


state 191

    (65) def_func -> MAX L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 230


state 192

    (66) def_func -> MEAN L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 231


state 193

    (67) def_func -> MEDIAN L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 232


state 194

    (68) def_func -> MODE L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 233


state 195

    (69) def_func -> VARIANCE L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 234


state 196

    (70) def_func -> LEN L_PAR . ID R_PAR np_def_func_1param

    ID              shift and go to state 235


state 197

    (49) read -> READ L_PAR read2 R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 236


state 198

    (50) read2 -> var np_read .
    (51) read2 -> var np_read . COMMA read2

    R_PAR           reduce using rule 50 (read2 -> var np_read .)
    COMMA           shift and go to state 237


state 199

    (52) write -> WRITE L_PAR writeB R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 238


state 200

    (53) writeB -> expression np_end . np_write writeC
    (128) np_write -> .

    COMMA           reduce using rule 128 (np_write -> .)
    R_PAR           reduce using rule 128 (np_write -> .)

    np_write                       shift and go to state 239

state 201

    (54) writeB -> CTE_STRING np_push_cte_str . np_write writeC
    (109) var_cte -> CTE_STRING np_push_cte_str .
    (128) np_write -> .

  ! reduce/reduce conflict for COMMA resolved using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
  ! reduce/reduce conflict for R_PAR resolved using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    EXP             reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    MULT            reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    DIV             reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    REMAINDER       reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    PLUS            reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    MINUS           reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    LESS            reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    GREATER         reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    LESS_EQ         reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    GREATER_EQ      reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    EQUIVALENT      reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    DIFFERENT       reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    OR              reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    AND             reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    COMMA           reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)
    R_PAR           reduce using rule 109 (var_cte -> CTE_STRING np_push_cte_str .)

  ! COMMA           [ reduce using rule 128 (np_write -> .) ]
  ! R_PAR           [ reduce using rule 128 (np_write -> .) ]

    np_write                       shift and go to state 240

state 202

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT expression . R_PAR np_end np_GOTOF block np_GOTO_WHILE

    R_PAR           shift and go to state 241


state 203

    (58) loop_range -> FOR var EQUAL np_push_operator . exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    var                            shift and go to state 127
    exp                            shift and go to state 242
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 204

    (59) return -> RETURN L_PAR np_stop exp . np_end np_set_return R_PAR SEMICOLON
    (126) np_end -> .

    R_PAR           reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 243

state 205

    (43) void_func -> PLOTXY L_PAR ID COMMA . ID R_PAR np_def_func_2param SEMICOLON

    ID              shift and go to state 244


state 206

    (20) var -> ID L_BRACKET np_stop exp . np_end np_arr_end R_BRACKET
    (126) np_end -> .

    R_BRACKET       reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 245

state 207

    (60) func_call -> ID np_ERA L_PAR func_call_arguments . R_PAR np_GOSUB

    R_PAR           shift and go to state 246


state 208

    (61) func_call_arguments -> np_stop . exp np_end np_param
    (62) func_call_arguments -> np_stop . exp np_end np_param COMMA func_call_arguments
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 247
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 209

    (63) func_call_arguments -> empty .

    R_PAR           reduce using rule 63 (func_call_arguments -> empty .)


state 210

    (44) void_func -> REGRESSION L_PAR ID COMMA . ID R_PAR np_def_func_2param SEMICOLON

    ID              shift and go to state 248


state 211

    (25) params -> type COLON ID np_add_param COMMA params .

    R_PAR           reduce using rule 25 (params -> type COLON ID np_add_param COMMA params .)


state 212

    (45) assign -> var oper_assign np_push_operator expression np_end . SEMICOLON

    SEMICOLON       shift and go to state 249


state 213

    (100) factor -> L_PAR np_push_operator expression . R_PAR np_rpar

    R_PAR           shift and go to state 250


state 214

    (46) condicional -> IF L_PAR expression np_end np_GOTOF . R_PAR block cond2 np_GOTO_END

    R_PAR           shift and go to state 251


state 215

    (77) expressionB -> OR np_push_operator . expression
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    expression                     shift and go to state 252
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 216

    (78) expressionB -> AND np_push_operator . expression
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    expression                     shift and go to state 253
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 217

    (81) logic2 -> LESS np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 254
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 218

    (82) logic2 -> GREATER np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 255
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 219

    (83) logic2 -> LESS_EQ np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 256
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 220

    (84) logic2 -> GREATER_EQ np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 257
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 221

    (85) logic2 -> EQUIVALENT np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 258
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 222

    (86) logic2 -> DIFFERENT np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 259
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 223

    (89) exp2 -> PLUS np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 260
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 224

    (90) exp2 -> MINUS np_push_operator . exp
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exp                            shift and go to state 261
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 225

    (93) term2 -> MULT np_push_operator . term
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    term                           shift and go to state 262
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 226

    (94) term2 -> DIV np_push_operator . term
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    term                           shift and go to state 263
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 227

    (95) term2 -> REMAINDER np_push_operator . term
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    term                           shift and go to state 264
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 228

    (98) exponentB -> EXP np_push_operator . exponent
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    exponent                       shift and go to state 265
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 229

    (64) def_func -> MIN L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 266


state 230

    (65) def_func -> MAX L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 267


state 231

    (66) def_func -> MEAN L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 268


state 232

    (67) def_func -> MEDIAN L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 269


state 233

    (68) def_func -> MODE L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 270


state 234

    (69) def_func -> VARIANCE L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 271


state 235

    (70) def_func -> LEN L_PAR ID . R_PAR np_def_func_1param

    R_PAR           shift and go to state 272


state 236

    (49) read -> READ L_PAR read2 R_PAR SEMICOLON .

    IF              reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    READ            reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    WRITE           reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    WHILE           reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    FOR             reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    RETURN          reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    PLOTXY          reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    REGRESSION      reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    ID              reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)
    R_BRACE         reduce using rule 49 (read -> READ L_PAR read2 R_PAR SEMICOLON .)


state 237

    (51) read2 -> var np_read COMMA . read2
    (50) read2 -> . var np_read
    (51) read2 -> . var np_read COMMA read2
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand

    ID              shift and go to state 104

    var                            shift and go to state 143
    read2                          shift and go to state 273

state 238

    (52) write -> WRITE L_PAR writeB R_PAR SEMICOLON .

    IF              reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    READ            reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    WRITE           reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    WHILE           reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    FOR             reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    RETURN          reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    PLOTXY          reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    REGRESSION      reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    ID              reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)
    R_BRACE         reduce using rule 52 (write -> WRITE L_PAR writeB R_PAR SEMICOLON .)


state 239

    (53) writeB -> expression np_end np_write . writeC
    (55) writeC -> . COMMA writeB
    (56) writeC -> . empty
    (111) empty -> .

    COMMA           shift and go to state 275
    R_PAR           reduce using rule 111 (empty -> .)

    writeC                         shift and go to state 274
    empty                          shift and go to state 276

state 240

    (54) writeB -> CTE_STRING np_push_cte_str np_write . writeC
    (55) writeC -> . COMMA writeB
    (56) writeC -> . empty
    (111) empty -> .

    COMMA           shift and go to state 275
    R_PAR           reduce using rule 111 (empty -> .)

    writeC                         shift and go to state 277
    empty                          shift and go to state 276

state 241

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR . np_end np_GOTOF block np_GOTO_WHILE
    (126) np_end -> .

    L_BRACE         reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 278

state 242

    (58) loop_range -> FOR var EQUAL np_push_operator exp . np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (129) np_set_VC -> .

    TO              reduce using rule 129 (np_set_VC -> .)

    np_set_VC                      shift and go to state 279

state 243

    (59) return -> RETURN L_PAR np_stop exp np_end . np_set_return R_PAR SEMICOLON
    (125) np_set_return -> .

    R_PAR           reduce using rule 125 (np_set_return -> .)

    np_set_return                  shift and go to state 280

state 244

    (43) void_func -> PLOTXY L_PAR ID COMMA ID . R_PAR np_def_func_2param SEMICOLON

    R_PAR           shift and go to state 281


state 245

    (20) var -> ID L_BRACKET np_stop exp np_end . np_arr_end R_BRACKET
    (144) np_arr_end -> .

    R_BRACKET       reduce using rule 144 (np_arr_end -> .)

    np_arr_end                     shift and go to state 282

state 246

    (60) func_call -> ID np_ERA L_PAR func_call_arguments R_PAR . np_GOSUB
    (140) np_GOSUB -> .

    SEMICOLON       reduce using rule 140 (np_GOSUB -> .)
    EXP             reduce using rule 140 (np_GOSUB -> .)
    MULT            reduce using rule 140 (np_GOSUB -> .)
    DIV             reduce using rule 140 (np_GOSUB -> .)
    REMAINDER       reduce using rule 140 (np_GOSUB -> .)
    PLUS            reduce using rule 140 (np_GOSUB -> .)
    MINUS           reduce using rule 140 (np_GOSUB -> .)
    LESS            reduce using rule 140 (np_GOSUB -> .)
    GREATER         reduce using rule 140 (np_GOSUB -> .)
    LESS_EQ         reduce using rule 140 (np_GOSUB -> .)
    GREATER_EQ      reduce using rule 140 (np_GOSUB -> .)
    EQUIVALENT      reduce using rule 140 (np_GOSUB -> .)
    DIFFERENT       reduce using rule 140 (np_GOSUB -> .)
    OR              reduce using rule 140 (np_GOSUB -> .)
    AND             reduce using rule 140 (np_GOSUB -> .)
    R_PAR           reduce using rule 140 (np_GOSUB -> .)
    COMMA           reduce using rule 140 (np_GOSUB -> .)
    R_BRACKET       reduce using rule 140 (np_GOSUB -> .)
    TO              reduce using rule 140 (np_GOSUB -> .)
    L_BRACE         reduce using rule 140 (np_GOSUB -> .)

    np_GOSUB                       shift and go to state 283

state 247

    (61) func_call_arguments -> np_stop exp . np_end np_param
    (62) func_call_arguments -> np_stop exp . np_end np_param COMMA func_call_arguments
    (126) np_end -> .

    COMMA           reduce using rule 126 (np_end -> .)
    R_PAR           reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 284

state 248

    (44) void_func -> REGRESSION L_PAR ID COMMA ID . R_PAR np_def_func_2param SEMICOLON

    R_PAR           shift and go to state 285


state 249

    (45) assign -> var oper_assign np_push_operator expression np_end SEMICOLON .

    IF              reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    READ            reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    WRITE           reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    WHILE           reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    FOR             reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    RETURN          reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    PLOTXY          reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    REGRESSION      reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    ID              reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)
    R_BRACE         reduce using rule 45 (assign -> var oper_assign np_push_operator expression np_end SEMICOLON .)


state 250

    (100) factor -> L_PAR np_push_operator expression R_PAR . np_rpar
    (124) np_rpar -> .

    EXP             reduce using rule 124 (np_rpar -> .)
    MULT            reduce using rule 124 (np_rpar -> .)
    DIV             reduce using rule 124 (np_rpar -> .)
    REMAINDER       reduce using rule 124 (np_rpar -> .)
    PLUS            reduce using rule 124 (np_rpar -> .)
    MINUS           reduce using rule 124 (np_rpar -> .)
    LESS            reduce using rule 124 (np_rpar -> .)
    GREATER         reduce using rule 124 (np_rpar -> .)
    LESS_EQ         reduce using rule 124 (np_rpar -> .)
    GREATER_EQ      reduce using rule 124 (np_rpar -> .)
    EQUIVALENT      reduce using rule 124 (np_rpar -> .)
    DIFFERENT       reduce using rule 124 (np_rpar -> .)
    OR              reduce using rule 124 (np_rpar -> .)
    AND             reduce using rule 124 (np_rpar -> .)
    R_PAR           reduce using rule 124 (np_rpar -> .)
    COMMA           reduce using rule 124 (np_rpar -> .)
    SEMICOLON       reduce using rule 124 (np_rpar -> .)
    R_BRACKET       reduce using rule 124 (np_rpar -> .)
    TO              reduce using rule 124 (np_rpar -> .)
    L_BRACE         reduce using rule 124 (np_rpar -> .)

    np_rpar                        shift and go to state 286

state 251

    (46) condicional -> IF L_PAR expression np_end np_GOTOF R_PAR . block cond2 np_GOTO_END
    (27) block -> . L_BRACE blockB R_BRACE

    L_BRACE         shift and go to state 288

    block                          shift and go to state 287

state 252

    (77) expressionB -> OR np_push_operator expression .

    R_PAR           reduce using rule 77 (expressionB -> OR np_push_operator expression .)
    COMMA           reduce using rule 77 (expressionB -> OR np_push_operator expression .)
    SEMICOLON       reduce using rule 77 (expressionB -> OR np_push_operator expression .)


state 253

    (78) expressionB -> AND np_push_operator expression .

    R_PAR           reduce using rule 78 (expressionB -> AND np_push_operator expression .)
    COMMA           reduce using rule 78 (expressionB -> AND np_push_operator expression .)
    SEMICOLON       reduce using rule 78 (expressionB -> AND np_push_operator expression .)


state 254

    (81) logic2 -> LESS np_push_operator exp .

    OR              reduce using rule 81 (logic2 -> LESS np_push_operator exp .)
    AND             reduce using rule 81 (logic2 -> LESS np_push_operator exp .)
    R_PAR           reduce using rule 81 (logic2 -> LESS np_push_operator exp .)
    COMMA           reduce using rule 81 (logic2 -> LESS np_push_operator exp .)
    SEMICOLON       reduce using rule 81 (logic2 -> LESS np_push_operator exp .)


state 255

    (82) logic2 -> GREATER np_push_operator exp .

    OR              reduce using rule 82 (logic2 -> GREATER np_push_operator exp .)
    AND             reduce using rule 82 (logic2 -> GREATER np_push_operator exp .)
    R_PAR           reduce using rule 82 (logic2 -> GREATER np_push_operator exp .)
    COMMA           reduce using rule 82 (logic2 -> GREATER np_push_operator exp .)
    SEMICOLON       reduce using rule 82 (logic2 -> GREATER np_push_operator exp .)


state 256

    (83) logic2 -> LESS_EQ np_push_operator exp .

    OR              reduce using rule 83 (logic2 -> LESS_EQ np_push_operator exp .)
    AND             reduce using rule 83 (logic2 -> LESS_EQ np_push_operator exp .)
    R_PAR           reduce using rule 83 (logic2 -> LESS_EQ np_push_operator exp .)
    COMMA           reduce using rule 83 (logic2 -> LESS_EQ np_push_operator exp .)
    SEMICOLON       reduce using rule 83 (logic2 -> LESS_EQ np_push_operator exp .)


state 257

    (84) logic2 -> GREATER_EQ np_push_operator exp .

    OR              reduce using rule 84 (logic2 -> GREATER_EQ np_push_operator exp .)
    AND             reduce using rule 84 (logic2 -> GREATER_EQ np_push_operator exp .)
    R_PAR           reduce using rule 84 (logic2 -> GREATER_EQ np_push_operator exp .)
    COMMA           reduce using rule 84 (logic2 -> GREATER_EQ np_push_operator exp .)
    SEMICOLON       reduce using rule 84 (logic2 -> GREATER_EQ np_push_operator exp .)


state 258

    (85) logic2 -> EQUIVALENT np_push_operator exp .

    OR              reduce using rule 85 (logic2 -> EQUIVALENT np_push_operator exp .)
    AND             reduce using rule 85 (logic2 -> EQUIVALENT np_push_operator exp .)
    R_PAR           reduce using rule 85 (logic2 -> EQUIVALENT np_push_operator exp .)
    COMMA           reduce using rule 85 (logic2 -> EQUIVALENT np_push_operator exp .)
    SEMICOLON       reduce using rule 85 (logic2 -> EQUIVALENT np_push_operator exp .)


state 259

    (86) logic2 -> DIFFERENT np_push_operator exp .

    OR              reduce using rule 86 (logic2 -> DIFFERENT np_push_operator exp .)
    AND             reduce using rule 86 (logic2 -> DIFFERENT np_push_operator exp .)
    R_PAR           reduce using rule 86 (logic2 -> DIFFERENT np_push_operator exp .)
    COMMA           reduce using rule 86 (logic2 -> DIFFERENT np_push_operator exp .)
    SEMICOLON       reduce using rule 86 (logic2 -> DIFFERENT np_push_operator exp .)


state 260

    (89) exp2 -> PLUS np_push_operator exp .

    LESS            reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    GREATER         reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    LESS_EQ         reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    GREATER_EQ      reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    EQUIVALENT      reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    DIFFERENT       reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    OR              reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    AND             reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    R_PAR           reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    COMMA           reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    SEMICOLON       reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    R_BRACKET       reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    TO              reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)
    L_BRACE         reduce using rule 89 (exp2 -> PLUS np_push_operator exp .)


state 261

    (90) exp2 -> MINUS np_push_operator exp .

    LESS            reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    GREATER         reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    LESS_EQ         reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    GREATER_EQ      reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    EQUIVALENT      reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    DIFFERENT       reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    OR              reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    AND             reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    R_PAR           reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    COMMA           reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    SEMICOLON       reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    R_BRACKET       reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    TO              reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)
    L_BRACE         reduce using rule 90 (exp2 -> MINUS np_push_operator exp .)


state 262

    (93) term2 -> MULT np_push_operator term .

    PLUS            reduce using rule 93 (term2 -> MULT np_push_operator term .)
    MINUS           reduce using rule 93 (term2 -> MULT np_push_operator term .)
    LESS            reduce using rule 93 (term2 -> MULT np_push_operator term .)
    GREATER         reduce using rule 93 (term2 -> MULT np_push_operator term .)
    LESS_EQ         reduce using rule 93 (term2 -> MULT np_push_operator term .)
    GREATER_EQ      reduce using rule 93 (term2 -> MULT np_push_operator term .)
    EQUIVALENT      reduce using rule 93 (term2 -> MULT np_push_operator term .)
    DIFFERENT       reduce using rule 93 (term2 -> MULT np_push_operator term .)
    OR              reduce using rule 93 (term2 -> MULT np_push_operator term .)
    AND             reduce using rule 93 (term2 -> MULT np_push_operator term .)
    R_PAR           reduce using rule 93 (term2 -> MULT np_push_operator term .)
    COMMA           reduce using rule 93 (term2 -> MULT np_push_operator term .)
    SEMICOLON       reduce using rule 93 (term2 -> MULT np_push_operator term .)
    R_BRACKET       reduce using rule 93 (term2 -> MULT np_push_operator term .)
    TO              reduce using rule 93 (term2 -> MULT np_push_operator term .)
    L_BRACE         reduce using rule 93 (term2 -> MULT np_push_operator term .)


state 263

    (94) term2 -> DIV np_push_operator term .

    PLUS            reduce using rule 94 (term2 -> DIV np_push_operator term .)
    MINUS           reduce using rule 94 (term2 -> DIV np_push_operator term .)
    LESS            reduce using rule 94 (term2 -> DIV np_push_operator term .)
    GREATER         reduce using rule 94 (term2 -> DIV np_push_operator term .)
    LESS_EQ         reduce using rule 94 (term2 -> DIV np_push_operator term .)
    GREATER_EQ      reduce using rule 94 (term2 -> DIV np_push_operator term .)
    EQUIVALENT      reduce using rule 94 (term2 -> DIV np_push_operator term .)
    DIFFERENT       reduce using rule 94 (term2 -> DIV np_push_operator term .)
    OR              reduce using rule 94 (term2 -> DIV np_push_operator term .)
    AND             reduce using rule 94 (term2 -> DIV np_push_operator term .)
    R_PAR           reduce using rule 94 (term2 -> DIV np_push_operator term .)
    COMMA           reduce using rule 94 (term2 -> DIV np_push_operator term .)
    SEMICOLON       reduce using rule 94 (term2 -> DIV np_push_operator term .)
    R_BRACKET       reduce using rule 94 (term2 -> DIV np_push_operator term .)
    TO              reduce using rule 94 (term2 -> DIV np_push_operator term .)
    L_BRACE         reduce using rule 94 (term2 -> DIV np_push_operator term .)


state 264

    (95) term2 -> REMAINDER np_push_operator term .

    PLUS            reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    MINUS           reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    LESS            reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    GREATER         reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    LESS_EQ         reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    GREATER_EQ      reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    EQUIVALENT      reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    DIFFERENT       reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    OR              reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    AND             reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    R_PAR           reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    COMMA           reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    SEMICOLON       reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    R_BRACKET       reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    TO              reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)
    L_BRACE         reduce using rule 95 (term2 -> REMAINDER np_push_operator term .)


state 265

    (98) exponentB -> EXP np_push_operator exponent .

    MULT            reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    DIV             reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    REMAINDER       reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    PLUS            reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    MINUS           reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    LESS            reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    GREATER         reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    LESS_EQ         reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    GREATER_EQ      reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    EQUIVALENT      reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    DIFFERENT       reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    OR              reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    AND             reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    R_PAR           reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    COMMA           reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    SEMICOLON       reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    R_BRACKET       reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    TO              reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)
    L_BRACE         reduce using rule 98 (exponentB -> EXP np_push_operator exponent .)


state 266

    (64) def_func -> MIN L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 289

state 267

    (65) def_func -> MAX L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 290

state 268

    (66) def_func -> MEAN L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 291

state 269

    (67) def_func -> MEDIAN L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 292

state 270

    (68) def_func -> MODE L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 293

state 271

    (69) def_func -> VARIANCE L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 294

state 272

    (70) def_func -> LEN L_PAR ID R_PAR . np_def_func_1param
    (147) np_def_func_1param -> .

    EXP             reduce using rule 147 (np_def_func_1param -> .)
    MULT            reduce using rule 147 (np_def_func_1param -> .)
    DIV             reduce using rule 147 (np_def_func_1param -> .)
    REMAINDER       reduce using rule 147 (np_def_func_1param -> .)
    PLUS            reduce using rule 147 (np_def_func_1param -> .)
    MINUS           reduce using rule 147 (np_def_func_1param -> .)
    LESS            reduce using rule 147 (np_def_func_1param -> .)
    GREATER         reduce using rule 147 (np_def_func_1param -> .)
    LESS_EQ         reduce using rule 147 (np_def_func_1param -> .)
    GREATER_EQ      reduce using rule 147 (np_def_func_1param -> .)
    EQUIVALENT      reduce using rule 147 (np_def_func_1param -> .)
    DIFFERENT       reduce using rule 147 (np_def_func_1param -> .)
    OR              reduce using rule 147 (np_def_func_1param -> .)
    AND             reduce using rule 147 (np_def_func_1param -> .)
    R_PAR           reduce using rule 147 (np_def_func_1param -> .)
    COMMA           reduce using rule 147 (np_def_func_1param -> .)
    SEMICOLON       reduce using rule 147 (np_def_func_1param -> .)
    R_BRACKET       reduce using rule 147 (np_def_func_1param -> .)
    TO              reduce using rule 147 (np_def_func_1param -> .)
    L_BRACE         reduce using rule 147 (np_def_func_1param -> .)

    np_def_func_1param             shift and go to state 295

state 273

    (51) read2 -> var np_read COMMA read2 .

    R_PAR           reduce using rule 51 (read2 -> var np_read COMMA read2 .)


state 274

    (53) writeB -> expression np_end np_write writeC .

    R_PAR           reduce using rule 53 (writeB -> expression np_end np_write writeC .)


state 275

    (55) writeC -> COMMA . writeB
    (53) writeB -> . expression np_end np_write writeC
    (54) writeB -> . CTE_STRING np_push_cte_str np_write writeC
    (76) expression -> . logic expressionB
    (80) logic -> . exp logic2
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    CTE_STRING      shift and go to state 146
    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    writeB                         shift and go to state 296
    expression                     shift and go to state 145
    logic                          shift and go to state 120
    exp                            shift and go to state 121
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    var                            shift and go to state 127
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 276

    (56) writeC -> empty .

    R_PAR           reduce using rule 56 (writeC -> empty .)


state 277

    (54) writeB -> CTE_STRING np_push_cte_str np_write writeC .

    R_PAR           reduce using rule 54 (writeB -> CTE_STRING np_push_cte_str np_write writeC .)


state 278

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end . np_GOTOF block np_GOTO_WHILE
    (132) np_GOTOF -> .

    L_BRACE         reduce using rule 132 (np_GOTOF -> .)

    np_GOTOF                       shift and go to state 297

state 279

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC . TO exp np_end np_comp_VC_VF block np_GOTO_FOR

    TO              shift and go to state 298


state 280

    (59) return -> RETURN L_PAR np_stop exp np_end np_set_return . R_PAR SEMICOLON

    R_PAR           shift and go to state 299


state 281

    (43) void_func -> PLOTXY L_PAR ID COMMA ID R_PAR . np_def_func_2param SEMICOLON
    (148) np_def_func_2param -> .

    SEMICOLON       reduce using rule 148 (np_def_func_2param -> .)

    np_def_func_2param             shift and go to state 300

state 282

    (20) var -> ID L_BRACKET np_stop exp np_end np_arr_end . R_BRACKET

    R_BRACKET       shift and go to state 301


state 283

    (60) func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .

    SEMICOLON       reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    EXP             reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    MULT            reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    DIV             reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    REMAINDER       reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    PLUS            reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    MINUS           reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    LESS            reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    GREATER         reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    LESS_EQ         reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    GREATER_EQ      reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    EQUIVALENT      reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    DIFFERENT       reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    OR              reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    AND             reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    R_PAR           reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    COMMA           reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    R_BRACKET       reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    TO              reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)
    L_BRACE         reduce using rule 60 (func_call -> ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB .)


state 284

    (61) func_call_arguments -> np_stop exp np_end . np_param
    (62) func_call_arguments -> np_stop exp np_end . np_param COMMA func_call_arguments
    (142) np_param -> .

    COMMA           reduce using rule 142 (np_param -> .)
    R_PAR           reduce using rule 142 (np_param -> .)

    np_param                       shift and go to state 302

state 285

    (44) void_func -> REGRESSION L_PAR ID COMMA ID R_PAR . np_def_func_2param SEMICOLON
    (148) np_def_func_2param -> .

    SEMICOLON       reduce using rule 148 (np_def_func_2param -> .)

    np_def_func_2param             shift and go to state 303

state 286

    (100) factor -> L_PAR np_push_operator expression R_PAR np_rpar .

    EXP             reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    MULT            reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    DIV             reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    REMAINDER       reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    PLUS            reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    MINUS           reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    LESS            reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    GREATER         reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    LESS_EQ         reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    GREATER_EQ      reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    EQUIVALENT      reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    DIFFERENT       reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    OR              reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    AND             reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    R_PAR           reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    COMMA           reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    SEMICOLON       reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    R_BRACKET       reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    TO              reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)
    L_BRACE         reduce using rule 100 (factor -> L_PAR np_push_operator expression R_PAR np_rpar .)


state 287

    (46) condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block . cond2 np_GOTO_END
    (47) cond2 -> . np_GOTO_ELSE ELSE block
    (48) cond2 -> . empty
    (133) np_GOTO_ELSE -> .
    (111) empty -> .

    ELSE            reduce using rule 133 (np_GOTO_ELSE -> .)
    IF              reduce using rule 111 (empty -> .)
    READ            reduce using rule 111 (empty -> .)
    WRITE           reduce using rule 111 (empty -> .)
    WHILE           reduce using rule 111 (empty -> .)
    FOR             reduce using rule 111 (empty -> .)
    RETURN          reduce using rule 111 (empty -> .)
    PLOTXY          reduce using rule 111 (empty -> .)
    REGRESSION      reduce using rule 111 (empty -> .)
    ID              reduce using rule 111 (empty -> .)
    R_BRACE         reduce using rule 111 (empty -> .)

    cond2                          shift and go to state 304
    np_GOTO_ELSE                   shift and go to state 305
    empty                          shift and go to state 306

state 288

    (27) block -> L_BRACE . blockB R_BRACE
    (28) blockB -> . statement blockB
    (29) blockB -> . empty
    (34) statement -> . assign
    (35) statement -> . condicional
    (36) statement -> . read
    (37) statement -> . write
    (38) statement -> . loop_cond
    (39) statement -> . loop_range
    (40) statement -> . return
    (41) statement -> . void_func
    (111) empty -> .
    (45) assign -> . var oper_assign np_push_operator expression np_end SEMICOLON
    (46) condicional -> . IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END
    (49) read -> . READ L_PAR read2 R_PAR SEMICOLON
    (52) write -> . WRITE L_PAR writeB R_PAR SEMICOLON
    (57) loop_cond -> . WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE
    (58) loop_range -> . FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR
    (59) return -> . RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON
    (42) void_func -> . func_call SEMICOLON
    (43) void_func -> . PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (44) void_func -> . REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB

    R_BRACE         reduce using rule 111 (empty -> .)
    IF              shift and go to state 73
    READ            shift and go to state 74
    WRITE           shift and go to state 75
    WHILE           shift and go to state 76
    FOR             shift and go to state 77
    RETURN          shift and go to state 78
    PLOTXY          shift and go to state 80
    REGRESSION      shift and go to state 82
    ID              shift and go to state 81

    blockB                         shift and go to state 61
    statement                      shift and go to state 62
    empty                          shift and go to state 63
    assign                         shift and go to state 64
    condicional                    shift and go to state 65
    read                           shift and go to state 66
    write                          shift and go to state 67
    loop_cond                      shift and go to state 68
    loop_range                     shift and go to state 69
    return                         shift and go to state 70
    void_func                      shift and go to state 71
    var                            shift and go to state 72
    func_call                      shift and go to state 79

state 289

    (64) def_func -> MIN L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 64 (def_func -> MIN L_PAR ID R_PAR np_def_func_1param .)


state 290

    (65) def_func -> MAX L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 65 (def_func -> MAX L_PAR ID R_PAR np_def_func_1param .)


state 291

    (66) def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 66 (def_func -> MEAN L_PAR ID R_PAR np_def_func_1param .)


state 292

    (67) def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 67 (def_func -> MEDIAN L_PAR ID R_PAR np_def_func_1param .)


state 293

    (68) def_func -> MODE L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 68 (def_func -> MODE L_PAR ID R_PAR np_def_func_1param .)


state 294

    (69) def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 69 (def_func -> VARIANCE L_PAR ID R_PAR np_def_func_1param .)


state 295

    (70) def_func -> LEN L_PAR ID R_PAR np_def_func_1param .

    EXP             reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    MULT            reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    DIV             reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    REMAINDER       reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    PLUS            reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    MINUS           reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    LESS            reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    GREATER         reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    LESS_EQ         reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    GREATER_EQ      reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    EQUIVALENT      reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    DIFFERENT       reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    OR              reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    AND             reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    R_PAR           reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    COMMA           reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    SEMICOLON       reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    R_BRACKET       reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    TO              reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)
    L_BRACE         reduce using rule 70 (def_func -> LEN L_PAR ID R_PAR np_def_func_1param .)


state 296

    (55) writeC -> COMMA writeB .

    R_PAR           reduce using rule 55 (writeC -> COMMA writeB .)


state 297

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF . block np_GOTO_WHILE
    (27) block -> . L_BRACE blockB R_BRACE

    L_BRACE         shift and go to state 288

    block                          shift and go to state 307

state 298

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO . exp np_end np_comp_VC_VF block np_GOTO_FOR
    (88) exp -> . term exp2
    (92) term -> . exponent term2
    (97) exponent -> . factor exponentB
    (100) factor -> . L_PAR np_push_operator expression R_PAR np_rpar
    (101) factor -> . MINUS var_cte
    (102) factor -> . var_cte
    (103) var_cte -> . var
    (104) var_cte -> . func_call
    (105) var_cte -> . def_func
    (106) var_cte -> . CTE_INT np_push_cte_int
    (107) var_cte -> . CTE_FLOAT np_push_cte_float
    (108) var_cte -> . CTE_CHAR np_push_cte_char
    (109) var_cte -> . CTE_STRING np_push_cte_str
    (110) var_cte -> . CTE_BOOL np_push_cte_bool
    (20) var -> . ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET
    (21) var -> . ID np_push_operand
    (60) func_call -> . ID np_ERA L_PAR func_call_arguments R_PAR np_GOSUB
    (64) def_func -> . MIN L_PAR ID R_PAR np_def_func_1param
    (65) def_func -> . MAX L_PAR ID R_PAR np_def_func_1param
    (66) def_func -> . MEAN L_PAR ID R_PAR np_def_func_1param
    (67) def_func -> . MEDIAN L_PAR ID R_PAR np_def_func_1param
    (68) def_func -> . MODE L_PAR ID R_PAR np_def_func_1param
    (69) def_func -> . VARIANCE L_PAR ID R_PAR np_def_func_1param
    (70) def_func -> . LEN L_PAR ID R_PAR np_def_func_1param

    L_PAR           shift and go to state 118
    MINUS           shift and go to state 125
    CTE_INT         shift and go to state 130
    CTE_FLOAT       shift and go to state 131
    CTE_CHAR        shift and go to state 132
    CTE_STRING      shift and go to state 133
    CTE_BOOL        shift and go to state 134
    ID              shift and go to state 81
    MIN             shift and go to state 135
    MAX             shift and go to state 136
    MEAN            shift and go to state 137
    MEDIAN          shift and go to state 138
    MODE            shift and go to state 139
    VARIANCE        shift and go to state 140
    LEN             shift and go to state 141

    var                            shift and go to state 127
    exp                            shift and go to state 308
    term                           shift and go to state 122
    exponent                       shift and go to state 123
    factor                         shift and go to state 124
    var_cte                        shift and go to state 126
    func_call                      shift and go to state 128
    def_func                       shift and go to state 129

state 299

    (59) return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR . SEMICOLON

    SEMICOLON       shift and go to state 309


state 300

    (43) void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param . SEMICOLON

    SEMICOLON       shift and go to state 310


state 301

    (20) var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .

    EQUAL           reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    MULT_EQ         reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    DIV_EQ          reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    PLUS_EQ         reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    MINUS_EQ        reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    EXP             reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    MULT            reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    DIV             reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    REMAINDER       reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    PLUS            reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    MINUS           reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    LESS            reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    GREATER         reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    LESS_EQ         reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    GREATER_EQ      reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    EQUIVALENT      reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    DIFFERENT       reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    OR              reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    AND             reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    R_PAR           reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    COMMA           reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    SEMICOLON       reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    R_BRACKET       reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    TO              reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)
    L_BRACE         reduce using rule 20 (var -> ID L_BRACKET np_stop exp np_end np_arr_end R_BRACKET .)


state 302

    (61) func_call_arguments -> np_stop exp np_end np_param .
    (62) func_call_arguments -> np_stop exp np_end np_param . COMMA func_call_arguments

    R_PAR           reduce using rule 61 (func_call_arguments -> np_stop exp np_end np_param .)
    COMMA           shift and go to state 311


state 303

    (44) void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param . SEMICOLON

    SEMICOLON       shift and go to state 312


state 304

    (46) condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 . np_GOTO_END
    (134) np_GOTO_END -> .

    IF              reduce using rule 134 (np_GOTO_END -> .)
    READ            reduce using rule 134 (np_GOTO_END -> .)
    WRITE           reduce using rule 134 (np_GOTO_END -> .)
    WHILE           reduce using rule 134 (np_GOTO_END -> .)
    FOR             reduce using rule 134 (np_GOTO_END -> .)
    RETURN          reduce using rule 134 (np_GOTO_END -> .)
    PLOTXY          reduce using rule 134 (np_GOTO_END -> .)
    REGRESSION      reduce using rule 134 (np_GOTO_END -> .)
    ID              reduce using rule 134 (np_GOTO_END -> .)
    R_BRACE         reduce using rule 134 (np_GOTO_END -> .)

    np_GOTO_END                    shift and go to state 313

state 305

    (47) cond2 -> np_GOTO_ELSE . ELSE block

    ELSE            shift and go to state 314


state 306

    (48) cond2 -> empty .

    IF              reduce using rule 48 (cond2 -> empty .)
    READ            reduce using rule 48 (cond2 -> empty .)
    WRITE           reduce using rule 48 (cond2 -> empty .)
    WHILE           reduce using rule 48 (cond2 -> empty .)
    FOR             reduce using rule 48 (cond2 -> empty .)
    RETURN          reduce using rule 48 (cond2 -> empty .)
    PLOTXY          reduce using rule 48 (cond2 -> empty .)
    REGRESSION      reduce using rule 48 (cond2 -> empty .)
    ID              reduce using rule 48 (cond2 -> empty .)
    R_BRACE         reduce using rule 48 (cond2 -> empty .)


state 307

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block . np_GOTO_WHILE
    (135) np_GOTO_WHILE -> .

    IF              reduce using rule 135 (np_GOTO_WHILE -> .)
    READ            reduce using rule 135 (np_GOTO_WHILE -> .)
    WRITE           reduce using rule 135 (np_GOTO_WHILE -> .)
    WHILE           reduce using rule 135 (np_GOTO_WHILE -> .)
    FOR             reduce using rule 135 (np_GOTO_WHILE -> .)
    RETURN          reduce using rule 135 (np_GOTO_WHILE -> .)
    PLOTXY          reduce using rule 135 (np_GOTO_WHILE -> .)
    REGRESSION      reduce using rule 135 (np_GOTO_WHILE -> .)
    ID              reduce using rule 135 (np_GOTO_WHILE -> .)
    R_BRACE         reduce using rule 135 (np_GOTO_WHILE -> .)

    np_GOTO_WHILE                  shift and go to state 315

state 308

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp . np_end np_comp_VC_VF block np_GOTO_FOR
    (126) np_end -> .

    L_BRACE         reduce using rule 126 (np_end -> .)

    np_end                         shift and go to state 316

state 309

    (59) return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .

    IF              reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    READ            reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    WRITE           reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    WHILE           reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    FOR             reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    RETURN          reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    PLOTXY          reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    REGRESSION      reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    ID              reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)
    R_BRACE         reduce using rule 59 (return -> RETURN L_PAR np_stop exp np_end np_set_return R_PAR SEMICOLON .)


state 310

    (43) void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .

    IF              reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    READ            reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    WRITE           reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    WHILE           reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    FOR             reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    RETURN          reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    PLOTXY          reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    REGRESSION      reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    ID              reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    R_BRACE         reduce using rule 43 (void_func -> PLOTXY L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)


state 311

    (62) func_call_arguments -> np_stop exp np_end np_param COMMA . func_call_arguments
    (61) func_call_arguments -> . np_stop exp np_end np_param
    (62) func_call_arguments -> . np_stop exp np_end np_param COMMA func_call_arguments
    (63) func_call_arguments -> . empty
    (145) np_stop -> .
    (111) empty -> .

    L_PAR           reduce using rule 145 (np_stop -> .)
    MINUS           reduce using rule 145 (np_stop -> .)
    CTE_INT         reduce using rule 145 (np_stop -> .)
    CTE_FLOAT       reduce using rule 145 (np_stop -> .)
    CTE_CHAR        reduce using rule 145 (np_stop -> .)
    CTE_STRING      reduce using rule 145 (np_stop -> .)
    CTE_BOOL        reduce using rule 145 (np_stop -> .)
    ID              reduce using rule 145 (np_stop -> .)
    MIN             reduce using rule 145 (np_stop -> .)
    MAX             reduce using rule 145 (np_stop -> .)
    MEAN            reduce using rule 145 (np_stop -> .)
    MEDIAN          reduce using rule 145 (np_stop -> .)
    MODE            reduce using rule 145 (np_stop -> .)
    VARIANCE        reduce using rule 145 (np_stop -> .)
    LEN             reduce using rule 145 (np_stop -> .)
    R_PAR           reduce using rule 111 (empty -> .)

    np_stop                        shift and go to state 208
    func_call_arguments            shift and go to state 317
    empty                          shift and go to state 209

state 312

    (44) void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .

    IF              reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    READ            reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    WRITE           reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    WHILE           reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    FOR             reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    RETURN          reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    PLOTXY          reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    REGRESSION      reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    ID              reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)
    R_BRACE         reduce using rule 44 (void_func -> REGRESSION L_PAR ID COMMA ID R_PAR np_def_func_2param SEMICOLON .)


state 313

    (46) condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .

    IF              reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    READ            reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    WRITE           reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    WHILE           reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    FOR             reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    RETURN          reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    PLOTXY          reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    REGRESSION      reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    ID              reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)
    R_BRACE         reduce using rule 46 (condicional -> IF L_PAR expression np_end np_GOTOF R_PAR block cond2 np_GOTO_END .)


state 314

    (47) cond2 -> np_GOTO_ELSE ELSE . block
    (27) block -> . L_BRACE blockB R_BRACE

    L_BRACE         shift and go to state 288

    block                          shift and go to state 318

state 315

    (57) loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .

    IF              reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    READ            reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    WRITE           reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    WHILE           reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    FOR             reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    RETURN          reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    PLOTXY          reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    REGRESSION      reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    ID              reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)
    R_BRACE         reduce using rule 57 (loop_cond -> WHILE L_PAR np_CHECKPOINT expression R_PAR np_end np_GOTOF block np_GOTO_WHILE .)


state 316

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end . np_comp_VC_VF block np_GOTO_FOR
    (130) np_comp_VC_VF -> .

    L_BRACE         reduce using rule 130 (np_comp_VC_VF -> .)

    np_comp_VC_VF                  shift and go to state 319

state 317

    (62) func_call_arguments -> np_stop exp np_end np_param COMMA func_call_arguments .

    R_PAR           reduce using rule 62 (func_call_arguments -> np_stop exp np_end np_param COMMA func_call_arguments .)


state 318

    (47) cond2 -> np_GOTO_ELSE ELSE block .

    IF              reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    READ            reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    WRITE           reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    WHILE           reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    FOR             reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    RETURN          reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    PLOTXY          reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    REGRESSION      reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    ID              reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)
    R_BRACE         reduce using rule 47 (cond2 -> np_GOTO_ELSE ELSE block .)


state 319

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF . block np_GOTO_FOR
    (27) block -> . L_BRACE blockB R_BRACE

    L_BRACE         shift and go to state 288

    block                          shift and go to state 320

state 320

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block . np_GOTO_FOR
    (136) np_GOTO_FOR -> .

    IF              reduce using rule 136 (np_GOTO_FOR -> .)
    READ            reduce using rule 136 (np_GOTO_FOR -> .)
    WRITE           reduce using rule 136 (np_GOTO_FOR -> .)
    WHILE           reduce using rule 136 (np_GOTO_FOR -> .)
    FOR             reduce using rule 136 (np_GOTO_FOR -> .)
    RETURN          reduce using rule 136 (np_GOTO_FOR -> .)
    PLOTXY          reduce using rule 136 (np_GOTO_FOR -> .)
    REGRESSION      reduce using rule 136 (np_GOTO_FOR -> .)
    ID              reduce using rule 136 (np_GOTO_FOR -> .)
    R_BRACE         reduce using rule 136 (np_GOTO_FOR -> .)

    np_GOTO_FOR                    shift and go to state 321

state 321

    (58) loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .

    IF              reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    READ            reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    WRITE           reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    WHILE           reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    FOR             reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    RETURN          reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    PLOTXY          reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    REGRESSION      reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    ID              reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)
    R_BRACE         reduce using rule 58 (loop_range -> FOR var EQUAL np_push_operator exp np_set_VC TO exp np_end np_comp_VC_VF block np_GOTO_FOR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 201 resolved using rule (var_cte -> CTE_STRING np_push_cte_str)
WARNING: rejected rule (np_write -> <empty>) in state 201
